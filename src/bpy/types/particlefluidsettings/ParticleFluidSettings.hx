package bpy.types.particlefluidsettings;
/**
	Fluid simulation settings for objects storing fluid particles generated by the simulation
**/
@:pythonImport("bpy.types.ParticleFluidSettings") extern class ParticleFluidSettings {
	/**
		Amount of particle alpha change, inverse of size influence: 0=off (all same alpha), 1=full (larger particles get lower alphas, smaller ones higher values)
		
		Type: float in [0, 2], default 0.0
	**/
	var alpha_influence : Float;
	/**
		Directory (and/or filename prefix) to store and load particles from
		
		Type: string, default “”, (never None)
	**/
	var filepath : String;
	/**
		Amount of particle size scaling: 0=off (all same size), 1=full (range 0.2-2.0), &gt;1=stronger
		
		Type: float in [0, 2], default 0.0
	**/
	var particle_influence : Float;
	/**
		Show tracer particles
		
		Type: boolean, default False
	**/
	var show_tracer : Bool;
	/**
		Show drop particles
		
		Type: boolean, default False
	**/
	var use_drops : Bool;
	/**
		Show floating foam particles
		
		Type: boolean, default False
	**/
	var use_floats : Bool;
	/**
		
		@param id The RNA type identifier. — string
		
		@returns bpy.types.Struct subclass
	**/
	static function bl_rna_get_subclass(id:Dynamic):bpy.types.struct.Struct;
	/**
		
		@param id The RNA type identifier. — string
		
		@returns type
	**/
	static function bl_rna_get_subclass_py(id:Dynamic):Dynamic;
	/**
		Type of participation in the fluid simulation
		
		Type: enum in [‘NONE’, ‘DOMAIN’, ‘FLUID’, ‘OBSTACLE’, ‘INFLOW’, ‘OUTFLOW’, ‘PARTICLE’, ‘CONTROL’], default ‘NONE’
	**/
	var type : bpy.types.fluidsettings.FluidSettings.Enum1;
}