<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/bpy.ops.rst">
    <section ids="operators-bpy-ops" names="operators\ (bpy.ops)">
        <title>Operators (bpy.ops)</title>
        <section ids="calling-operators" names="calling\ operators">
            <title>Calling Operators</title>
            <paragraph>Provides python access to calling operators, this includes operators written in
                C, Python or macros.</paragraph>
            <paragraph>Only keyword arguments can be used to pass operator properties.</paragraph>
            <paragraph>Operators don’t have return values as you might expect,
                instead they return a set() which is made up of:
                <literal>{'RUNNING_MODAL', 'CANCELLED', 'FINISHED', 'PASS_THROUGH'}</literal>.
                Common return values are <literal>{'FINISHED'}</literal> and <literal>{'CANCELLED'}</literal>.</paragraph>
            <paragraph>Calling an operator in the wrong context will raise a <literal>RuntimeError</literal>,
                there is a poll() method to avoid this problem.</paragraph>
            <paragraph>Note that the operator ID (bl_idname) in this example is <literal>mesh.subdivide</literal>,
                <literal>bpy.ops</literal> is just the access path for python.</paragraph>
            <section ids="keywords-and-positional-arguments" names="keywords\ and\ positional\ arguments">
                <title>Keywords and Positional Arguments</title>
                <paragraph>For calling operators keywords are used for operator properties and
                    positional arguments are used to define how the operator is called.</paragraph>
                <paragraph>There are 3 optional positional arguments (documented in detail below).</paragraph>
                <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">bpy.ops.test.operator(override_context, execution_context, undo)</literal_block>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>override_context - <literal>dict</literal> type.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>execution_context - <literal>str</literal> (enum).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>undo - <literal>bool</literal> type.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Each of these arguments is optional, but must be given in the order above.</paragraph>
                <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.ops.py" xml:space="preserve">import bpy

# calling an operator
bpy.ops.mesh.subdivide(number_cuts=3, smoothness=0.5)


# check poll() to avoid exception.
if bpy.ops.object.mode_set.poll():
    bpy.ops.object.mode_set(mode='EDIT')
</literal_block>
            </section>
        </section>
        <section ids="overriding-context" names="overriding\ context">
            <title>Overriding Context</title>
            <paragraph>It is possible to override context members that the operator sees, so that they
                act on specified rather than the selected or active data, or to execute an
                operator in the different part of the user interface.</paragraph>
            <paragraph>The context overrides are passed as a dictionary, with keys matching the context
                member names in bpy.context.
                For example to override <literal>bpy.context.active_object</literal>,
                you would pass <literal>{'active_object': object}</literal>.</paragraph>
            <note>
                <paragraph>You will nearly always want to use a copy of the actual current context as basis
                    (otherwise, you’ll have to find and gather all needed data yourself).</paragraph>
            </note>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.ops.1.py" xml:space="preserve">
# remove all objects in scene rather than the selected ones
import bpy
override = bpy.context.copy()
override['selected_bases'] = list(bpy.context.scene.object_bases)
bpy.ops.object.delete(override)
</literal_block>
            <target refid="operator-execution-context"></target>
        </section>
        <section ids="execution-context operator-execution-context" names="execution\ context operator-execution_context">
            <title>Execution Context</title>
            <paragraph>When calling an operator you may want to pass the execution context.</paragraph>
            <paragraph>This determines the context that is given for the operator to run in, and whether
                invoke() is called or only execute().</paragraph>
            <paragraph>‘EXEC_DEFAULT’ is used by default, running only the execute() method, but you may
                want the operator to take user interaction with ‘INVOKE_DEFAULT’ which will also
                call invoke() if existing.</paragraph>
            <paragraph>The execution context is one of:
                (‘INVOKE_DEFAULT’, ‘INVOKE_REGION_WIN’, ‘INVOKE_REGION_CHANNELS’,
                ‘INVOKE_REGION_PREVIEW’, ‘INVOKE_AREA’, ‘INVOKE_SCREEN’, ‘EXEC_DEFAULT’,
                ‘EXEC_REGION_WIN’, ‘EXEC_REGION_CHANNELS’, ‘EXEC_REGION_PREVIEW’, ‘EXEC_AREA’,
                ‘EXEC_SCREEN’)</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.ops.2.py" xml:space="preserve">
# collection add popup
import bpy
bpy.ops.object.collection_instance_add('INVOKE_DEFAULT')
</literal_block>
            <paragraph>It is also possible to run an operator in a particular part of the user
                interface. For this we need to pass the window, screen, area and sometimes
                a region.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.ops.3.py" xml:space="preserve">
# maximize 3d view in all windows
import bpy

for window in bpy.context.window_manager.windows:
    screen = window.screen

    for area in screen.areas:
        if area.type == 'VIEW_3D':
            override = {'window': window, 'screen': screen, 'area': area}
            bpy.ops.screen.screen_full_area(override)
            break
</literal_block>
            <compound classes="toctree-wrapper">
                <compact_paragraph toctree="True"><bullet_list><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.action">Action Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.anim">Anim Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.armature">Armature Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.boid">Boid Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.brush">Brush Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.buttons">Buttons Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.cachefile">Cachefile Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.camera">Camera Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.clip">Clip Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.cloth">Cloth Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.collection">Collection Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.console">Console Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.constraint">Constraint Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.curve">Curve Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.cycles">Cycles Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.dpaint">Dpaint Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.ed">Ed Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.export_anim">Export Anim Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.export_mesh">Export Mesh Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.export_scene">Export Scene Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.file">File Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.fluid">Fluid Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.font">Font Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.gizmogroup">Gizmogroup Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.gpencil">Gpencil Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.graph">Graph Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.image">Image Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.import_anim">Import Anim Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.import_curve">Import Curve Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.import_mesh">Import Mesh Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.import_scene">Import Scene Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.info">Info Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.lattice">Lattice Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.marker">Marker Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.mask">Mask Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.material">Material Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.mball">Mball Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.mesh">Mesh Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.nla">Nla Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.node">Node Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.object">Object Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.outliner">Outliner Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.paint">Paint Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.paintcurve">Paintcurve Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.palette">Palette Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.particle">Particle Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.pose">Pose Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.poselib">Poselib Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.ptcache">Ptcache Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.render">Render Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.rigidbody">Rigidbody Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.safe_areas">Safe Areas Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.scene">Scene Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.screen">Screen Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.script">Script Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.sculpt">Sculpt Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.sequencer">Sequencer Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.sound">Sound Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.surface">Surface Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.text">Text Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.texture">Texture Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.transform">Transform Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.ui">Ui Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.uv">Uv Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.view2d">View2D Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.view3d">View3D Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.wm">Wm Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.workspace">Workspace Operators</reference></compact_paragraph></list_item><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="bpy.ops.world">World Operators</reference></compact_paragraph></list_item></bullet_list></compact_paragraph>
            </compound>
        </section>
    </section>
</document>
