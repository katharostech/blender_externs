<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/bpy.types.Panel.rst">
    <section ids="module-bpy.types panel-bpy-struct" names="panel(bpy_struct)">
        <title>Panel(bpy_struct)</title>
        <index entries="['single',\ u'bpy.types\ (module)',\ u'module-bpy.types',\ '',\ None]"></index>
        <section ids="basic-panel-example" names="basic\ panel\ example">
            <title>Basic Panel Example</title>
            <paragraph>This script is a simple panel which will draw into the object properties
                section.</paragraph>
            <paragraph>Notice the ‘CATEGORY_PT_name’ <reference internal="True" refid="bpy.types.Panel.bl_idname" reftitle="bpy.types.Panel.bl_idname"><literal classes="xref py py-class">Panel.bl_idname</literal></reference>, this is a naming
                convention for panels.</paragraph>
            <note>
                <paragraph>Panel subclasses must be registered for blender to use them.</paragraph>
            </note>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.types.Panel.py" xml:space="preserve">import bpy


                class HelloWorldPanel(bpy.types.Panel):
                    bl_idname = "OBJECT_PT_hello_world"
                    bl_label = "Hello World"
                    bl_space_type = 'PROPERTIES'
                    bl_region_type = 'WINDOW'
                    bl_context = "object"

                    def draw(self, context):
                        self.layout.label(text="Hello World")


                bpy.utils.register_class(HelloWorldPanel)
</literal_block>
        </section>
        <section ids="simple-object-panel" names="simple\ object\ panel">
            <title>Simple Object Panel</title>
            <paragraph>This panel has a <reference internal="True" refid="bpy.types.Panel.poll" reftitle="bpy.types.Panel.poll"><literal classes="xref py py-class">Panel.poll</literal></reference> and <reference internal="True" refid="bpy.types.Panel.draw_header" reftitle="bpy.types.Panel.draw_header"><literal classes="xref py py-class">Panel.draw_header</literal></reference> function,
                even though the contents is basic this closely resembles blenders panels.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.types.Panel.1.py" xml:space="preserve">import bpy


class ObjectSelectPanel(bpy.types.Panel):
    bl_idname = "OBJECT_PT_select"
    bl_label = "Select"
    bl_space_type = 'PROPERTIES'
    bl_region_type = 'WINDOW'
    bl_context = "object"
    bl_options = {'DEFAULT_CLOSED'}

    @classmethod
    def poll(cls, context):
        return (context.object is not None)

    def draw_header(self, context):
        layout = self.layout
        obj = context.object
        layout.prop(obj, "select", text="")

    def draw(self, context):
        layout = self.layout

        obj = context.object
        row = layout.row()
        row.prop(obj, "hide_select")
        row.prop(obj, "hide_render")

        box = layout.box()
        box.label(text="Selection Tools")
        box.operator("object.select_all").action = 'TOGGLE'
        row = box.row()
        row.operator("object.select_all").action = 'INVERT'
        row.operator("object.select_random")


bpy.utils.register_class(ObjectSelectPanel)
</literal_block>
        </section>
        <section ids="mix-in-classes" names="mix-in\ classes">
            <title>Mix-in Classes</title>
            <paragraph>A mix-in parent class can be used to share common properties and
                <reference internal="True" reftitle="bpy.types.Menu.poll" refuri="bpy.types.Menu#bpy.types.Menu.poll"><literal classes="xref py py-class">Menu.poll</literal></reference> function.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.types.Panel.2.py" xml:space="preserve">import bpy


class View3DPanel:
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'TOOLS'

    @classmethod
    def poll(cls, context):
        return (context.object is not None)


class PanelOne(View3DPanel, bpy.types.Panel):
    bl_idname = "VIEW3D_PT_test_1"
    bl_label = "Panel One"

    def draw(self, context):
        self.layout.label(text="Small Class")


class PanelTwo(View3DPanel, bpy.types.Panel):
    bl_idname = "VIEW3D_PT_test_2"
    bl_label = "Panel Two"

    def draw(self, context):
        self.layout.label(text="Also Small Class")


bpy.utils.register_class(PanelOne)
bpy.utils.register_class(PanelTwo)
</literal_block>
            <paragraph>base class — <reference internal="True" reftitle="bpy.types.bpy_struct" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct"><literal classes="xref py py-class">bpy_struct</literal></reference></paragraph>
            <index entries="['single',\ u'Panel\ (class\ in\ bpy.types)',\ u'bpy.types.Panel',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="Panel" ids="bpy.types.Panel" module="bpy.types" names="bpy.types.Panel"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bpy.types.</desc_addname><desc_name xml:space="preserve">Panel</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bpy_struct</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Panel containing UI elements</paragraph>
                    <index entries="['single',\ u'bl_category\ (bpy.types.Panel\ attribute)',\ u'bpy.types.Panel.bl_category',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Panel" first="False" fullname="Panel.bl_category" ids="bpy.types.Panel.bl_category" module="bpy.types" names="bpy.types.Panel.bl_category"><desc_name xml:space="preserve">bl_category</desc_name></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “”, (never None)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_context\ (bpy.types.Panel\ attribute)',\ u'bpy.types.Panel.bl_context',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Panel" first="False" fullname="Panel.bl_context" ids="bpy.types.Panel.bl_context" module="bpy.types" names="bpy.types.Panel.bl_context"><desc_name xml:space="preserve">bl_context</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The context in which the panel belongs to. (TODO: explain the possible combinations bl_context/bl_region_type/bl_space_type)</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “”, (never None)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_idname\ (bpy.types.Panel\ attribute)',\ u'bpy.types.Panel.bl_idname',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Panel" first="False" fullname="Panel.bl_idname" ids="bpy.types.Panel.bl_idname" module="bpy.types" names="bpy.types.Panel.bl_idname"><desc_name xml:space="preserve">bl_idname</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>If this is set, the panel gets a custom ID, otherwise it takes the name of the class used to define the panel. For example, if the class name is “OBJECT_PT_hello”, and bl_idname is not set by the script, then bl_idname = “OBJECT_PT_hello”</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “”, (never None)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_label\ (bpy.types.Panel\ attribute)',\ u'bpy.types.Panel.bl_label',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Panel" first="False" fullname="Panel.bl_label" ids="bpy.types.Panel.bl_label" module="bpy.types" names="bpy.types.Panel.bl_label"><desc_name xml:space="preserve">bl_label</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The panel label, shows up in the panel header at the right of the triangle used to collapse the panel</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “”, (never None)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_options\ (bpy.types.Panel\ attribute)',\ u'bpy.types.Panel.bl_options',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Panel" first="False" fullname="Panel.bl_options" ids="bpy.types.Panel.bl_options" module="bpy.types" names="bpy.types.Panel.bl_options"><desc_name xml:space="preserve">bl_options</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Options for this panel type</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph><literal>DEFAULT_CLOSED</literal> Default Closed, Defines if the panel has to be open or collapsed at the time of its creation.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>HIDE_HEADER</literal> Hide Header, If set to False, the panel shows a header, which contains a clickable arrow to collapse the panel and the label (see bl_label).</paragraph>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>enum set in {‘DEFAULT_CLOSED’, ‘HIDE_HEADER’}, default {‘DEFAULT_CLOSED’}</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_owner_id\ (bpy.types.Panel\ attribute)',\ u'bpy.types.Panel.bl_owner_id',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Panel" first="False" fullname="Panel.bl_owner_id" ids="bpy.types.Panel.bl_owner_id" module="bpy.types" names="bpy.types.Panel.bl_owner_id"><desc_name xml:space="preserve">bl_owner_id</desc_name></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “”, (never None)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_parent_id\ (bpy.types.Panel\ attribute)',\ u'bpy.types.Panel.bl_parent_id',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Panel" first="False" fullname="Panel.bl_parent_id" ids="bpy.types.Panel.bl_parent_id" module="bpy.types" names="bpy.types.Panel.bl_parent_id"><desc_name xml:space="preserve">bl_parent_id</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>If this is set, the panel becomes a subpanel</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “”, (never None)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_region_type\ (bpy.types.Panel\ attribute)',\ u'bpy.types.Panel.bl_region_type',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Panel" first="False" fullname="Panel.bl_region_type" ids="bpy.types.Panel.bl_region_type" module="bpy.types" names="bpy.types.Panel.bl_region_type"><desc_name xml:space="preserve">bl_region_type</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The region where the panel is going to be used in</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>enum in [‘WINDOW’, ‘HEADER’, ‘CHANNELS’, ‘TEMPORARY’, ‘UI’, ‘TOOLS’, ‘TOOL_PROPS’, ‘PREVIEW’, ‘NAVIGATION_BAR’], default ‘WINDOW’</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_space_type\ (bpy.types.Panel\ attribute)',\ u'bpy.types.Panel.bl_space_type',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Panel" first="False" fullname="Panel.bl_space_type" ids="bpy.types.Panel.bl_space_type" module="bpy.types" names="bpy.types.Panel.bl_space_type"><desc_name xml:space="preserve">bl_space_type</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The space where the panel is going to be used in</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph><literal>EMPTY</literal> Empty.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>VIEW_3D</literal> 3D Viewport, Manipulate objects in a 3D environment.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>IMAGE_EDITOR</literal> UV/Image Editor, View and edit images and UV Maps.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>NODE_EDITOR</literal> Node Editor, Editor for node-based shading and compositing tools.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>SEQUENCE_EDITOR</literal> Video Sequencer, Video editing tools.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>CLIP_EDITOR</literal> Movie Clip Editor, Motion tracking tools.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>DOPESHEET_EDITOR</literal> Dope Sheet, Adjust timing of keyframes.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>GRAPH_EDITOR</literal> Graph Editor, Edit drivers and keyframe interpolation.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>NLA_EDITOR</literal> Nonlinear Animation, Combine and layer Actions.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>TEXT_EDITOR</literal> Text Editor, Edit scripts and in-file documentation.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>CONSOLE</literal> Python Console, Interactive programmatic console for advanced editing and script development.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>INFO</literal> Info, Main menu bar and list of error messages (drag down to expand and display).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>TOPBAR</literal> Top Bar, Global bar at the top of the screen for global per-window settings.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>STATUSBAR</literal> Status Bar, Global bar at the bottom of the screen for general status information.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>OUTLINER</literal> Outliner, Overview of scene graph and all available data-blocks.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>PROPERTIES</literal> Properties, Edit properties of active object and related data-blocks.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>FILE_BROWSER</literal> File Browser, Browse for files and assets.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>USER_PREFERENCES</literal> User Preferences, Edit persistent configuration settings.</paragraph>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>enum in [‘EMPTY’, ‘VIEW_3D’, ‘IMAGE_EDITOR’, ‘NODE_EDITOR’, ‘SEQUENCE_EDITOR’, ‘CLIP_EDITOR’, ‘DOPESHEET_EDITOR’, ‘GRAPH_EDITOR’, ‘NLA_EDITOR’, ‘TEXT_EDITOR’, ‘CONSOLE’, ‘INFO’, ‘TOPBAR’, ‘STATUSBAR’, ‘OUTLINER’, ‘PROPERTIES’, ‘FILE_BROWSER’, ‘USER_PREFERENCES’], default ‘EMPTY’</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_translation_context\ (bpy.types.Panel\ attribute)',\ u'bpy.types.Panel.bl_translation_context',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Panel" first="False" fullname="Panel.bl_translation_context" ids="bpy.types.Panel.bl_translation_context" module="bpy.types" names="bpy.types.Panel.bl_translation_context"><desc_name xml:space="preserve">bl_translation_context</desc_name></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “*”, (never None)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_ui_units_x\ (bpy.types.Panel\ attribute)',\ u'bpy.types.Panel.bl_ui_units_x',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Panel" first="False" fullname="Panel.bl_ui_units_x" ids="bpy.types.Panel.bl_ui_units_x" module="bpy.types" names="bpy.types.Panel.bl_ui_units_x"><desc_name xml:space="preserve">bl_ui_units_x</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>When set, defines popup panel width</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>int in [0, inf], default 0</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'Panel.is_popover\ (in\ module\ bpy.types)',\ u'bpy.types.Panel.is_popover',\ '',\ None]"></index>
                    <desc desctype="data" domain="py" noindex="False" objtype="data">
                        <desc_signature class="Panel" first="False" fullname="Panel.is_popover" ids="bpy.types.Panel.is_popover" module="bpy.types" names="bpy.types.Panel.is_popover"><desc_name xml:space="preserve">is_popover</desc_name></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean, default False, (readonly)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'Panel.layout\ (in\ module\ bpy.types)',\ u'bpy.types.Panel.layout',\ '',\ None]"></index>
                    <desc desctype="data" domain="py" noindex="False" objtype="data">
                        <desc_signature class="Panel" first="False" fullname="Panel.layout" ids="bpy.types.Panel.layout" module="bpy.types" names="bpy.types.Panel.layout"><desc_name xml:space="preserve">layout</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Defines the structure of the panel in the UI</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="bpy.types.UILayout" refuri="bpy.types.UILayout#bpy.types.UILayout"><literal classes="xref py py-class">UILayout</literal></reference>, (readonly)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'text\ (bpy.types.Panel\ attribute)',\ u'bpy.types.Panel.text',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Panel" first="False" fullname="Panel.text" ids="bpy.types.Panel.text" module="bpy.types" names="bpy.types.Panel.text"><desc_name xml:space="preserve">text</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>XXX todo</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “”, (never None)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'use_pin\ (bpy.types.Panel\ attribute)',\ u'bpy.types.Panel.use_pin',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Panel" first="False" fullname="Panel.use_pin" ids="bpy.types.Panel.use_pin" module="bpy.types" names="bpy.types.Panel.use_pin"><desc_name xml:space="preserve">use_pin</desc_name></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean, default False</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'poll()\ (bpy.types.Panel\ class\ method)',\ u'bpy.types.Panel.poll',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="Panel" first="False" fullname="Panel.poll" ids="bpy.types.Panel.poll" module="bpy.types" names="bpy.types.Panel.poll"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">poll</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>If this method returns a non-null output, then the panel can be drawn</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'draw()\ (bpy.types.Panel\ method)',\ u'bpy.types.Panel.draw',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Panel" first="False" fullname="Panel.draw" ids="bpy.types.Panel.draw" module="bpy.types" names="bpy.types.Panel.draw"><desc_name xml:space="preserve">draw</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Draw UI elements into the panel UI layout</paragraph>
                            <field_list>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'draw_header()\ (bpy.types.Panel\ method)',\ u'bpy.types.Panel.draw_header',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Panel" first="False" fullname="Panel.draw_header" ids="bpy.types.Panel.draw_header" module="bpy.types" names="bpy.types.Panel.draw_header"><desc_name xml:space="preserve">draw_header</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Draw UI elements into the panel’s header UI layout</paragraph>
                            <field_list>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'draw_header_preset()\ (bpy.types.Panel\ method)',\ u'bpy.types.Panel.draw_header_preset',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Panel" first="False" fullname="Panel.draw_header_preset" ids="bpy.types.Panel.draw_header_preset" module="bpy.types" names="bpy.types.Panel.draw_header_preset"><desc_name xml:space="preserve">draw_header_preset</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Draw UI elements for presets in the panel’s header</paragraph>
                            <field_list>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_rna_get_subclass()\ (bpy.types.Panel\ class\ method)',\ u'bpy.types.Panel.bl_rna_get_subclass',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="Panel" first="False" fullname="Panel.bl_rna_get_subclass" ids="bpy.types.Panel.bl_rna_get_subclass" module="bpy.types" names="bpy.types.Panel.bl_rna_get_subclass"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">bl_rna_get_subclass</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">default=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">id</literal_strong> (<literal_emphasis>string</literal_emphasis>) – The RNA type identifier.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The RNA type or default when not found.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="bpy.types.Struct" refuri="bpy.types.Struct#bpy.types.Struct"><literal classes="xref py py-class">bpy.types.Struct</literal></reference> subclass</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_rna_get_subclass_py()\ (bpy.types.Panel\ class\ method)',\ u'bpy.types.Panel.bl_rna_get_subclass_py',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="Panel" first="False" fullname="Panel.bl_rna_get_subclass_py" ids="bpy.types.Panel.bl_rna_get_subclass_py" module="bpy.types" names="bpy.types.Panel.bl_rna_get_subclass_py"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">bl_rna_get_subclass_py</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">default=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">id</literal_strong> (<literal_emphasis>string</literal_emphasis>) – The RNA type identifier.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The class or default when not found.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>type</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <rubric>Inherited Properties</rubric>
            <hlist>
                <hlistcol>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.id_data" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.id_data"><literal classes="xref py py-class">bpy_struct.id_data</literal></reference></paragraph>
                        </list_item>
                    </bullet_list>
                </hlistcol>
                <hlistcol>
                    <bullet_list>
                    </bullet_list>
                </hlistcol>
            </hlist>
            <rubric>Inherited Functions</rubric>
            <hlist>
                <hlistcol>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.as_pointer" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.as_pointer"><literal classes="xref py py-class">bpy_struct.as_pointer</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.driver_add" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.driver_add"><literal classes="xref py py-class">bpy_struct.driver_add</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.driver_remove" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.driver_remove"><literal classes="xref py py-class">bpy_struct.driver_remove</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.get" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.get"><literal classes="xref py py-class">bpy_struct.get</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_hidden" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_hidden"><literal classes="xref py py-class">bpy_struct.is_property_hidden</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_overridable_static" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_overridable_static"><literal classes="xref py py-class">bpy_struct.is_property_overridable_static</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_readonly" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_readonly"><literal classes="xref py py-class">bpy_struct.is_property_readonly</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_set" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_set"><literal classes="xref py py-class">bpy_struct.is_property_set</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.items" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.items"><literal classes="xref py py-class">bpy_struct.items</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keyframe_delete" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keyframe_delete"><literal classes="xref py py-class">bpy_struct.keyframe_delete</literal></reference></paragraph>
                        </list_item>
                    </bullet_list>
                </hlistcol>
                <hlistcol>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keyframe_insert" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keyframe_insert"><literal classes="xref py py-class">bpy_struct.keyframe_insert</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keys" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keys"><literal classes="xref py py-class">bpy_struct.keys</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.path_from_id" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.path_from_id"><literal classes="xref py py-class">bpy_struct.path_from_id</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.path_resolve" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.path_resolve"><literal classes="xref py py-class">bpy_struct.path_resolve</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.pop" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.pop"><literal classes="xref py py-class">bpy_struct.pop</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.property_overridable_static_set" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.property_overridable_static_set"><literal classes="xref py py-class">bpy_struct.property_overridable_static_set</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.property_unset" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.property_unset"><literal classes="xref py py-class">bpy_struct.property_unset</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.type_recast" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.type_recast"><literal classes="xref py py-class">bpy_struct.type_recast</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.values" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.values"><literal classes="xref py py-class">bpy_struct.values</literal></reference></paragraph>
                        </list_item>
                    </bullet_list>
                </hlistcol>
            </hlist>
        </section>
    </section>
</document>
