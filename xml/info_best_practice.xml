<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/info_best_practice.rst">
    <section ids="best-practice" names="best\ practice">
        <title>Best Practice</title>
        <paragraph>When writing your own scripts python is great for new developers to pick up and become productive,
            but you can also pick up odd habits or at least write scripts that are not easy for others to understand.</paragraph>
        <paragraph>For your own work this is of course fine,
            but if you want to collaborate with others or have your work included with blender there are practices we encourage.</paragraph>
        <section ids="style-conventions" names="style\ conventions">
            <title>Style Conventions</title>
            <paragraph>For Blender/Python development we have chosen to follow python suggested style guide to avoid mixing styles
                amongst our own scripts and make it easier to use python scripts from other projects.</paragraph>
            <paragraph>Using our style guide for your own scripts makes it easier if you eventually want to contribute them to blender.</paragraph>
            <paragraph>This style guide is known as pep8 and can be found <reference name="here" refuri="https://www.python.org/dev/peps/pep-0008/">here</reference><target ids="here" names="here" refuri="https://www.python.org/dev/peps/pep-0008/"></target></paragraph>
            <paragraph>A brief listing of pep8 criteria.</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>camel caps for class names: MyClass</paragraph>
                </list_item>
                <list_item>
                    <paragraph>all lower case underscore separated module names: my_module</paragraph>
                </list_item>
                <list_item>
                    <paragraph>indentation of 4 spaces (no tabs)</paragraph>
                </list_item>
                <list_item>
                    <paragraph>spaces around operators. <literal>1 + 1</literal>, not <literal>1+1</literal></paragraph>
                </list_item>
                <list_item>
                    <paragraph>only use explicit imports, (no importing <literal>*</literal>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph>don’t use single line: <literal>if val: body</literal>, separate onto 2 lines instead.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>As well as pep8 we have other conventions used for blender python scripts.</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Use single quotes for enums, and double quotes for strings.</paragraph>
                    <paragraph>Both are of course strings, but in our internal API enums are unique items from a limited set. eg.</paragraph>
                    <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">bpy.context.scene.render.image_settings.file_format = 'PNG'
bpy.context.scene.render.filepath = "//render_out"</literal_block>
                </list_item>
                <list_item>
                    <paragraph>pep8 also defines that lines should not exceed 79 characters,
                        we felt this is too restrictive so this is optional per script.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Periodically we run checks for pep8 compliance on blender scripts,
                for scripts to be included in this check add this line as a comment at the top of the script.</paragraph>
            <paragraph><literal># &lt;pep8 compliant&gt;</literal></paragraph>
            <paragraph>To enable line length checks use this instead.</paragraph>
            <paragraph><literal># &lt;pep8-80 compliant&gt;</literal></paragraph>
        </section>
        <section ids="user-interface-layout" names="user\ interface\ layout">
            <title>User Interface Layout</title>
            <paragraph>Some notes to keep in mind when writing UI layouts:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>UI code is quite simple. Layout declarations are there to easily create a decent layout.</paragraph>
                    <paragraph>General rule here: If you need more code for the layout declaration,
                        then for the actual properties, you do it wrong.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Example layouts:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>layout()</paragraph>
                    <paragraph>The basic layout is a simple Top -&gt; Bottom layout.</paragraph>
                    <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">layout.prop()
layout.prop()</literal_block>
                </list_item>
                <list_item>
                    <paragraph>layout.row()</paragraph>
                    <paragraph>Use row(), when you want more than 1 property in one line.</paragraph>
                    <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">row = layout.row()
row.prop()
row.prop()</literal_block>
                </list_item>
                <list_item>
                    <paragraph>layout.column()</paragraph>
                    <paragraph>Use column(), when you want your properties in a column.</paragraph>
                    <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">col = layout.column()
col.prop()
col.prop()</literal_block>
                </list_item>
                <list_item>
                    <paragraph>layout.split()</paragraph>
                    <paragraph>This can be used to create more complex layouts.
                        For example you can split the layout and create two column() layouts next to each other.
                        Don’t use split, when you simply want two properties in a row. Use row() for that.</paragraph>
                    <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">split = layout.split()

col = split.column()
col.prop()
col.prop()

col = split.column()
col.prop()
col.prop()</literal_block>
                </list_item>
            </bullet_list>
            <paragraph>Declaration names:</paragraph>
            <paragraph>Try to only use these variable names for layout declarations:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>row for a row() layout</paragraph>
                </list_item>
                <list_item>
                    <paragraph>col for a column() layout</paragraph>
                </list_item>
                <list_item>
                    <paragraph>split for a split() layout</paragraph>
                </list_item>
                <list_item>
                    <paragraph>flow for a column_flow() layout</paragraph>
                </list_item>
                <list_item>
                    <paragraph>sub for a sub layout (a column inside a column for example)</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="script-efficiency" names="script\ efficiency">
            <title>Script Efficiency</title>
            <section ids="list-manipulation-general-python-tips" names="list\ manipulation\ (general\ python\ tips)">
                <title>List Manipulation (General Python Tips)</title>
                <section ids="searching-for-list-items" names="searching\ for\ list\ items">
                    <title>Searching for list items</title>
                    <paragraph>In Python there are some handy list functions that save you having to search through the list.</paragraph>
                    <paragraph>Even though you are not looping on the list data <strong>python is</strong>,
                        so you need to be aware of functions that will slow down your script by searching the whole list.</paragraph>
                    <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">my_list.count(list_item)
my_list.index(list_item)
my_list.remove(list_item)
if list_item in my_list: ...</literal_block>
                </section>
                <section ids="modifying-lists" names="modifying\ lists">
                    <title>Modifying Lists</title>
                    <paragraph>In python we can add and remove from a list, this is slower when the list length is modified,
                        especially at the start of the list, since all the data after the index of
                        modification needs to be moved up or down 1 place.</paragraph>
                    <paragraph>The most simple way to add onto the end of the list is to use
                        <literal>my_list.append(list_item)</literal> or <literal>my_list.extend(some_list)</literal> and the fastest way to
                        remove an item is <literal>my_list.pop()</literal> or <literal>del my_list[-1]</literal>.</paragraph>
                    <paragraph>To use an index you can use <literal>my_list.insert(index, list_item)</literal> or <literal>list.pop(index)</literal>
                        for list removal, but these are slower.</paragraph>
                    <paragraph>Sometimes its faster (but more memory hungry) to just rebuild the list.</paragraph>
                    <paragraph>Say you want to remove all triangular polygons in a list.</paragraph>
                    <paragraph>Rather than…</paragraph>
                    <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">polygons = mesh.polygons[:]  # make a list copy of the meshes polygons
p_idx = len(polygons)     # Loop backwards
while p_idx:           # while the value is not 0
    p_idx -= 1

    if len(polygons[p_idx].vertices) == 3:
        polygons.pop(p_idx)  # remove the triangle</literal_block>
                    <paragraph>It’s faster to build a new list with list comprehension.</paragraph>
                    <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">polygons = [p for p in mesh.polygons if len(p.vertices) != 3]</literal_block>
                </section>
                <section ids="adding-list-items" names="adding\ list\ items">
                    <title>Adding List Items</title>
                    <paragraph>If you have a list that you want to add onto another list, rather than…</paragraph>
                    <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">for l in some_list:
    my_list.append(l)</literal_block>
                    <paragraph>Use…</paragraph>
                    <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">my_list.extend([a, b, c...])</literal_block>
                    <paragraph>Note that insert can be used when needed,
                        but it is slower than append especially when inserting at the start of a long list.</paragraph>
                    <paragraph>This example shows a very sub-optimal way of making a reversed list.</paragraph>
                    <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">reverse_list = []
for list_item in some_list:
    reverse_list.insert(0, list_item)</literal_block>
                    <paragraph>Python provides more convenient ways to reverse a list using the slice method,
                        but you may want to time this before relying on it too much:</paragraph>
                    <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">some_reversed_list = some_list[::-1]</literal_block>
                </section>
                <section ids="removing-list-items" names="removing\ list\ items">
                    <title>Removing List Items</title>
                    <paragraph>Use <literal>my_list.pop(index)</literal> rather than <literal>my_list.remove(list_item)</literal></paragraph>
                    <paragraph>This requires you to have the index of the list item but is faster since <literal>remove()</literal> will search the list.</paragraph>
                    <paragraph>Here is an example of how to remove items in 1 loop,
                        removing the last items first, which is faster (as explained above).</paragraph>
                    <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">list_index = len(my_list)

while list_index:
    list_index -= 1
    if my_list[list_index].some_test_attribute == 1:
        my_list.pop(list_index)</literal_block>
                    <paragraph>This example shows a fast way of removing items,
                        for use in cases where you can alter the list order without breaking the scripts functionality.
                        This works by swapping 2 list items, so the item you remove is always last.</paragraph>
                    <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">pop_index = 5

# swap so the pop_index is last.
my_list[-1], my_list[pop_index] = my_list[pop_index], my_list[-1]

# remove last item (pop_index)
my_list.pop()</literal_block>
                    <paragraph>When removing many items in a large list this can provide a good speedup.</paragraph>
                </section>
                <section ids="avoid-copying-lists" names="avoid\ copying\ lists">
                    <title>Avoid Copying Lists</title>
                    <paragraph>When passing a list/dictionary to a function,
                        it is faster to have the function modify the list rather than returning
                        a new list so python doesn’t have to duplicate the list in memory.</paragraph>
                    <paragraph>Functions that modify a list in-place are more efficient than functions that create new lists.</paragraph>
                    <paragraph>This is generally slower so only use for functions when it makes sense not to modify the list in place.</paragraph>
                    <doctest_block xml:space="preserve">&gt;&gt;&gt; my_list = some_list_func(my_list)</doctest_block>
                    <paragraph>This is generally faster since there is no re-assignment and no list duplication.</paragraph>
                    <doctest_block xml:space="preserve">&gt;&gt;&gt; some_list_func(vec)</doctest_block>
                    <paragraph>Also note that passing a sliced list makes a copy of the list in python memory.</paragraph>
                    <doctest_block xml:space="preserve">&gt;&gt;&gt; foobar(my_list[:])</doctest_block>
                    <paragraph>If my_list was a large array containing 10000’s of items, a copy could use a lot of extra memory.</paragraph>
                </section>
            </section>
            <section ids="writing-strings-to-a-file-python-general" names="writing\ strings\ to\ a\ file\ (python\ general)">
                <title>Writing Strings to a File (Python General)</title>
                <paragraph>Here are 3 ways of joining multiple strings into one string for writing.
                    This also applies to any area of your code that involves a lot of string joining.</paragraph>
                <paragraph><literal>String addition</literal> -
                    this is the slowest option, <emphasis>don’t use if you can help it, especially when writing data in a loop</emphasis>.</paragraph>
                <doctest_block xml:space="preserve">&gt;&gt;&gt; file.write(str1 + " " + str2 + " " + str3 + "\n")</doctest_block>
                <paragraph><literal>String formatting</literal> -
                    use this when you are writing string data from floats and ints.</paragraph>
                <doctest_block xml:space="preserve">&gt;&gt;&gt; file.write("%s %s %s\n" % (str1, str2, str3))</doctest_block>
                <paragraph><literal>String join() function</literal>
                    use to join a list of strings (the list may be temporary). In the following example, the strings are joined with a space ” ” in between, other examples are “” or “, “.</paragraph>
                <doctest_block xml:space="preserve">&gt;&gt;&gt; file.write(" ".join([str1, str2, str3, "\n"]))</doctest_block>
                <paragraph>Join is fastest on many strings,
                    <reference name="string formatting" refuri="https://wiki.blender.org/index.php/Dev:Source/Modeling/BMesh/Design">string formatting</reference>
                    is quite fast too (better for converting data types). String arithmetic is slowest.</paragraph>
            </section>
            <section ids="parsing-strings-import-exporting" names="parsing\ strings\ (import/exporting)">
                <title>Parsing Strings (Import/Exporting)</title>
                <paragraph>Since many file formats are ASCII,
                    the way you parse/export strings can make a large difference in how fast your script runs.</paragraph>
                <paragraph>There are a few ways to parse strings when importing them into Blender.</paragraph>
                <section ids="parsing-numbers" names="parsing\ numbers">
                    <title>Parsing Numbers</title>
                    <paragraph>Use <literal>float(string)</literal> rather than <literal>eval(string)</literal>, if you know the value will be an int then <literal>int(string)</literal>,
                        float() will work for an int too but it is faster to read ints with int().</paragraph>
                </section>
                <section ids="checking-string-start-end" names="checking\ string\ start/end">
                    <title>Checking String Start/End</title>
                    <paragraph>If you are checking the start of a string for a keyword, rather than…</paragraph>
                    <doctest_block xml:space="preserve">&gt;&gt;&gt; if line[0:5] == "vert ": ...</doctest_block>
                    <paragraph>use…</paragraph>
                    <doctest_block xml:space="preserve">&gt;&gt;&gt; if line.startswith("vert "):</doctest_block>
                    <paragraph>Using <literal>startswith()</literal> is slightly faster (approx 5%) and also avoids a possible
                        error with the slice length not matching the string length.</paragraph>
                    <paragraph>my_string.endswith(“foo_bar”) can be used for line endings too.</paragraph>
                    <paragraph>If you are unsure whether the text is upper or lower case, use the <literal>lower()</literal> or <literal>upper()</literal> string function.</paragraph>
                    <doctest_block xml:space="preserve">&gt;&gt;&gt; if line.lower().startswith("vert ")</doctest_block>
                </section>
            </section>
            <section ids="use-try-except-sparingly" names="use\ try/except\ sparingly">
                <title>Use try/except Sparingly</title>
                <paragraph>The <strong>try</strong> statement is useful to save time writing error checking code.</paragraph>
                <paragraph>However <strong>try</strong> is significantly slower than an <strong>if</strong> since an exception has to be set each time,
                    so avoid using <strong>try</strong> in areas of your code that execute in a loop and runs many times.</paragraph>
                <paragraph>There are cases where using <strong>try</strong> is faster than checking whether the condition will raise an error,
                    so it is worth experimenting.</paragraph>
            </section>
            <section ids="value-comparison" names="value\ comparison">
                <title>Value Comparison</title>
                <paragraph>Python has two ways to compare values <literal>a == b</literal> and <literal>a is b</literal>,
                    the difference is that <literal>==</literal> may run the objects comparison function <literal>__cmp__()</literal> whereas <literal>is</literal> compares identity,
                    this is, that both variables reference the same item in memory.</paragraph>
                <paragraph>In cases where you know you are checking for the same value which is referenced from multiple places, <literal>is</literal> is faster.</paragraph>
            </section>
            <section ids="time-your-code" names="time\ your\ code">
                <title>Time Your Code</title>
                <paragraph>While developing a script it is good to time it to be aware of any changes in performance, this can be done simply.</paragraph>
                <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">import time
time_start = time.time()

# do something...

print("My Script Finished: %.4f sec" % (time.time() - time_start))</literal_block>
            </section>
        </section>
    </section>
</document>
