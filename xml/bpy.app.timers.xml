<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/bpy.app.timers.rst">
    <section ids="module-bpy.app.timers application-timers-bpy-app-timers" names="application\ timers\ (bpy.app.timers)">
        <title>Application Timers (bpy.app.timers)</title>
        <index entries="['single',\ u'bpy.app.timers\ (module)',\ u'module-bpy.app.timers',\ '',\ None]"></index>
        <section ids="run-a-function-in-x-seconds" names="run\ a\ function\ in\ x\ seconds">
            <title>Run a Function in x Seconds</title>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.app.timers.1.py" xml:space="preserve">import bpy

def in_5_seconds():
    print("Hello World")

bpy.app.timers.register(in_5_seconds, first_interval=5)
</literal_block>
        </section>
        <section ids="run-a-function-every-x-seconds" names="run\ a\ function\ every\ x\ seconds">
            <title>Run a Function every x Seconds</title>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.app.timers.2.py" xml:space="preserve">import bpy

def every_2_seconds():
    print("Hello World")
    return 2.0

bpy.app.timers.register(every_2_seconds)
</literal_block>
        </section>
        <section ids="run-a-function-n-times-every-x-seconds" names="run\ a\ function\ n\ times\ every\ x\ seconds">
            <title>Run a Function n times every x seconds</title>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.app.timers.3.py" xml:space="preserve">import bpy

counter = 0

def run_10_times():
    global counter
    counter += 1
    print(counter)
    if counter == 10:
        return None
    return 0.1

bpy.app.timers.register(run_10_times)
</literal_block>
        </section>
        <section ids="assign-parameters-to-functions" names="assign\ parameters\ to\ functions">
            <title>Assign parameters to functions</title>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.app.timers.4.py" xml:space="preserve">import bpy
import functools

def print_message(message):
    print("Message:", message)

bpy.app.timers.register(functools.partial(print_message, "Hello"), first_interval=2.0)
bpy.app.timers.register(functools.partial(print_message, "World"), first_interval=3.0)
</literal_block>
        </section>
        <section ids="use-a-timer-to-react-to-events-in-another-thread" names="use\ a\ timer\ to\ react\ to\ events\ in\ another\ thread">
            <title>Use a Timer to react to events in another thread</title>
            <paragraph>You should never modify Blender data at arbitrary points in time in separate threads.
                However you can use a queue to collect all the actions that should be executed when Blender is in the right state again.
                Pythons <title_reference>queue.Queue</title_reference> can be used here, because it implements the required locking semantics.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.app.timers.5.py" xml:space="preserve">import bpy
import queue

execution_queue = queue.Queue()

# This function can savely be called in another thread.
# The function will be executed when the timer runs the next time.
def run_in_main_thread(function):
    execution_queue.put(function)

def execute_queued_functions():
    while not execution_queue.empty():
        function = execution_queue.get()
        function()
    return 1.0

bpy.app.timers.register(execute_queued_functions)
</literal_block>
            <index entries="['single',\ u'is_registered()\ (in\ module\ bpy.app.timers)',\ u'bpy.app.timers.is_registered',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="is_registered" ids="bpy.app.timers.is_registered" module="bpy.app.timers" names="bpy.app.timers.is_registered"><desc_addname xml:space="preserve">bpy.app.timers.</desc_addname><desc_name xml:space="preserve">is_registered</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">function</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Check if this function is registered as a timer.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">function</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Function to check.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph>True when this function is registered, otherwise False.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>bool</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'register()\ (in\ module\ bpy.app.timers)',\ u'bpy.app.timers.register',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="register" ids="bpy.app.timers.register" module="bpy.app.timers" names="bpy.app.timers.register"><desc_addname xml:space="preserve">bpy.app.timers.</desc_addname><desc_name xml:space="preserve">register</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">function</desc_parameter><desc_parameter xml:space="preserve">first_interval=0</desc_parameter><desc_parameter xml:space="preserve">persistent=False</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Add a new function that will be called after the specified amount of seconds.
                        The function gets no arguments and is expected to return either None or a float.
                        If <literal>None</literal> is returned, the timer will be unregistered.
                        A returned number specifies the delay until the function is called again.
                        <literal>functools.partial</literal> can be used to assign some parameters.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">function</literal_strong> (<literal_emphasis>Callable</literal_emphasis><literal_emphasis>[</literal_emphasis><literal_emphasis>[</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>Union</literal_emphasis><literal_emphasis>[</literal_emphasis><literal_emphasis>float</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>None</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>]</literal_emphasis>) – The function that should called.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">first_interval</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Seconds until the callback should be called the first time.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">persistent</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Don’t remove timer when a new file is loaded.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'unregister()\ (in\ module\ bpy.app.timers)',\ u'bpy.app.timers.unregister',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="unregister" ids="bpy.app.timers.unregister" module="bpy.app.timers" names="bpy.app.timers.unregister"><desc_addname xml:space="preserve">bpy.app.timers.</desc_addname><desc_name xml:space="preserve">unregister</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">function</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Unregister timer.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <paragraph><literal_strong refspecific="True">function</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to unregister.</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
        </section>
    </section>
</document>
