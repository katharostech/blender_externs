<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/bmesh.utils.rst">
    <section ids="module-bmesh.utils bmesh-utilities-bmesh-utils" names="bmesh\ utilities\ (bmesh.utils)">
        <title>BMesh Utilities (bmesh.utils)</title>
        <index entries="['single',\ u'bmesh.utils\ (module)',\ u'module-bmesh.utils',\ '',\ None]"></index>
        <paragraph>This module provides access to blenders bmesh data structures.</paragraph>
        <index entries="['single',\ u'edge_rotate()\ (in\ module\ bmesh.utils)',\ u'bmesh.utils.edge_rotate',\ '',\ None]"></index>
        <desc desctype="method" domain="py" noindex="False" objtype="method">
            <desc_signature class="" first="False" fullname="edge_rotate" ids="bmesh.utils.edge_rotate" module="bmesh.utils" names="bmesh.utils.edge_rotate"><desc_addname xml:space="preserve">bmesh.utils.</desc_addname><desc_name xml:space="preserve">edge_rotate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">edge</desc_parameter><desc_parameter xml:space="preserve">ccw=False</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Rotate the edge and return the newly created edge.
                    If rotating the edge fails, None will be returned.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">edge</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>) – The edge to rotate.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">ccw</literal_strong> (<literal_emphasis>boolean</literal_emphasis>) – When True the edge will be rotated counter clockwise.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Returns</field_name>
                        <field_body>
                            <paragraph>The newly rotated edge.</paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Return type</field_name>
                        <field_body>
                            <paragraph><reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference></paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ u'edge_split()\ (in\ module\ bmesh.utils)',\ u'bmesh.utils.edge_split',\ '',\ None]"></index>
        <desc desctype="method" domain="py" noindex="False" objtype="method">
            <desc_signature class="" first="False" fullname="edge_split" ids="bmesh.utils.edge_split" module="bmesh.utils" names="bmesh.utils.edge_split"><desc_addname xml:space="preserve">bmesh.utils.</desc_addname><desc_name xml:space="preserve">edge_split</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">edge</desc_parameter><desc_parameter xml:space="preserve">vert</desc_parameter><desc_parameter xml:space="preserve">fac</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Split an edge, return the newly created data.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">edge</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>) – The edge to split.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">vert</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>) – One of the verts on the edge, defines the split direction.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">fac</literal_strong> (<literal_emphasis>float</literal_emphasis>) – The point on the edge where the new vert will be created [0 - 1].</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Returns</field_name>
                        <field_body>
                            <paragraph>The newly created (edge, vert) pair.</paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Return type</field_name>
                        <field_body>
                            <paragraph>tuple</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ u'face_flip()\ (in\ module\ bmesh.utils)',\ u'bmesh.utils.face_flip',\ '',\ None]"></index>
        <desc desctype="method" domain="py" noindex="False" objtype="method">
            <desc_signature class="" first="False" fullname="face_flip" ids="bmesh.utils.face_flip" module="bmesh.utils" names="bmesh.utils.face_flip"><desc_addname xml:space="preserve">bmesh.utils.</desc_addname><desc_name xml:space="preserve">face_flip</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">faces</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Flip the faces direction.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">face</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>) – Face to flip.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ u'face_join()\ (in\ module\ bmesh.utils)',\ u'bmesh.utils.face_join',\ '',\ None]"></index>
        <desc desctype="method" domain="py" noindex="False" objtype="method">
            <desc_signature class="" first="False" fullname="face_join" ids="bmesh.utils.face_join" module="bmesh.utils" names="bmesh.utils.face_join"><desc_addname xml:space="preserve">bmesh.utils.</desc_addname><desc_name xml:space="preserve">face_join</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">faces</desc_parameter><desc_parameter xml:space="preserve">remove=True</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Joins a sequence of faces.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">faces</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>) – Sequence of faces.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">remove</literal_strong> (<literal_emphasis>boolean</literal_emphasis>) – Remove the edges and vertices between the faces.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Returns</field_name>
                        <field_body>
                            <paragraph>The newly created face or None on failure.</paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Return type</field_name>
                        <field_body>
                            <paragraph><reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference></paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ u'face_split()\ (in\ module\ bmesh.utils)',\ u'bmesh.utils.face_split',\ '',\ None]"></index>
        <desc desctype="method" domain="py" noindex="False" objtype="method">
            <desc_signature class="" first="False" fullname="face_split" ids="bmesh.utils.face_split" module="bmesh.utils" names="bmesh.utils.face_split"><desc_addname xml:space="preserve">bmesh.utils.</desc_addname><desc_name xml:space="preserve">face_split</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">face</desc_parameter><desc_parameter xml:space="preserve">vert_a</desc_parameter><desc_parameter xml:space="preserve">vert_b</desc_parameter><desc_parameter xml:space="preserve">coords=()</desc_parameter><desc_parameter xml:space="preserve">use_exist=True</desc_parameter><desc_parameter xml:space="preserve">example=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Face split with optional intermediate points.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">face</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>) – The face to cut.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">vert_a</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>) – First vertex to cut in the face (face must contain the vert).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">vert_b</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>) – Second vertex to cut in the face (face must contain the vert).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">coords</literal_strong> (<literal_emphasis>sequence of float triplets</literal_emphasis>) – Optional argument to define points in between <emphasis>vert_a</emphasis> and <emphasis>vert_b</emphasis>.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">use_exist</literal_strong> (<literal_emphasis>boolean</literal_emphasis>) – .Use an existing edge if it exists (Only used when <emphasis>coords</emphasis> argument is empty or omitted)</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">example</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>) – Newly created edge will copy settings from this one.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Returns</field_name>
                        <field_body>
                            <paragraph>The newly created face or None on failure.</paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Return type</field_name>
                        <field_body>
                            <paragraph>(<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMLoop" refuri="bmesh.types#bmesh.types.BMLoop"><literal classes="xref py py-class">bmesh.types.BMLoop</literal></reference>) pair</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ u'face_split_edgenet()\ (in\ module\ bmesh.utils)',\ u'bmesh.utils.face_split_edgenet',\ '',\ None]"></index>
        <desc desctype="method" domain="py" noindex="False" objtype="method">
            <desc_signature class="" first="False" fullname="face_split_edgenet" ids="bmesh.utils.face_split_edgenet" module="bmesh.utils" names="bmesh.utils.face_split_edgenet"><desc_addname xml:space="preserve">bmesh.utils.</desc_addname><desc_name xml:space="preserve">face_split_edgenet</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">face</desc_parameter><desc_parameter xml:space="preserve">edgenet</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Splits a face into any number of regions defined by an edgenet.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">face</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>) – The face to split.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">face</literal_strong> – The face to split.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">edgenet</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>) – Sequence of edges.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Returns</field_name>
                        <field_body>
                            <paragraph>The newly created faces.</paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Return type</field_name>
                        <field_body>
                            <paragraph>tuple of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph>
                        </field_body>
                    </field>
                </field_list>
                <note>
                    <paragraph>Regions defined by edges need to connect to the face, otherwise they’re ignored as loose edges.</paragraph>
                </note>
            </desc_content>
        </desc>
        <index entries="['single',\ u'face_vert_separate()\ (in\ module\ bmesh.utils)',\ u'bmesh.utils.face_vert_separate',\ '',\ None]"></index>
        <desc desctype="method" domain="py" noindex="False" objtype="method">
            <desc_signature class="" first="False" fullname="face_vert_separate" ids="bmesh.utils.face_vert_separate" module="bmesh.utils" names="bmesh.utils.face_vert_separate"><desc_addname xml:space="preserve">bmesh.utils.</desc_addname><desc_name xml:space="preserve">face_vert_separate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">face</desc_parameter><desc_parameter xml:space="preserve">vert</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Rip a vertex in a face away and add a new vertex.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">face</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>) – The face to separate.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">vert</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>) – A vertex in the face to separate.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Return vert</field_name>
                        <field_body>
                            <paragraph>The newly created vertex or None on failure.</paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Rtype vert</field_name>
                        <field_body>
                            <paragraph><reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference></paragraph>
                        </field_body>
                    </field>
                </field_list>
                <note>
                    <paragraph>This is the same as loop_separate, and has only been added for convenience.</paragraph>
                </note>
            </desc_content>
        </desc>
        <index entries="['single',\ u'loop_separate()\ (in\ module\ bmesh.utils)',\ u'bmesh.utils.loop_separate',\ '',\ None]"></index>
        <desc desctype="method" domain="py" noindex="False" objtype="method">
            <desc_signature class="" first="False" fullname="loop_separate" ids="bmesh.utils.loop_separate" module="bmesh.utils" names="bmesh.utils.loop_separate"><desc_addname xml:space="preserve">bmesh.utils.</desc_addname><desc_name xml:space="preserve">loop_separate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">loop</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Rip a vertex in a face away and add a new vertex.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">loop</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMLoop" refuri="bmesh.types#bmesh.types.BMLoop"><literal classes="xref py py-class">bmesh.types.BMLoop</literal></reference>) – The loop to separate.</paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Return vert</field_name>
                        <field_body>
                            <paragraph>The newly created vertex or None on failure.</paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Rtype vert</field_name>
                        <field_body>
                            <paragraph><reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference></paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ u'vert_collapse_edge()\ (in\ module\ bmesh.utils)',\ u'bmesh.utils.vert_collapse_edge',\ '',\ None]"></index>
        <desc desctype="method" domain="py" noindex="False" objtype="method">
            <desc_signature class="" first="False" fullname="vert_collapse_edge" ids="bmesh.utils.vert_collapse_edge" module="bmesh.utils" names="bmesh.utils.vert_collapse_edge"><desc_addname xml:space="preserve">bmesh.utils.</desc_addname><desc_name xml:space="preserve">vert_collapse_edge</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">vert</desc_parameter><desc_parameter xml:space="preserve">edge</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Collapse a vertex into an edge.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">vert</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>) – The vert that will be collapsed.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">edge</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>) – The edge to collapse into.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Returns</field_name>
                        <field_body>
                            <paragraph>The resulting edge from the collapse operation.</paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Return type</field_name>
                        <field_body>
                            <paragraph><reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference></paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ u'vert_collapse_faces()\ (in\ module\ bmesh.utils)',\ u'bmesh.utils.vert_collapse_faces',\ '',\ None]"></index>
        <desc desctype="method" domain="py" noindex="False" objtype="method">
            <desc_signature class="" first="False" fullname="vert_collapse_faces" ids="bmesh.utils.vert_collapse_faces" module="bmesh.utils" names="bmesh.utils.vert_collapse_faces"><desc_addname xml:space="preserve">bmesh.utils.</desc_addname><desc_name xml:space="preserve">vert_collapse_faces</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">vert</desc_parameter><desc_parameter xml:space="preserve">edge</desc_parameter><desc_parameter xml:space="preserve">fac</desc_parameter><desc_parameter xml:space="preserve">join_faces</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Collapses a vertex that has only two manifold edges onto a vertex it shares an edge with.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">vert</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>) – The vert that will be collapsed.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">edge</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>) – The edge to collapse into.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">fac</literal_strong> (<literal_emphasis>float</literal_emphasis>) – The factor to use when merging customdata [0 - 1].</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Returns</field_name>
                        <field_body>
                            <paragraph>The resulting edge from the collapse operation.</paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Return type</field_name>
                        <field_body>
                            <paragraph><reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference></paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ u'vert_dissolve()\ (in\ module\ bmesh.utils)',\ u'bmesh.utils.vert_dissolve',\ '',\ None]"></index>
        <desc desctype="method" domain="py" noindex="False" objtype="method">
            <desc_signature class="" first="False" fullname="vert_dissolve" ids="bmesh.utils.vert_dissolve" module="bmesh.utils" names="bmesh.utils.vert_dissolve"><desc_addname xml:space="preserve">bmesh.utils.</desc_addname><desc_name xml:space="preserve">vert_dissolve</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">vert</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Dissolve this vertex (will be removed).</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">vert</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>) – The vert to be dissolved.</paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Returns</field_name>
                        <field_body>
                            <paragraph>True when the vertex dissolve is successful.</paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Return type</field_name>
                        <field_body>
                            <paragraph>boolean</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ u'vert_separate()\ (in\ module\ bmesh.utils)',\ u'bmesh.utils.vert_separate',\ '',\ None]"></index>
        <desc desctype="method" domain="py" noindex="False" objtype="method">
            <desc_signature class="" first="False" fullname="vert_separate" ids="bmesh.utils.vert_separate" module="bmesh.utils" names="bmesh.utils.vert_separate"><desc_addname xml:space="preserve">bmesh.utils.</desc_addname><desc_name xml:space="preserve">vert_separate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">vert</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Separate this vertex at every edge.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">vert</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>) – The vert to be separated.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">edges</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>) – The edges to separated.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Returns</field_name>
                        <field_body>
                            <paragraph>The newly separated verts (including the vertex passed).</paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Return type</field_name>
                        <field_body>
                            <paragraph>tuple of <reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference></paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ u'vert_splice()\ (in\ module\ bmesh.utils)',\ u'bmesh.utils.vert_splice',\ '',\ None]"></index>
        <desc desctype="method" domain="py" noindex="False" objtype="method">
            <desc_signature class="" first="False" fullname="vert_splice" ids="bmesh.utils.vert_splice" module="bmesh.utils" names="bmesh.utils.vert_splice"><desc_addname xml:space="preserve">bmesh.utils.</desc_addname><desc_name xml:space="preserve">vert_splice</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">vert</desc_parameter><desc_parameter xml:space="preserve">vert_target</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Splice vert into vert_target.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">vert</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>) – The vertex to be removed.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">vert_target</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>) – The vertex to use.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
                <note>
                    <paragraph>The verts mustn’t share an edge or face.</paragraph>
                </note>
            </desc_content>
        </desc>
    </section>
</document>
