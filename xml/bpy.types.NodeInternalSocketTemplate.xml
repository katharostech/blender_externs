<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/bpy.types.NodeInternalSocketTemplate.rst">
    <section ids="module-bpy.types nodeinternalsockettemplate-bpy-struct" names="nodeinternalsockettemplate(bpy_struct)">
        <title>NodeInternalSocketTemplate(bpy_struct)</title>
        <index entries="['single',\ u'bpy.types\ (module)',\ u'module-bpy.types',\ '',\ None]"></index>
        <paragraph>base class — <reference internal="True" reftitle="bpy.types.bpy_struct" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct"><literal classes="xref py py-class">bpy_struct</literal></reference></paragraph>
        <index entries="['single',\ u'NodeInternalSocketTemplate\ (class\ in\ bpy.types)',\ u'bpy.types.NodeInternalSocketTemplate',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="NodeInternalSocketTemplate" ids="bpy.types.NodeInternalSocketTemplate" module="bpy.types" names="bpy.types.NodeInternalSocketTemplate"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bpy.types.</desc_addname><desc_name xml:space="preserve">NodeInternalSocketTemplate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bpy_struct</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Type and default value of a node socket</paragraph>
                <index entries="['single',\ u'NodeInternalSocketTemplate.identifier\ (in\ module\ bpy.types)',\ u'bpy.types.NodeInternalSocketTemplate.identifier',\ '',\ None]"></index>
                <desc desctype="data" domain="py" noindex="False" objtype="data">
                    <desc_signature class="NodeInternalSocketTemplate" first="False" fullname="NodeInternalSocketTemplate.identifier" ids="bpy.types.NodeInternalSocketTemplate.identifier" module="bpy.types" names="bpy.types.NodeInternalSocketTemplate.identifier"><desc_name xml:space="preserve">identifier</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Identifier of the socket</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>string, default “”, (readonly, never None)</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'NodeInternalSocketTemplate.name\ (in\ module\ bpy.types)',\ u'bpy.types.NodeInternalSocketTemplate.name',\ '',\ None]"></index>
                <desc desctype="data" domain="py" noindex="False" objtype="data">
                    <desc_signature class="NodeInternalSocketTemplate" first="False" fullname="NodeInternalSocketTemplate.name" ids="bpy.types.NodeInternalSocketTemplate.name" module="bpy.types" names="bpy.types.NodeInternalSocketTemplate.name"><desc_name xml:space="preserve">name</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Name of the socket</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>string, default “”, (readonly, never None)</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'NodeInternalSocketTemplate.type\ (in\ module\ bpy.types)',\ u'bpy.types.NodeInternalSocketTemplate.type',\ '',\ None]"></index>
                <desc desctype="data" domain="py" noindex="False" objtype="data">
                    <desc_signature class="NodeInternalSocketTemplate" first="False" fullname="NodeInternalSocketTemplate.type" ids="bpy.types.NodeInternalSocketTemplate.type" module="bpy.types" names="bpy.types.NodeInternalSocketTemplate.type"><desc_name xml:space="preserve">type</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Data type of the socket</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>enum in [‘CUSTOM’, ‘VALUE’, ‘INT’, ‘BOOLEAN’, ‘VECTOR’, ‘STRING’, ‘RGBA’, ‘SHADER’], default ‘VALUE’, (readonly)</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'bl_rna_get_subclass()\ (bpy.types.NodeInternalSocketTemplate\ class\ method)',\ u'bpy.types.NodeInternalSocketTemplate.bl_rna_get_subclass',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="NodeInternalSocketTemplate" first="False" fullname="NodeInternalSocketTemplate.bl_rna_get_subclass" ids="bpy.types.NodeInternalSocketTemplate.bl_rna_get_subclass" module="bpy.types" names="bpy.types.NodeInternalSocketTemplate.bl_rna_get_subclass"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">bl_rna_get_subclass</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">default=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">id</literal_strong> (<literal_emphasis>string</literal_emphasis>) – The RNA type identifier.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The RNA type or default when not found.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="bpy.types.Struct" refuri="bpy.types.Struct#bpy.types.Struct"><literal classes="xref py py-class">bpy.types.Struct</literal></reference> subclass</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'bl_rna_get_subclass_py()\ (bpy.types.NodeInternalSocketTemplate\ class\ method)',\ u'bpy.types.NodeInternalSocketTemplate.bl_rna_get_subclass_py',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="NodeInternalSocketTemplate" first="False" fullname="NodeInternalSocketTemplate.bl_rna_get_subclass_py" ids="bpy.types.NodeInternalSocketTemplate.bl_rna_get_subclass_py" module="bpy.types" names="bpy.types.NodeInternalSocketTemplate.bl_rna_get_subclass_py"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">bl_rna_get_subclass_py</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">default=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">id</literal_strong> (<literal_emphasis>string</literal_emphasis>) – The RNA type identifier.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The class or default when not found.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>type</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <rubric>Inherited Properties</rubric>
        <hlist>
            <hlistcol>
                <bullet_list>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.id_data" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.id_data"><literal classes="xref py py-class">bpy_struct.id_data</literal></reference></paragraph>
                    </list_item>
                </bullet_list>
            </hlistcol>
            <hlistcol>
                <bullet_list>
                </bullet_list>
            </hlistcol>
        </hlist>
        <rubric>Inherited Functions</rubric>
        <hlist>
            <hlistcol>
                <bullet_list>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.as_pointer" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.as_pointer"><literal classes="xref py py-class">bpy_struct.as_pointer</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.driver_add" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.driver_add"><literal classes="xref py py-class">bpy_struct.driver_add</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.driver_remove" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.driver_remove"><literal classes="xref py py-class">bpy_struct.driver_remove</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.get" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.get"><literal classes="xref py py-class">bpy_struct.get</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_hidden" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_hidden"><literal classes="xref py py-class">bpy_struct.is_property_hidden</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_overridable_static" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_overridable_static"><literal classes="xref py py-class">bpy_struct.is_property_overridable_static</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_readonly" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_readonly"><literal classes="xref py py-class">bpy_struct.is_property_readonly</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_set" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_set"><literal classes="xref py py-class">bpy_struct.is_property_set</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.items" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.items"><literal classes="xref py py-class">bpy_struct.items</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keyframe_delete" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keyframe_delete"><literal classes="xref py py-class">bpy_struct.keyframe_delete</literal></reference></paragraph>
                    </list_item>
                </bullet_list>
            </hlistcol>
            <hlistcol>
                <bullet_list>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keyframe_insert" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keyframe_insert"><literal classes="xref py py-class">bpy_struct.keyframe_insert</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keys" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keys"><literal classes="xref py py-class">bpy_struct.keys</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.path_from_id" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.path_from_id"><literal classes="xref py py-class">bpy_struct.path_from_id</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.path_resolve" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.path_resolve"><literal classes="xref py py-class">bpy_struct.path_resolve</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.pop" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.pop"><literal classes="xref py py-class">bpy_struct.pop</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.property_overridable_static_set" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.property_overridable_static_set"><literal classes="xref py py-class">bpy_struct.property_overridable_static_set</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.property_unset" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.property_unset"><literal classes="xref py py-class">bpy_struct.property_unset</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.type_recast" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.type_recast"><literal classes="xref py py-class">bpy_struct.type_recast</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.values" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.values"><literal classes="xref py py-class">bpy_struct.values</literal></reference></paragraph>
                    </list_item>
                </bullet_list>
            </hlistcol>
        </hlist>
        <rubric>References</rubric>
        <hlist>
            <hlistcol>
                <bullet_list>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeAlphaOver.input_template" refuri="bpy.types.CompositorNodeAlphaOver#bpy.types.CompositorNodeAlphaOver.input_template"><literal classes="xref py py-class">CompositorNodeAlphaOver.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeAlphaOver.output_template" refuri="bpy.types.CompositorNodeAlphaOver#bpy.types.CompositorNodeAlphaOver.output_template"><literal classes="xref py py-class">CompositorNodeAlphaOver.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeBilateralblur.input_template" refuri="bpy.types.CompositorNodeBilateralblur#bpy.types.CompositorNodeBilateralblur.input_template"><literal classes="xref py py-class">CompositorNodeBilateralblur.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeBilateralblur.output_template" refuri="bpy.types.CompositorNodeBilateralblur#bpy.types.CompositorNodeBilateralblur.output_template"><literal classes="xref py py-class">CompositorNodeBilateralblur.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeBlur.input_template" refuri="bpy.types.CompositorNodeBlur#bpy.types.CompositorNodeBlur.input_template"><literal classes="xref py py-class">CompositorNodeBlur.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeBlur.output_template" refuri="bpy.types.CompositorNodeBlur#bpy.types.CompositorNodeBlur.output_template"><literal classes="xref py py-class">CompositorNodeBlur.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeBokehBlur.input_template" refuri="bpy.types.CompositorNodeBokehBlur#bpy.types.CompositorNodeBokehBlur.input_template"><literal classes="xref py py-class">CompositorNodeBokehBlur.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeBokehBlur.output_template" refuri="bpy.types.CompositorNodeBokehBlur#bpy.types.CompositorNodeBokehBlur.output_template"><literal classes="xref py py-class">CompositorNodeBokehBlur.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeBokehImage.input_template" refuri="bpy.types.CompositorNodeBokehImage#bpy.types.CompositorNodeBokehImage.input_template"><literal classes="xref py py-class">CompositorNodeBokehImage.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeBokehImage.output_template" refuri="bpy.types.CompositorNodeBokehImage#bpy.types.CompositorNodeBokehImage.output_template"><literal classes="xref py py-class">CompositorNodeBokehImage.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeBoxMask.input_template" refuri="bpy.types.CompositorNodeBoxMask#bpy.types.CompositorNodeBoxMask.input_template"><literal classes="xref py py-class">CompositorNodeBoxMask.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeBoxMask.output_template" refuri="bpy.types.CompositorNodeBoxMask#bpy.types.CompositorNodeBoxMask.output_template"><literal classes="xref py py-class">CompositorNodeBoxMask.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeBrightContrast.input_template" refuri="bpy.types.CompositorNodeBrightContrast#bpy.types.CompositorNodeBrightContrast.input_template"><literal classes="xref py py-class">CompositorNodeBrightContrast.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeBrightContrast.output_template" refuri="bpy.types.CompositorNodeBrightContrast#bpy.types.CompositorNodeBrightContrast.output_template"><literal classes="xref py py-class">CompositorNodeBrightContrast.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeChannelMatte.input_template" refuri="bpy.types.CompositorNodeChannelMatte#bpy.types.CompositorNodeChannelMatte.input_template"><literal classes="xref py py-class">CompositorNodeChannelMatte.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeChannelMatte.output_template" refuri="bpy.types.CompositorNodeChannelMatte#bpy.types.CompositorNodeChannelMatte.output_template"><literal classes="xref py py-class">CompositorNodeChannelMatte.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeChromaMatte.input_template" refuri="bpy.types.CompositorNodeChromaMatte#bpy.types.CompositorNodeChromaMatte.input_template"><literal classes="xref py py-class">CompositorNodeChromaMatte.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeChromaMatte.output_template" refuri="bpy.types.CompositorNodeChromaMatte#bpy.types.CompositorNodeChromaMatte.output_template"><literal classes="xref py py-class">CompositorNodeChromaMatte.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeColorBalance.input_template" refuri="bpy.types.CompositorNodeColorBalance#bpy.types.CompositorNodeColorBalance.input_template"><literal classes="xref py py-class">CompositorNodeColorBalance.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeColorBalance.output_template" refuri="bpy.types.CompositorNodeColorBalance#bpy.types.CompositorNodeColorBalance.output_template"><literal classes="xref py py-class">CompositorNodeColorBalance.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeColorCorrection.input_template" refuri="bpy.types.CompositorNodeColorCorrection#bpy.types.CompositorNodeColorCorrection.input_template"><literal classes="xref py py-class">CompositorNodeColorCorrection.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeColorCorrection.output_template" refuri="bpy.types.CompositorNodeColorCorrection#bpy.types.CompositorNodeColorCorrection.output_template"><literal classes="xref py py-class">CompositorNodeColorCorrection.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeColorMatte.input_template" refuri="bpy.types.CompositorNodeColorMatte#bpy.types.CompositorNodeColorMatte.input_template"><literal classes="xref py py-class">CompositorNodeColorMatte.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeColorMatte.output_template" refuri="bpy.types.CompositorNodeColorMatte#bpy.types.CompositorNodeColorMatte.output_template"><literal classes="xref py py-class">CompositorNodeColorMatte.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeColorSpill.input_template" refuri="bpy.types.CompositorNodeColorSpill#bpy.types.CompositorNodeColorSpill.input_template"><literal classes="xref py py-class">CompositorNodeColorSpill.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeColorSpill.output_template" refuri="bpy.types.CompositorNodeColorSpill#bpy.types.CompositorNodeColorSpill.output_template"><literal classes="xref py py-class">CompositorNodeColorSpill.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeCombHSVA.input_template" refuri="bpy.types.CompositorNodeCombHSVA#bpy.types.CompositorNodeCombHSVA.input_template"><literal classes="xref py py-class">CompositorNodeCombHSVA.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeCombHSVA.output_template" refuri="bpy.types.CompositorNodeCombHSVA#bpy.types.CompositorNodeCombHSVA.output_template"><literal classes="xref py py-class">CompositorNodeCombHSVA.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeCombRGBA.input_template" refuri="bpy.types.CompositorNodeCombRGBA#bpy.types.CompositorNodeCombRGBA.input_template"><literal classes="xref py py-class">CompositorNodeCombRGBA.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeCombRGBA.output_template" refuri="bpy.types.CompositorNodeCombRGBA#bpy.types.CompositorNodeCombRGBA.output_template"><literal classes="xref py py-class">CompositorNodeCombRGBA.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeCombYCCA.input_template" refuri="bpy.types.CompositorNodeCombYCCA#bpy.types.CompositorNodeCombYCCA.input_template"><literal classes="xref py py-class">CompositorNodeCombYCCA.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeCombYCCA.output_template" refuri="bpy.types.CompositorNodeCombYCCA#bpy.types.CompositorNodeCombYCCA.output_template"><literal classes="xref py py-class">CompositorNodeCombYCCA.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeCombYUVA.input_template" refuri="bpy.types.CompositorNodeCombYUVA#bpy.types.CompositorNodeCombYUVA.input_template"><literal classes="xref py py-class">CompositorNodeCombYUVA.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeCombYUVA.output_template" refuri="bpy.types.CompositorNodeCombYUVA#bpy.types.CompositorNodeCombYUVA.output_template"><literal classes="xref py py-class">CompositorNodeCombYUVA.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeComposite.input_template" refuri="bpy.types.CompositorNodeComposite#bpy.types.CompositorNodeComposite.input_template"><literal classes="xref py py-class">CompositorNodeComposite.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeComposite.output_template" refuri="bpy.types.CompositorNodeComposite#bpy.types.CompositorNodeComposite.output_template"><literal classes="xref py py-class">CompositorNodeComposite.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeCornerPin.input_template" refuri="bpy.types.CompositorNodeCornerPin#bpy.types.CompositorNodeCornerPin.input_template"><literal classes="xref py py-class">CompositorNodeCornerPin.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeCornerPin.output_template" refuri="bpy.types.CompositorNodeCornerPin#bpy.types.CompositorNodeCornerPin.output_template"><literal classes="xref py py-class">CompositorNodeCornerPin.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeCrop.input_template" refuri="bpy.types.CompositorNodeCrop#bpy.types.CompositorNodeCrop.input_template"><literal classes="xref py py-class">CompositorNodeCrop.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeCrop.output_template" refuri="bpy.types.CompositorNodeCrop#bpy.types.CompositorNodeCrop.output_template"><literal classes="xref py py-class">CompositorNodeCrop.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeCryptomatte.input_template" refuri="bpy.types.CompositorNodeCryptomatte#bpy.types.CompositorNodeCryptomatte.input_template"><literal classes="xref py py-class">CompositorNodeCryptomatte.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeCryptomatte.output_template" refuri="bpy.types.CompositorNodeCryptomatte#bpy.types.CompositorNodeCryptomatte.output_template"><literal classes="xref py py-class">CompositorNodeCryptomatte.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeCurveRGB.input_template" refuri="bpy.types.CompositorNodeCurveRGB#bpy.types.CompositorNodeCurveRGB.input_template"><literal classes="xref py py-class">CompositorNodeCurveRGB.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeCurveRGB.output_template" refuri="bpy.types.CompositorNodeCurveRGB#bpy.types.CompositorNodeCurveRGB.output_template"><literal classes="xref py py-class">CompositorNodeCurveRGB.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeCurveVec.input_template" refuri="bpy.types.CompositorNodeCurveVec#bpy.types.CompositorNodeCurveVec.input_template"><literal classes="xref py py-class">CompositorNodeCurveVec.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeCurveVec.output_template" refuri="bpy.types.CompositorNodeCurveVec#bpy.types.CompositorNodeCurveVec.output_template"><literal classes="xref py py-class">CompositorNodeCurveVec.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeDBlur.input_template" refuri="bpy.types.CompositorNodeDBlur#bpy.types.CompositorNodeDBlur.input_template"><literal classes="xref py py-class">CompositorNodeDBlur.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeDBlur.output_template" refuri="bpy.types.CompositorNodeDBlur#bpy.types.CompositorNodeDBlur.output_template"><literal classes="xref py py-class">CompositorNodeDBlur.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeDefocus.input_template" refuri="bpy.types.CompositorNodeDefocus#bpy.types.CompositorNodeDefocus.input_template"><literal classes="xref py py-class">CompositorNodeDefocus.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeDefocus.output_template" refuri="bpy.types.CompositorNodeDefocus#bpy.types.CompositorNodeDefocus.output_template"><literal classes="xref py py-class">CompositorNodeDefocus.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeDespeckle.input_template" refuri="bpy.types.CompositorNodeDespeckle#bpy.types.CompositorNodeDespeckle.input_template"><literal classes="xref py py-class">CompositorNodeDespeckle.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeDespeckle.output_template" refuri="bpy.types.CompositorNodeDespeckle#bpy.types.CompositorNodeDespeckle.output_template"><literal classes="xref py py-class">CompositorNodeDespeckle.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeDiffMatte.input_template" refuri="bpy.types.CompositorNodeDiffMatte#bpy.types.CompositorNodeDiffMatte.input_template"><literal classes="xref py py-class">CompositorNodeDiffMatte.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeDiffMatte.output_template" refuri="bpy.types.CompositorNodeDiffMatte#bpy.types.CompositorNodeDiffMatte.output_template"><literal classes="xref py py-class">CompositorNodeDiffMatte.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeDilateErode.input_template" refuri="bpy.types.CompositorNodeDilateErode#bpy.types.CompositorNodeDilateErode.input_template"><literal classes="xref py py-class">CompositorNodeDilateErode.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeDilateErode.output_template" refuri="bpy.types.CompositorNodeDilateErode#bpy.types.CompositorNodeDilateErode.output_template"><literal classes="xref py py-class">CompositorNodeDilateErode.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeDisplace.input_template" refuri="bpy.types.CompositorNodeDisplace#bpy.types.CompositorNodeDisplace.input_template"><literal classes="xref py py-class">CompositorNodeDisplace.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeDisplace.output_template" refuri="bpy.types.CompositorNodeDisplace#bpy.types.CompositorNodeDisplace.output_template"><literal classes="xref py py-class">CompositorNodeDisplace.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeDistanceMatte.input_template" refuri="bpy.types.CompositorNodeDistanceMatte#bpy.types.CompositorNodeDistanceMatte.input_template"><literal classes="xref py py-class">CompositorNodeDistanceMatte.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeDistanceMatte.output_template" refuri="bpy.types.CompositorNodeDistanceMatte#bpy.types.CompositorNodeDistanceMatte.output_template"><literal classes="xref py py-class">CompositorNodeDistanceMatte.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeDoubleEdgeMask.input_template" refuri="bpy.types.CompositorNodeDoubleEdgeMask#bpy.types.CompositorNodeDoubleEdgeMask.input_template"><literal classes="xref py py-class">CompositorNodeDoubleEdgeMask.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeDoubleEdgeMask.output_template" refuri="bpy.types.CompositorNodeDoubleEdgeMask#bpy.types.CompositorNodeDoubleEdgeMask.output_template"><literal classes="xref py py-class">CompositorNodeDoubleEdgeMask.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeEllipseMask.input_template" refuri="bpy.types.CompositorNodeEllipseMask#bpy.types.CompositorNodeEllipseMask.input_template"><literal classes="xref py py-class">CompositorNodeEllipseMask.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeEllipseMask.output_template" refuri="bpy.types.CompositorNodeEllipseMask#bpy.types.CompositorNodeEllipseMask.output_template"><literal classes="xref py py-class">CompositorNodeEllipseMask.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeFilter.input_template" refuri="bpy.types.CompositorNodeFilter#bpy.types.CompositorNodeFilter.input_template"><literal classes="xref py py-class">CompositorNodeFilter.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeFilter.output_template" refuri="bpy.types.CompositorNodeFilter#bpy.types.CompositorNodeFilter.output_template"><literal classes="xref py py-class">CompositorNodeFilter.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeFlip.input_template" refuri="bpy.types.CompositorNodeFlip#bpy.types.CompositorNodeFlip.input_template"><literal classes="xref py py-class">CompositorNodeFlip.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeFlip.output_template" refuri="bpy.types.CompositorNodeFlip#bpy.types.CompositorNodeFlip.output_template"><literal classes="xref py py-class">CompositorNodeFlip.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeGamma.input_template" refuri="bpy.types.CompositorNodeGamma#bpy.types.CompositorNodeGamma.input_template"><literal classes="xref py py-class">CompositorNodeGamma.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeGamma.output_template" refuri="bpy.types.CompositorNodeGamma#bpy.types.CompositorNodeGamma.output_template"><literal classes="xref py py-class">CompositorNodeGamma.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeGlare.input_template" refuri="bpy.types.CompositorNodeGlare#bpy.types.CompositorNodeGlare.input_template"><literal classes="xref py py-class">CompositorNodeGlare.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeGlare.output_template" refuri="bpy.types.CompositorNodeGlare#bpy.types.CompositorNodeGlare.output_template"><literal classes="xref py py-class">CompositorNodeGlare.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeGroup.input_template" refuri="bpy.types.CompositorNodeGroup#bpy.types.CompositorNodeGroup.input_template"><literal classes="xref py py-class">CompositorNodeGroup.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeGroup.output_template" refuri="bpy.types.CompositorNodeGroup#bpy.types.CompositorNodeGroup.output_template"><literal classes="xref py py-class">CompositorNodeGroup.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeHueCorrect.input_template" refuri="bpy.types.CompositorNodeHueCorrect#bpy.types.CompositorNodeHueCorrect.input_template"><literal classes="xref py py-class">CompositorNodeHueCorrect.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeHueCorrect.output_template" refuri="bpy.types.CompositorNodeHueCorrect#bpy.types.CompositorNodeHueCorrect.output_template"><literal classes="xref py py-class">CompositorNodeHueCorrect.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeHueSat.input_template" refuri="bpy.types.CompositorNodeHueSat#bpy.types.CompositorNodeHueSat.input_template"><literal classes="xref py py-class">CompositorNodeHueSat.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeHueSat.output_template" refuri="bpy.types.CompositorNodeHueSat#bpy.types.CompositorNodeHueSat.output_template"><literal classes="xref py py-class">CompositorNodeHueSat.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeIDMask.input_template" refuri="bpy.types.CompositorNodeIDMask#bpy.types.CompositorNodeIDMask.input_template"><literal classes="xref py py-class">CompositorNodeIDMask.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeIDMask.output_template" refuri="bpy.types.CompositorNodeIDMask#bpy.types.CompositorNodeIDMask.output_template"><literal classes="xref py py-class">CompositorNodeIDMask.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeImage.input_template" refuri="bpy.types.CompositorNodeImage#bpy.types.CompositorNodeImage.input_template"><literal classes="xref py py-class">CompositorNodeImage.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeImage.output_template" refuri="bpy.types.CompositorNodeImage#bpy.types.CompositorNodeImage.output_template"><literal classes="xref py py-class">CompositorNodeImage.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeInpaint.input_template" refuri="bpy.types.CompositorNodeInpaint#bpy.types.CompositorNodeInpaint.input_template"><literal classes="xref py py-class">CompositorNodeInpaint.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeInpaint.output_template" refuri="bpy.types.CompositorNodeInpaint#bpy.types.CompositorNodeInpaint.output_template"><literal classes="xref py py-class">CompositorNodeInpaint.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeInvert.input_template" refuri="bpy.types.CompositorNodeInvert#bpy.types.CompositorNodeInvert.input_template"><literal classes="xref py py-class">CompositorNodeInvert.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeInvert.output_template" refuri="bpy.types.CompositorNodeInvert#bpy.types.CompositorNodeInvert.output_template"><literal classes="xref py py-class">CompositorNodeInvert.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeKeying.input_template" refuri="bpy.types.CompositorNodeKeying#bpy.types.CompositorNodeKeying.input_template"><literal classes="xref py py-class">CompositorNodeKeying.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeKeying.output_template" refuri="bpy.types.CompositorNodeKeying#bpy.types.CompositorNodeKeying.output_template"><literal classes="xref py py-class">CompositorNodeKeying.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeKeyingScreen.input_template" refuri="bpy.types.CompositorNodeKeyingScreen#bpy.types.CompositorNodeKeyingScreen.input_template"><literal classes="xref py py-class">CompositorNodeKeyingScreen.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeKeyingScreen.output_template" refuri="bpy.types.CompositorNodeKeyingScreen#bpy.types.CompositorNodeKeyingScreen.output_template"><literal classes="xref py py-class">CompositorNodeKeyingScreen.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeLensdist.input_template" refuri="bpy.types.CompositorNodeLensdist#bpy.types.CompositorNodeLensdist.input_template"><literal classes="xref py py-class">CompositorNodeLensdist.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeLensdist.output_template" refuri="bpy.types.CompositorNodeLensdist#bpy.types.CompositorNodeLensdist.output_template"><literal classes="xref py py-class">CompositorNodeLensdist.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeLevels.input_template" refuri="bpy.types.CompositorNodeLevels#bpy.types.CompositorNodeLevels.input_template"><literal classes="xref py py-class">CompositorNodeLevels.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeLevels.output_template" refuri="bpy.types.CompositorNodeLevels#bpy.types.CompositorNodeLevels.output_template"><literal classes="xref py py-class">CompositorNodeLevels.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeLumaMatte.input_template" refuri="bpy.types.CompositorNodeLumaMatte#bpy.types.CompositorNodeLumaMatte.input_template"><literal classes="xref py py-class">CompositorNodeLumaMatte.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeLumaMatte.output_template" refuri="bpy.types.CompositorNodeLumaMatte#bpy.types.CompositorNodeLumaMatte.output_template"><literal classes="xref py py-class">CompositorNodeLumaMatte.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeMapRange.input_template" refuri="bpy.types.CompositorNodeMapRange#bpy.types.CompositorNodeMapRange.input_template"><literal classes="xref py py-class">CompositorNodeMapRange.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeMapRange.output_template" refuri="bpy.types.CompositorNodeMapRange#bpy.types.CompositorNodeMapRange.output_template"><literal classes="xref py py-class">CompositorNodeMapRange.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeMapUV.input_template" refuri="bpy.types.CompositorNodeMapUV#bpy.types.CompositorNodeMapUV.input_template"><literal classes="xref py py-class">CompositorNodeMapUV.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeMapUV.output_template" refuri="bpy.types.CompositorNodeMapUV#bpy.types.CompositorNodeMapUV.output_template"><literal classes="xref py py-class">CompositorNodeMapUV.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeMapValue.input_template" refuri="bpy.types.CompositorNodeMapValue#bpy.types.CompositorNodeMapValue.input_template"><literal classes="xref py py-class">CompositorNodeMapValue.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeMapValue.output_template" refuri="bpy.types.CompositorNodeMapValue#bpy.types.CompositorNodeMapValue.output_template"><literal classes="xref py py-class">CompositorNodeMapValue.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeMask.input_template" refuri="bpy.types.CompositorNodeMask#bpy.types.CompositorNodeMask.input_template"><literal classes="xref py py-class">CompositorNodeMask.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeMask.output_template" refuri="bpy.types.CompositorNodeMask#bpy.types.CompositorNodeMask.output_template"><literal classes="xref py py-class">CompositorNodeMask.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeMath.input_template" refuri="bpy.types.CompositorNodeMath#bpy.types.CompositorNodeMath.input_template"><literal classes="xref py py-class">CompositorNodeMath.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeMath.output_template" refuri="bpy.types.CompositorNodeMath#bpy.types.CompositorNodeMath.output_template"><literal classes="xref py py-class">CompositorNodeMath.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeMixRGB.input_template" refuri="bpy.types.CompositorNodeMixRGB#bpy.types.CompositorNodeMixRGB.input_template"><literal classes="xref py py-class">CompositorNodeMixRGB.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeMixRGB.output_template" refuri="bpy.types.CompositorNodeMixRGB#bpy.types.CompositorNodeMixRGB.output_template"><literal classes="xref py py-class">CompositorNodeMixRGB.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeMovieClip.input_template" refuri="bpy.types.CompositorNodeMovieClip#bpy.types.CompositorNodeMovieClip.input_template"><literal classes="xref py py-class">CompositorNodeMovieClip.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeMovieClip.output_template" refuri="bpy.types.CompositorNodeMovieClip#bpy.types.CompositorNodeMovieClip.output_template"><literal classes="xref py py-class">CompositorNodeMovieClip.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeMovieDistortion.input_template" refuri="bpy.types.CompositorNodeMovieDistortion#bpy.types.CompositorNodeMovieDistortion.input_template"><literal classes="xref py py-class">CompositorNodeMovieDistortion.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeMovieDistortion.output_template" refuri="bpy.types.CompositorNodeMovieDistortion#bpy.types.CompositorNodeMovieDistortion.output_template"><literal classes="xref py py-class">CompositorNodeMovieDistortion.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeNormal.input_template" refuri="bpy.types.CompositorNodeNormal#bpy.types.CompositorNodeNormal.input_template"><literal classes="xref py py-class">CompositorNodeNormal.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeNormal.output_template" refuri="bpy.types.CompositorNodeNormal#bpy.types.CompositorNodeNormal.output_template"><literal classes="xref py py-class">CompositorNodeNormal.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeNormalize.input_template" refuri="bpy.types.CompositorNodeNormalize#bpy.types.CompositorNodeNormalize.input_template"><literal classes="xref py py-class">CompositorNodeNormalize.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeNormalize.output_template" refuri="bpy.types.CompositorNodeNormalize#bpy.types.CompositorNodeNormalize.output_template"><literal classes="xref py py-class">CompositorNodeNormalize.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeOutputFile.input_template" refuri="bpy.types.CompositorNodeOutputFile#bpy.types.CompositorNodeOutputFile.input_template"><literal classes="xref py py-class">CompositorNodeOutputFile.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeOutputFile.output_template" refuri="bpy.types.CompositorNodeOutputFile#bpy.types.CompositorNodeOutputFile.output_template"><literal classes="xref py py-class">CompositorNodeOutputFile.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodePixelate.input_template" refuri="bpy.types.CompositorNodePixelate#bpy.types.CompositorNodePixelate.input_template"><literal classes="xref py py-class">CompositorNodePixelate.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodePixelate.output_template" refuri="bpy.types.CompositorNodePixelate#bpy.types.CompositorNodePixelate.output_template"><literal classes="xref py py-class">CompositorNodePixelate.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodePlaneTrackDeform.input_template" refuri="bpy.types.CompositorNodePlaneTrackDeform#bpy.types.CompositorNodePlaneTrackDeform.input_template"><literal classes="xref py py-class">CompositorNodePlaneTrackDeform.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodePlaneTrackDeform.output_template" refuri="bpy.types.CompositorNodePlaneTrackDeform#bpy.types.CompositorNodePlaneTrackDeform.output_template"><literal classes="xref py py-class">CompositorNodePlaneTrackDeform.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodePremulKey.input_template" refuri="bpy.types.CompositorNodePremulKey#bpy.types.CompositorNodePremulKey.input_template"><literal classes="xref py py-class">CompositorNodePremulKey.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodePremulKey.output_template" refuri="bpy.types.CompositorNodePremulKey#bpy.types.CompositorNodePremulKey.output_template"><literal classes="xref py py-class">CompositorNodePremulKey.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeRGB.input_template" refuri="bpy.types.CompositorNodeRGB#bpy.types.CompositorNodeRGB.input_template"><literal classes="xref py py-class">CompositorNodeRGB.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeRGB.output_template" refuri="bpy.types.CompositorNodeRGB#bpy.types.CompositorNodeRGB.output_template"><literal classes="xref py py-class">CompositorNodeRGB.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeRGBToBW.input_template" refuri="bpy.types.CompositorNodeRGBToBW#bpy.types.CompositorNodeRGBToBW.input_template"><literal classes="xref py py-class">CompositorNodeRGBToBW.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeRGBToBW.output_template" refuri="bpy.types.CompositorNodeRGBToBW#bpy.types.CompositorNodeRGBToBW.output_template"><literal classes="xref py py-class">CompositorNodeRGBToBW.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeRLayers.input_template" refuri="bpy.types.CompositorNodeRLayers#bpy.types.CompositorNodeRLayers.input_template"><literal classes="xref py py-class">CompositorNodeRLayers.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeRLayers.output_template" refuri="bpy.types.CompositorNodeRLayers#bpy.types.CompositorNodeRLayers.output_template"><literal classes="xref py py-class">CompositorNodeRLayers.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeRotate.input_template" refuri="bpy.types.CompositorNodeRotate#bpy.types.CompositorNodeRotate.input_template"><literal classes="xref py py-class">CompositorNodeRotate.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeRotate.output_template" refuri="bpy.types.CompositorNodeRotate#bpy.types.CompositorNodeRotate.output_template"><literal classes="xref py py-class">CompositorNodeRotate.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeScale.input_template" refuri="bpy.types.CompositorNodeScale#bpy.types.CompositorNodeScale.input_template"><literal classes="xref py py-class">CompositorNodeScale.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeScale.output_template" refuri="bpy.types.CompositorNodeScale#bpy.types.CompositorNodeScale.output_template"><literal classes="xref py py-class">CompositorNodeScale.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeSepHSVA.input_template" refuri="bpy.types.CompositorNodeSepHSVA#bpy.types.CompositorNodeSepHSVA.input_template"><literal classes="xref py py-class">CompositorNodeSepHSVA.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeSepHSVA.output_template" refuri="bpy.types.CompositorNodeSepHSVA#bpy.types.CompositorNodeSepHSVA.output_template"><literal classes="xref py py-class">CompositorNodeSepHSVA.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeSepRGBA.input_template" refuri="bpy.types.CompositorNodeSepRGBA#bpy.types.CompositorNodeSepRGBA.input_template"><literal classes="xref py py-class">CompositorNodeSepRGBA.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeSepRGBA.output_template" refuri="bpy.types.CompositorNodeSepRGBA#bpy.types.CompositorNodeSepRGBA.output_template"><literal classes="xref py py-class">CompositorNodeSepRGBA.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeSepYCCA.input_template" refuri="bpy.types.CompositorNodeSepYCCA#bpy.types.CompositorNodeSepYCCA.input_template"><literal classes="xref py py-class">CompositorNodeSepYCCA.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeSepYCCA.output_template" refuri="bpy.types.CompositorNodeSepYCCA#bpy.types.CompositorNodeSepYCCA.output_template"><literal classes="xref py py-class">CompositorNodeSepYCCA.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeSepYUVA.input_template" refuri="bpy.types.CompositorNodeSepYUVA#bpy.types.CompositorNodeSepYUVA.input_template"><literal classes="xref py py-class">CompositorNodeSepYUVA.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeSepYUVA.output_template" refuri="bpy.types.CompositorNodeSepYUVA#bpy.types.CompositorNodeSepYUVA.output_template"><literal classes="xref py py-class">CompositorNodeSepYUVA.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeSetAlpha.input_template" refuri="bpy.types.CompositorNodeSetAlpha#bpy.types.CompositorNodeSetAlpha.input_template"><literal classes="xref py py-class">CompositorNodeSetAlpha.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeSetAlpha.output_template" refuri="bpy.types.CompositorNodeSetAlpha#bpy.types.CompositorNodeSetAlpha.output_template"><literal classes="xref py py-class">CompositorNodeSetAlpha.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeSplitViewer.input_template" refuri="bpy.types.CompositorNodeSplitViewer#bpy.types.CompositorNodeSplitViewer.input_template"><literal classes="xref py py-class">CompositorNodeSplitViewer.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeSplitViewer.output_template" refuri="bpy.types.CompositorNodeSplitViewer#bpy.types.CompositorNodeSplitViewer.output_template"><literal classes="xref py py-class">CompositorNodeSplitViewer.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeStabilize.input_template" refuri="bpy.types.CompositorNodeStabilize#bpy.types.CompositorNodeStabilize.input_template"><literal classes="xref py py-class">CompositorNodeStabilize.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeStabilize.output_template" refuri="bpy.types.CompositorNodeStabilize#bpy.types.CompositorNodeStabilize.output_template"><literal classes="xref py py-class">CompositorNodeStabilize.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeSunBeams.input_template" refuri="bpy.types.CompositorNodeSunBeams#bpy.types.CompositorNodeSunBeams.input_template"><literal classes="xref py py-class">CompositorNodeSunBeams.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeSunBeams.output_template" refuri="bpy.types.CompositorNodeSunBeams#bpy.types.CompositorNodeSunBeams.output_template"><literal classes="xref py py-class">CompositorNodeSunBeams.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeSwitch.input_template" refuri="bpy.types.CompositorNodeSwitch#bpy.types.CompositorNodeSwitch.input_template"><literal classes="xref py py-class">CompositorNodeSwitch.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeSwitch.output_template" refuri="bpy.types.CompositorNodeSwitch#bpy.types.CompositorNodeSwitch.output_template"><literal classes="xref py py-class">CompositorNodeSwitch.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeSwitchView.input_template" refuri="bpy.types.CompositorNodeSwitchView#bpy.types.CompositorNodeSwitchView.input_template"><literal classes="xref py py-class">CompositorNodeSwitchView.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeSwitchView.output_template" refuri="bpy.types.CompositorNodeSwitchView#bpy.types.CompositorNodeSwitchView.output_template"><literal classes="xref py py-class">CompositorNodeSwitchView.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeTexture.input_template" refuri="bpy.types.CompositorNodeTexture#bpy.types.CompositorNodeTexture.input_template"><literal classes="xref py py-class">CompositorNodeTexture.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeTexture.output_template" refuri="bpy.types.CompositorNodeTexture#bpy.types.CompositorNodeTexture.output_template"><literal classes="xref py py-class">CompositorNodeTexture.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeTime.input_template" refuri="bpy.types.CompositorNodeTime#bpy.types.CompositorNodeTime.input_template"><literal classes="xref py py-class">CompositorNodeTime.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeTime.output_template" refuri="bpy.types.CompositorNodeTime#bpy.types.CompositorNodeTime.output_template"><literal classes="xref py py-class">CompositorNodeTime.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeTonemap.input_template" refuri="bpy.types.CompositorNodeTonemap#bpy.types.CompositorNodeTonemap.input_template"><literal classes="xref py py-class">CompositorNodeTonemap.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeTonemap.output_template" refuri="bpy.types.CompositorNodeTonemap#bpy.types.CompositorNodeTonemap.output_template"><literal classes="xref py py-class">CompositorNodeTonemap.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeTrackPos.input_template" refuri="bpy.types.CompositorNodeTrackPos#bpy.types.CompositorNodeTrackPos.input_template"><literal classes="xref py py-class">CompositorNodeTrackPos.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeTrackPos.output_template" refuri="bpy.types.CompositorNodeTrackPos#bpy.types.CompositorNodeTrackPos.output_template"><literal classes="xref py py-class">CompositorNodeTrackPos.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeTransform.input_template" refuri="bpy.types.CompositorNodeTransform#bpy.types.CompositorNodeTransform.input_template"><literal classes="xref py py-class">CompositorNodeTransform.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeTransform.output_template" refuri="bpy.types.CompositorNodeTransform#bpy.types.CompositorNodeTransform.output_template"><literal classes="xref py py-class">CompositorNodeTransform.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeTranslate.input_template" refuri="bpy.types.CompositorNodeTranslate#bpy.types.CompositorNodeTranslate.input_template"><literal classes="xref py py-class">CompositorNodeTranslate.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeTranslate.output_template" refuri="bpy.types.CompositorNodeTranslate#bpy.types.CompositorNodeTranslate.output_template"><literal classes="xref py py-class">CompositorNodeTranslate.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeValToRGB.input_template" refuri="bpy.types.CompositorNodeValToRGB#bpy.types.CompositorNodeValToRGB.input_template"><literal classes="xref py py-class">CompositorNodeValToRGB.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeValToRGB.output_template" refuri="bpy.types.CompositorNodeValToRGB#bpy.types.CompositorNodeValToRGB.output_template"><literal classes="xref py py-class">CompositorNodeValToRGB.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeValue.input_template" refuri="bpy.types.CompositorNodeValue#bpy.types.CompositorNodeValue.input_template"><literal classes="xref py py-class">CompositorNodeValue.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeValue.output_template" refuri="bpy.types.CompositorNodeValue#bpy.types.CompositorNodeValue.output_template"><literal classes="xref py py-class">CompositorNodeValue.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeVecBlur.input_template" refuri="bpy.types.CompositorNodeVecBlur#bpy.types.CompositorNodeVecBlur.input_template"><literal classes="xref py py-class">CompositorNodeVecBlur.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeVecBlur.output_template" refuri="bpy.types.CompositorNodeVecBlur#bpy.types.CompositorNodeVecBlur.output_template"><literal classes="xref py py-class">CompositorNodeVecBlur.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeViewer.input_template" refuri="bpy.types.CompositorNodeViewer#bpy.types.CompositorNodeViewer.input_template"><literal classes="xref py py-class">CompositorNodeViewer.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeViewer.output_template" refuri="bpy.types.CompositorNodeViewer#bpy.types.CompositorNodeViewer.output_template"><literal classes="xref py py-class">CompositorNodeViewer.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeZcombine.input_template" refuri="bpy.types.CompositorNodeZcombine#bpy.types.CompositorNodeZcombine.input_template"><literal classes="xref py py-class">CompositorNodeZcombine.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNodeZcombine.output_template" refuri="bpy.types.CompositorNodeZcombine#bpy.types.CompositorNodeZcombine.output_template"><literal classes="xref py py-class">CompositorNodeZcombine.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.NodeFrame.input_template" refuri="bpy.types.NodeFrame#bpy.types.NodeFrame.input_template"><literal classes="xref py py-class">NodeFrame.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.NodeFrame.output_template" refuri="bpy.types.NodeFrame#bpy.types.NodeFrame.output_template"><literal classes="xref py py-class">NodeFrame.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.NodeGroup.input_template" refuri="bpy.types.NodeGroup#bpy.types.NodeGroup.input_template"><literal classes="xref py py-class">NodeGroup.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.NodeGroup.output_template" refuri="bpy.types.NodeGroup#bpy.types.NodeGroup.output_template"><literal classes="xref py py-class">NodeGroup.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.NodeGroupInput.input_template" refuri="bpy.types.NodeGroupInput#bpy.types.NodeGroupInput.input_template"><literal classes="xref py py-class">NodeGroupInput.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.NodeGroupInput.output_template" refuri="bpy.types.NodeGroupInput#bpy.types.NodeGroupInput.output_template"><literal classes="xref py py-class">NodeGroupInput.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.NodeGroupOutput.input_template" refuri="bpy.types.NodeGroupOutput#bpy.types.NodeGroupOutput.input_template"><literal classes="xref py py-class">NodeGroupOutput.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.NodeGroupOutput.output_template" refuri="bpy.types.NodeGroupOutput#bpy.types.NodeGroupOutput.output_template"><literal classes="xref py py-class">NodeGroupOutput.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.NodeReroute.input_template" refuri="bpy.types.NodeReroute#bpy.types.NodeReroute.input_template"><literal classes="xref py py-class">NodeReroute.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.NodeReroute.output_template" refuri="bpy.types.NodeReroute#bpy.types.NodeReroute.output_template"><literal classes="xref py py-class">NodeReroute.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeAddShader.input_template" refuri="bpy.types.ShaderNodeAddShader#bpy.types.ShaderNodeAddShader.input_template"><literal classes="xref py py-class">ShaderNodeAddShader.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeAddShader.output_template" refuri="bpy.types.ShaderNodeAddShader#bpy.types.ShaderNodeAddShader.output_template"><literal classes="xref py py-class">ShaderNodeAddShader.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeAmbientOcclusion.input_template" refuri="bpy.types.ShaderNodeAmbientOcclusion#bpy.types.ShaderNodeAmbientOcclusion.input_template"><literal classes="xref py py-class">ShaderNodeAmbientOcclusion.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeAmbientOcclusion.output_template" refuri="bpy.types.ShaderNodeAmbientOcclusion#bpy.types.ShaderNodeAmbientOcclusion.output_template"><literal classes="xref py py-class">ShaderNodeAmbientOcclusion.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeAttribute.input_template" refuri="bpy.types.ShaderNodeAttribute#bpy.types.ShaderNodeAttribute.input_template"><literal classes="xref py py-class">ShaderNodeAttribute.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeAttribute.output_template" refuri="bpy.types.ShaderNodeAttribute#bpy.types.ShaderNodeAttribute.output_template"><literal classes="xref py py-class">ShaderNodeAttribute.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBackground.input_template" refuri="bpy.types.ShaderNodeBackground#bpy.types.ShaderNodeBackground.input_template"><literal classes="xref py py-class">ShaderNodeBackground.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBackground.output_template" refuri="bpy.types.ShaderNodeBackground#bpy.types.ShaderNodeBackground.output_template"><literal classes="xref py py-class">ShaderNodeBackground.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBevel.input_template" refuri="bpy.types.ShaderNodeBevel#bpy.types.ShaderNodeBevel.input_template"><literal classes="xref py py-class">ShaderNodeBevel.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBevel.output_template" refuri="bpy.types.ShaderNodeBevel#bpy.types.ShaderNodeBevel.output_template"><literal classes="xref py py-class">ShaderNodeBevel.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBlackbody.input_template" refuri="bpy.types.ShaderNodeBlackbody#bpy.types.ShaderNodeBlackbody.input_template"><literal classes="xref py py-class">ShaderNodeBlackbody.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBlackbody.output_template" refuri="bpy.types.ShaderNodeBlackbody#bpy.types.ShaderNodeBlackbody.output_template"><literal classes="xref py py-class">ShaderNodeBlackbody.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBrightContrast.input_template" refuri="bpy.types.ShaderNodeBrightContrast#bpy.types.ShaderNodeBrightContrast.input_template"><literal classes="xref py py-class">ShaderNodeBrightContrast.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBrightContrast.output_template" refuri="bpy.types.ShaderNodeBrightContrast#bpy.types.ShaderNodeBrightContrast.output_template"><literal classes="xref py py-class">ShaderNodeBrightContrast.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfAnisotropic.input_template" refuri="bpy.types.ShaderNodeBsdfAnisotropic#bpy.types.ShaderNodeBsdfAnisotropic.input_template"><literal classes="xref py py-class">ShaderNodeBsdfAnisotropic.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfAnisotropic.output_template" refuri="bpy.types.ShaderNodeBsdfAnisotropic#bpy.types.ShaderNodeBsdfAnisotropic.output_template"><literal classes="xref py py-class">ShaderNodeBsdfAnisotropic.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfDiffuse.input_template" refuri="bpy.types.ShaderNodeBsdfDiffuse#bpy.types.ShaderNodeBsdfDiffuse.input_template"><literal classes="xref py py-class">ShaderNodeBsdfDiffuse.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfDiffuse.output_template" refuri="bpy.types.ShaderNodeBsdfDiffuse#bpy.types.ShaderNodeBsdfDiffuse.output_template"><literal classes="xref py py-class">ShaderNodeBsdfDiffuse.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfGlass.input_template" refuri="bpy.types.ShaderNodeBsdfGlass#bpy.types.ShaderNodeBsdfGlass.input_template"><literal classes="xref py py-class">ShaderNodeBsdfGlass.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfGlass.output_template" refuri="bpy.types.ShaderNodeBsdfGlass#bpy.types.ShaderNodeBsdfGlass.output_template"><literal classes="xref py py-class">ShaderNodeBsdfGlass.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfGlossy.input_template" refuri="bpy.types.ShaderNodeBsdfGlossy#bpy.types.ShaderNodeBsdfGlossy.input_template"><literal classes="xref py py-class">ShaderNodeBsdfGlossy.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfGlossy.output_template" refuri="bpy.types.ShaderNodeBsdfGlossy#bpy.types.ShaderNodeBsdfGlossy.output_template"><literal classes="xref py py-class">ShaderNodeBsdfGlossy.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfHair.input_template" refuri="bpy.types.ShaderNodeBsdfHair#bpy.types.ShaderNodeBsdfHair.input_template"><literal classes="xref py py-class">ShaderNodeBsdfHair.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfHair.output_template" refuri="bpy.types.ShaderNodeBsdfHair#bpy.types.ShaderNodeBsdfHair.output_template"><literal classes="xref py py-class">ShaderNodeBsdfHair.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfHairPrincipled.input_template" refuri="bpy.types.ShaderNodeBsdfHairPrincipled#bpy.types.ShaderNodeBsdfHairPrincipled.input_template"><literal classes="xref py py-class">ShaderNodeBsdfHairPrincipled.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfHairPrincipled.output_template" refuri="bpy.types.ShaderNodeBsdfHairPrincipled#bpy.types.ShaderNodeBsdfHairPrincipled.output_template"><literal classes="xref py py-class">ShaderNodeBsdfHairPrincipled.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfPrincipled.input_template" refuri="bpy.types.ShaderNodeBsdfPrincipled#bpy.types.ShaderNodeBsdfPrincipled.input_template"><literal classes="xref py py-class">ShaderNodeBsdfPrincipled.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfPrincipled.output_template" refuri="bpy.types.ShaderNodeBsdfPrincipled#bpy.types.ShaderNodeBsdfPrincipled.output_template"><literal classes="xref py py-class">ShaderNodeBsdfPrincipled.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfRefraction.input_template" refuri="bpy.types.ShaderNodeBsdfRefraction#bpy.types.ShaderNodeBsdfRefraction.input_template"><literal classes="xref py py-class">ShaderNodeBsdfRefraction.input_template</literal></reference></paragraph>
                    </list_item>
                </bullet_list>
            </hlistcol>
            <hlistcol>
                <bullet_list>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfRefraction.output_template" refuri="bpy.types.ShaderNodeBsdfRefraction#bpy.types.ShaderNodeBsdfRefraction.output_template"><literal classes="xref py py-class">ShaderNodeBsdfRefraction.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfToon.input_template" refuri="bpy.types.ShaderNodeBsdfToon#bpy.types.ShaderNodeBsdfToon.input_template"><literal classes="xref py py-class">ShaderNodeBsdfToon.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfToon.output_template" refuri="bpy.types.ShaderNodeBsdfToon#bpy.types.ShaderNodeBsdfToon.output_template"><literal classes="xref py py-class">ShaderNodeBsdfToon.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfTranslucent.input_template" refuri="bpy.types.ShaderNodeBsdfTranslucent#bpy.types.ShaderNodeBsdfTranslucent.input_template"><literal classes="xref py py-class">ShaderNodeBsdfTranslucent.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfTranslucent.output_template" refuri="bpy.types.ShaderNodeBsdfTranslucent#bpy.types.ShaderNodeBsdfTranslucent.output_template"><literal classes="xref py py-class">ShaderNodeBsdfTranslucent.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfTransparent.input_template" refuri="bpy.types.ShaderNodeBsdfTransparent#bpy.types.ShaderNodeBsdfTransparent.input_template"><literal classes="xref py py-class">ShaderNodeBsdfTransparent.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfTransparent.output_template" refuri="bpy.types.ShaderNodeBsdfTransparent#bpy.types.ShaderNodeBsdfTransparent.output_template"><literal classes="xref py py-class">ShaderNodeBsdfTransparent.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfVelvet.input_template" refuri="bpy.types.ShaderNodeBsdfVelvet#bpy.types.ShaderNodeBsdfVelvet.input_template"><literal classes="xref py py-class">ShaderNodeBsdfVelvet.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBsdfVelvet.output_template" refuri="bpy.types.ShaderNodeBsdfVelvet#bpy.types.ShaderNodeBsdfVelvet.output_template"><literal classes="xref py py-class">ShaderNodeBsdfVelvet.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBump.input_template" refuri="bpy.types.ShaderNodeBump#bpy.types.ShaderNodeBump.input_template"><literal classes="xref py py-class">ShaderNodeBump.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeBump.output_template" refuri="bpy.types.ShaderNodeBump#bpy.types.ShaderNodeBump.output_template"><literal classes="xref py py-class">ShaderNodeBump.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeCameraData.input_template" refuri="bpy.types.ShaderNodeCameraData#bpy.types.ShaderNodeCameraData.input_template"><literal classes="xref py py-class">ShaderNodeCameraData.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeCameraData.output_template" refuri="bpy.types.ShaderNodeCameraData#bpy.types.ShaderNodeCameraData.output_template"><literal classes="xref py py-class">ShaderNodeCameraData.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeCombineHSV.input_template" refuri="bpy.types.ShaderNodeCombineHSV#bpy.types.ShaderNodeCombineHSV.input_template"><literal classes="xref py py-class">ShaderNodeCombineHSV.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeCombineHSV.output_template" refuri="bpy.types.ShaderNodeCombineHSV#bpy.types.ShaderNodeCombineHSV.output_template"><literal classes="xref py py-class">ShaderNodeCombineHSV.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeCombineRGB.input_template" refuri="bpy.types.ShaderNodeCombineRGB#bpy.types.ShaderNodeCombineRGB.input_template"><literal classes="xref py py-class">ShaderNodeCombineRGB.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeCombineRGB.output_template" refuri="bpy.types.ShaderNodeCombineRGB#bpy.types.ShaderNodeCombineRGB.output_template"><literal classes="xref py py-class">ShaderNodeCombineRGB.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeCombineXYZ.input_template" refuri="bpy.types.ShaderNodeCombineXYZ#bpy.types.ShaderNodeCombineXYZ.input_template"><literal classes="xref py py-class">ShaderNodeCombineXYZ.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeCombineXYZ.output_template" refuri="bpy.types.ShaderNodeCombineXYZ#bpy.types.ShaderNodeCombineXYZ.output_template"><literal classes="xref py py-class">ShaderNodeCombineXYZ.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeDisplacement.input_template" refuri="bpy.types.ShaderNodeDisplacement#bpy.types.ShaderNodeDisplacement.input_template"><literal classes="xref py py-class">ShaderNodeDisplacement.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeDisplacement.output_template" refuri="bpy.types.ShaderNodeDisplacement#bpy.types.ShaderNodeDisplacement.output_template"><literal classes="xref py py-class">ShaderNodeDisplacement.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeEeveeSpecular.input_template" refuri="bpy.types.ShaderNodeEeveeSpecular#bpy.types.ShaderNodeEeveeSpecular.input_template"><literal classes="xref py py-class">ShaderNodeEeveeSpecular.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeEeveeSpecular.output_template" refuri="bpy.types.ShaderNodeEeveeSpecular#bpy.types.ShaderNodeEeveeSpecular.output_template"><literal classes="xref py py-class">ShaderNodeEeveeSpecular.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeEmission.input_template" refuri="bpy.types.ShaderNodeEmission#bpy.types.ShaderNodeEmission.input_template"><literal classes="xref py py-class">ShaderNodeEmission.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeEmission.output_template" refuri="bpy.types.ShaderNodeEmission#bpy.types.ShaderNodeEmission.output_template"><literal classes="xref py py-class">ShaderNodeEmission.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeFresnel.input_template" refuri="bpy.types.ShaderNodeFresnel#bpy.types.ShaderNodeFresnel.input_template"><literal classes="xref py py-class">ShaderNodeFresnel.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeFresnel.output_template" refuri="bpy.types.ShaderNodeFresnel#bpy.types.ShaderNodeFresnel.output_template"><literal classes="xref py py-class">ShaderNodeFresnel.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeGamma.input_template" refuri="bpy.types.ShaderNodeGamma#bpy.types.ShaderNodeGamma.input_template"><literal classes="xref py py-class">ShaderNodeGamma.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeGamma.output_template" refuri="bpy.types.ShaderNodeGamma#bpy.types.ShaderNodeGamma.output_template"><literal classes="xref py py-class">ShaderNodeGamma.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeGroup.input_template" refuri="bpy.types.ShaderNodeGroup#bpy.types.ShaderNodeGroup.input_template"><literal classes="xref py py-class">ShaderNodeGroup.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeGroup.output_template" refuri="bpy.types.ShaderNodeGroup#bpy.types.ShaderNodeGroup.output_template"><literal classes="xref py py-class">ShaderNodeGroup.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeHairInfo.input_template" refuri="bpy.types.ShaderNodeHairInfo#bpy.types.ShaderNodeHairInfo.input_template"><literal classes="xref py py-class">ShaderNodeHairInfo.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeHairInfo.output_template" refuri="bpy.types.ShaderNodeHairInfo#bpy.types.ShaderNodeHairInfo.output_template"><literal classes="xref py py-class">ShaderNodeHairInfo.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeHoldout.input_template" refuri="bpy.types.ShaderNodeHoldout#bpy.types.ShaderNodeHoldout.input_template"><literal classes="xref py py-class">ShaderNodeHoldout.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeHoldout.output_template" refuri="bpy.types.ShaderNodeHoldout#bpy.types.ShaderNodeHoldout.output_template"><literal classes="xref py py-class">ShaderNodeHoldout.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeHueSaturation.input_template" refuri="bpy.types.ShaderNodeHueSaturation#bpy.types.ShaderNodeHueSaturation.input_template"><literal classes="xref py py-class">ShaderNodeHueSaturation.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeHueSaturation.output_template" refuri="bpy.types.ShaderNodeHueSaturation#bpy.types.ShaderNodeHueSaturation.output_template"><literal classes="xref py py-class">ShaderNodeHueSaturation.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeInvert.input_template" refuri="bpy.types.ShaderNodeInvert#bpy.types.ShaderNodeInvert.input_template"><literal classes="xref py py-class">ShaderNodeInvert.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeInvert.output_template" refuri="bpy.types.ShaderNodeInvert#bpy.types.ShaderNodeInvert.output_template"><literal classes="xref py py-class">ShaderNodeInvert.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeLayerWeight.input_template" refuri="bpy.types.ShaderNodeLayerWeight#bpy.types.ShaderNodeLayerWeight.input_template"><literal classes="xref py py-class">ShaderNodeLayerWeight.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeLayerWeight.output_template" refuri="bpy.types.ShaderNodeLayerWeight#bpy.types.ShaderNodeLayerWeight.output_template"><literal classes="xref py py-class">ShaderNodeLayerWeight.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeLightFalloff.input_template" refuri="bpy.types.ShaderNodeLightFalloff#bpy.types.ShaderNodeLightFalloff.input_template"><literal classes="xref py py-class">ShaderNodeLightFalloff.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeLightFalloff.output_template" refuri="bpy.types.ShaderNodeLightFalloff#bpy.types.ShaderNodeLightFalloff.output_template"><literal classes="xref py py-class">ShaderNodeLightFalloff.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeLightPath.input_template" refuri="bpy.types.ShaderNodeLightPath#bpy.types.ShaderNodeLightPath.input_template"><literal classes="xref py py-class">ShaderNodeLightPath.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeLightPath.output_template" refuri="bpy.types.ShaderNodeLightPath#bpy.types.ShaderNodeLightPath.output_template"><literal classes="xref py py-class">ShaderNodeLightPath.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeMapping.input_template" refuri="bpy.types.ShaderNodeMapping#bpy.types.ShaderNodeMapping.input_template"><literal classes="xref py py-class">ShaderNodeMapping.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeMapping.output_template" refuri="bpy.types.ShaderNodeMapping#bpy.types.ShaderNodeMapping.output_template"><literal classes="xref py py-class">ShaderNodeMapping.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeMath.input_template" refuri="bpy.types.ShaderNodeMath#bpy.types.ShaderNodeMath.input_template"><literal classes="xref py py-class">ShaderNodeMath.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeMath.output_template" refuri="bpy.types.ShaderNodeMath#bpy.types.ShaderNodeMath.output_template"><literal classes="xref py py-class">ShaderNodeMath.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeMixRGB.input_template" refuri="bpy.types.ShaderNodeMixRGB#bpy.types.ShaderNodeMixRGB.input_template"><literal classes="xref py py-class">ShaderNodeMixRGB.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeMixRGB.output_template" refuri="bpy.types.ShaderNodeMixRGB#bpy.types.ShaderNodeMixRGB.output_template"><literal classes="xref py py-class">ShaderNodeMixRGB.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeMixShader.input_template" refuri="bpy.types.ShaderNodeMixShader#bpy.types.ShaderNodeMixShader.input_template"><literal classes="xref py py-class">ShaderNodeMixShader.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeMixShader.output_template" refuri="bpy.types.ShaderNodeMixShader#bpy.types.ShaderNodeMixShader.output_template"><literal classes="xref py py-class">ShaderNodeMixShader.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeNewGeometry.input_template" refuri="bpy.types.ShaderNodeNewGeometry#bpy.types.ShaderNodeNewGeometry.input_template"><literal classes="xref py py-class">ShaderNodeNewGeometry.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeNewGeometry.output_template" refuri="bpy.types.ShaderNodeNewGeometry#bpy.types.ShaderNodeNewGeometry.output_template"><literal classes="xref py py-class">ShaderNodeNewGeometry.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeNormal.input_template" refuri="bpy.types.ShaderNodeNormal#bpy.types.ShaderNodeNormal.input_template"><literal classes="xref py py-class">ShaderNodeNormal.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeNormal.output_template" refuri="bpy.types.ShaderNodeNormal#bpy.types.ShaderNodeNormal.output_template"><literal classes="xref py py-class">ShaderNodeNormal.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeNormalMap.input_template" refuri="bpy.types.ShaderNodeNormalMap#bpy.types.ShaderNodeNormalMap.input_template"><literal classes="xref py py-class">ShaderNodeNormalMap.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeNormalMap.output_template" refuri="bpy.types.ShaderNodeNormalMap#bpy.types.ShaderNodeNormalMap.output_template"><literal classes="xref py py-class">ShaderNodeNormalMap.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeObjectInfo.input_template" refuri="bpy.types.ShaderNodeObjectInfo#bpy.types.ShaderNodeObjectInfo.input_template"><literal classes="xref py py-class">ShaderNodeObjectInfo.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeObjectInfo.output_template" refuri="bpy.types.ShaderNodeObjectInfo#bpy.types.ShaderNodeObjectInfo.output_template"><literal classes="xref py py-class">ShaderNodeObjectInfo.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeOutputLight.input_template" refuri="bpy.types.ShaderNodeOutputLight#bpy.types.ShaderNodeOutputLight.input_template"><literal classes="xref py py-class">ShaderNodeOutputLight.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeOutputLight.output_template" refuri="bpy.types.ShaderNodeOutputLight#bpy.types.ShaderNodeOutputLight.output_template"><literal classes="xref py py-class">ShaderNodeOutputLight.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeOutputLineStyle.input_template" refuri="bpy.types.ShaderNodeOutputLineStyle#bpy.types.ShaderNodeOutputLineStyle.input_template"><literal classes="xref py py-class">ShaderNodeOutputLineStyle.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeOutputLineStyle.output_template" refuri="bpy.types.ShaderNodeOutputLineStyle#bpy.types.ShaderNodeOutputLineStyle.output_template"><literal classes="xref py py-class">ShaderNodeOutputLineStyle.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeOutputMaterial.input_template" refuri="bpy.types.ShaderNodeOutputMaterial#bpy.types.ShaderNodeOutputMaterial.input_template"><literal classes="xref py py-class">ShaderNodeOutputMaterial.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeOutputMaterial.output_template" refuri="bpy.types.ShaderNodeOutputMaterial#bpy.types.ShaderNodeOutputMaterial.output_template"><literal classes="xref py py-class">ShaderNodeOutputMaterial.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeOutputWorld.input_template" refuri="bpy.types.ShaderNodeOutputWorld#bpy.types.ShaderNodeOutputWorld.input_template"><literal classes="xref py py-class">ShaderNodeOutputWorld.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeOutputWorld.output_template" refuri="bpy.types.ShaderNodeOutputWorld#bpy.types.ShaderNodeOutputWorld.output_template"><literal classes="xref py py-class">ShaderNodeOutputWorld.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeParticleInfo.input_template" refuri="bpy.types.ShaderNodeParticleInfo#bpy.types.ShaderNodeParticleInfo.input_template"><literal classes="xref py py-class">ShaderNodeParticleInfo.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeParticleInfo.output_template" refuri="bpy.types.ShaderNodeParticleInfo#bpy.types.ShaderNodeParticleInfo.output_template"><literal classes="xref py py-class">ShaderNodeParticleInfo.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeRGB.input_template" refuri="bpy.types.ShaderNodeRGB#bpy.types.ShaderNodeRGB.input_template"><literal classes="xref py py-class">ShaderNodeRGB.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeRGB.output_template" refuri="bpy.types.ShaderNodeRGB#bpy.types.ShaderNodeRGB.output_template"><literal classes="xref py py-class">ShaderNodeRGB.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeRGBCurve.input_template" refuri="bpy.types.ShaderNodeRGBCurve#bpy.types.ShaderNodeRGBCurve.input_template"><literal classes="xref py py-class">ShaderNodeRGBCurve.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeRGBCurve.output_template" refuri="bpy.types.ShaderNodeRGBCurve#bpy.types.ShaderNodeRGBCurve.output_template"><literal classes="xref py py-class">ShaderNodeRGBCurve.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeRGBToBW.input_template" refuri="bpy.types.ShaderNodeRGBToBW#bpy.types.ShaderNodeRGBToBW.input_template"><literal classes="xref py py-class">ShaderNodeRGBToBW.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeRGBToBW.output_template" refuri="bpy.types.ShaderNodeRGBToBW#bpy.types.ShaderNodeRGBToBW.output_template"><literal classes="xref py py-class">ShaderNodeRGBToBW.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeScript.input_template" refuri="bpy.types.ShaderNodeScript#bpy.types.ShaderNodeScript.input_template"><literal classes="xref py py-class">ShaderNodeScript.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeScript.output_template" refuri="bpy.types.ShaderNodeScript#bpy.types.ShaderNodeScript.output_template"><literal classes="xref py py-class">ShaderNodeScript.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeSeparateHSV.input_template" refuri="bpy.types.ShaderNodeSeparateHSV#bpy.types.ShaderNodeSeparateHSV.input_template"><literal classes="xref py py-class">ShaderNodeSeparateHSV.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeSeparateHSV.output_template" refuri="bpy.types.ShaderNodeSeparateHSV#bpy.types.ShaderNodeSeparateHSV.output_template"><literal classes="xref py py-class">ShaderNodeSeparateHSV.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeSeparateRGB.input_template" refuri="bpy.types.ShaderNodeSeparateRGB#bpy.types.ShaderNodeSeparateRGB.input_template"><literal classes="xref py py-class">ShaderNodeSeparateRGB.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeSeparateRGB.output_template" refuri="bpy.types.ShaderNodeSeparateRGB#bpy.types.ShaderNodeSeparateRGB.output_template"><literal classes="xref py py-class">ShaderNodeSeparateRGB.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeSeparateXYZ.input_template" refuri="bpy.types.ShaderNodeSeparateXYZ#bpy.types.ShaderNodeSeparateXYZ.input_template"><literal classes="xref py py-class">ShaderNodeSeparateXYZ.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeSeparateXYZ.output_template" refuri="bpy.types.ShaderNodeSeparateXYZ#bpy.types.ShaderNodeSeparateXYZ.output_template"><literal classes="xref py py-class">ShaderNodeSeparateXYZ.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeShaderToRGB.input_template" refuri="bpy.types.ShaderNodeShaderToRGB#bpy.types.ShaderNodeShaderToRGB.input_template"><literal classes="xref py py-class">ShaderNodeShaderToRGB.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeShaderToRGB.output_template" refuri="bpy.types.ShaderNodeShaderToRGB#bpy.types.ShaderNodeShaderToRGB.output_template"><literal classes="xref py py-class">ShaderNodeShaderToRGB.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeSqueeze.input_template" refuri="bpy.types.ShaderNodeSqueeze#bpy.types.ShaderNodeSqueeze.input_template"><literal classes="xref py py-class">ShaderNodeSqueeze.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeSqueeze.output_template" refuri="bpy.types.ShaderNodeSqueeze#bpy.types.ShaderNodeSqueeze.output_template"><literal classes="xref py py-class">ShaderNodeSqueeze.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeSubsurfaceScattering.input_template" refuri="bpy.types.ShaderNodeSubsurfaceScattering#bpy.types.ShaderNodeSubsurfaceScattering.input_template"><literal classes="xref py py-class">ShaderNodeSubsurfaceScattering.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeSubsurfaceScattering.output_template" refuri="bpy.types.ShaderNodeSubsurfaceScattering#bpy.types.ShaderNodeSubsurfaceScattering.output_template"><literal classes="xref py py-class">ShaderNodeSubsurfaceScattering.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTangent.input_template" refuri="bpy.types.ShaderNodeTangent#bpy.types.ShaderNodeTangent.input_template"><literal classes="xref py py-class">ShaderNodeTangent.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTangent.output_template" refuri="bpy.types.ShaderNodeTangent#bpy.types.ShaderNodeTangent.output_template"><literal classes="xref py py-class">ShaderNodeTangent.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexBrick.input_template" refuri="bpy.types.ShaderNodeTexBrick#bpy.types.ShaderNodeTexBrick.input_template"><literal classes="xref py py-class">ShaderNodeTexBrick.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexBrick.output_template" refuri="bpy.types.ShaderNodeTexBrick#bpy.types.ShaderNodeTexBrick.output_template"><literal classes="xref py py-class">ShaderNodeTexBrick.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexChecker.input_template" refuri="bpy.types.ShaderNodeTexChecker#bpy.types.ShaderNodeTexChecker.input_template"><literal classes="xref py py-class">ShaderNodeTexChecker.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexChecker.output_template" refuri="bpy.types.ShaderNodeTexChecker#bpy.types.ShaderNodeTexChecker.output_template"><literal classes="xref py py-class">ShaderNodeTexChecker.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexCoord.input_template" refuri="bpy.types.ShaderNodeTexCoord#bpy.types.ShaderNodeTexCoord.input_template"><literal classes="xref py py-class">ShaderNodeTexCoord.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexCoord.output_template" refuri="bpy.types.ShaderNodeTexCoord#bpy.types.ShaderNodeTexCoord.output_template"><literal classes="xref py py-class">ShaderNodeTexCoord.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexEnvironment.input_template" refuri="bpy.types.ShaderNodeTexEnvironment#bpy.types.ShaderNodeTexEnvironment.input_template"><literal classes="xref py py-class">ShaderNodeTexEnvironment.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexEnvironment.output_template" refuri="bpy.types.ShaderNodeTexEnvironment#bpy.types.ShaderNodeTexEnvironment.output_template"><literal classes="xref py py-class">ShaderNodeTexEnvironment.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexGradient.input_template" refuri="bpy.types.ShaderNodeTexGradient#bpy.types.ShaderNodeTexGradient.input_template"><literal classes="xref py py-class">ShaderNodeTexGradient.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexGradient.output_template" refuri="bpy.types.ShaderNodeTexGradient#bpy.types.ShaderNodeTexGradient.output_template"><literal classes="xref py py-class">ShaderNodeTexGradient.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexIES.input_template" refuri="bpy.types.ShaderNodeTexIES#bpy.types.ShaderNodeTexIES.input_template"><literal classes="xref py py-class">ShaderNodeTexIES.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexIES.output_template" refuri="bpy.types.ShaderNodeTexIES#bpy.types.ShaderNodeTexIES.output_template"><literal classes="xref py py-class">ShaderNodeTexIES.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexImage.input_template" refuri="bpy.types.ShaderNodeTexImage#bpy.types.ShaderNodeTexImage.input_template"><literal classes="xref py py-class">ShaderNodeTexImage.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexImage.output_template" refuri="bpy.types.ShaderNodeTexImage#bpy.types.ShaderNodeTexImage.output_template"><literal classes="xref py py-class">ShaderNodeTexImage.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexMagic.input_template" refuri="bpy.types.ShaderNodeTexMagic#bpy.types.ShaderNodeTexMagic.input_template"><literal classes="xref py py-class">ShaderNodeTexMagic.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexMagic.output_template" refuri="bpy.types.ShaderNodeTexMagic#bpy.types.ShaderNodeTexMagic.output_template"><literal classes="xref py py-class">ShaderNodeTexMagic.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexMusgrave.input_template" refuri="bpy.types.ShaderNodeTexMusgrave#bpy.types.ShaderNodeTexMusgrave.input_template"><literal classes="xref py py-class">ShaderNodeTexMusgrave.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexMusgrave.output_template" refuri="bpy.types.ShaderNodeTexMusgrave#bpy.types.ShaderNodeTexMusgrave.output_template"><literal classes="xref py py-class">ShaderNodeTexMusgrave.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexNoise.input_template" refuri="bpy.types.ShaderNodeTexNoise#bpy.types.ShaderNodeTexNoise.input_template"><literal classes="xref py py-class">ShaderNodeTexNoise.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexNoise.output_template" refuri="bpy.types.ShaderNodeTexNoise#bpy.types.ShaderNodeTexNoise.output_template"><literal classes="xref py py-class">ShaderNodeTexNoise.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexPointDensity.input_template" refuri="bpy.types.ShaderNodeTexPointDensity#bpy.types.ShaderNodeTexPointDensity.input_template"><literal classes="xref py py-class">ShaderNodeTexPointDensity.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexPointDensity.output_template" refuri="bpy.types.ShaderNodeTexPointDensity#bpy.types.ShaderNodeTexPointDensity.output_template"><literal classes="xref py py-class">ShaderNodeTexPointDensity.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexSky.input_template" refuri="bpy.types.ShaderNodeTexSky#bpy.types.ShaderNodeTexSky.input_template"><literal classes="xref py py-class">ShaderNodeTexSky.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexSky.output_template" refuri="bpy.types.ShaderNodeTexSky#bpy.types.ShaderNodeTexSky.output_template"><literal classes="xref py py-class">ShaderNodeTexSky.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexVoronoi.input_template" refuri="bpy.types.ShaderNodeTexVoronoi#bpy.types.ShaderNodeTexVoronoi.input_template"><literal classes="xref py py-class">ShaderNodeTexVoronoi.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexVoronoi.output_template" refuri="bpy.types.ShaderNodeTexVoronoi#bpy.types.ShaderNodeTexVoronoi.output_template"><literal classes="xref py py-class">ShaderNodeTexVoronoi.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexWave.input_template" refuri="bpy.types.ShaderNodeTexWave#bpy.types.ShaderNodeTexWave.input_template"><literal classes="xref py py-class">ShaderNodeTexWave.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeTexWave.output_template" refuri="bpy.types.ShaderNodeTexWave#bpy.types.ShaderNodeTexWave.output_template"><literal classes="xref py py-class">ShaderNodeTexWave.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeUVAlongStroke.input_template" refuri="bpy.types.ShaderNodeUVAlongStroke#bpy.types.ShaderNodeUVAlongStroke.input_template"><literal classes="xref py py-class">ShaderNodeUVAlongStroke.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeUVAlongStroke.output_template" refuri="bpy.types.ShaderNodeUVAlongStroke#bpy.types.ShaderNodeUVAlongStroke.output_template"><literal classes="xref py py-class">ShaderNodeUVAlongStroke.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeUVMap.input_template" refuri="bpy.types.ShaderNodeUVMap#bpy.types.ShaderNodeUVMap.input_template"><literal classes="xref py py-class">ShaderNodeUVMap.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeUVMap.output_template" refuri="bpy.types.ShaderNodeUVMap#bpy.types.ShaderNodeUVMap.output_template"><literal classes="xref py py-class">ShaderNodeUVMap.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeValToRGB.input_template" refuri="bpy.types.ShaderNodeValToRGB#bpy.types.ShaderNodeValToRGB.input_template"><literal classes="xref py py-class">ShaderNodeValToRGB.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeValToRGB.output_template" refuri="bpy.types.ShaderNodeValToRGB#bpy.types.ShaderNodeValToRGB.output_template"><literal classes="xref py py-class">ShaderNodeValToRGB.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeValue.input_template" refuri="bpy.types.ShaderNodeValue#bpy.types.ShaderNodeValue.input_template"><literal classes="xref py py-class">ShaderNodeValue.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeValue.output_template" refuri="bpy.types.ShaderNodeValue#bpy.types.ShaderNodeValue.output_template"><literal classes="xref py py-class">ShaderNodeValue.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeVectorCurve.input_template" refuri="bpy.types.ShaderNodeVectorCurve#bpy.types.ShaderNodeVectorCurve.input_template"><literal classes="xref py py-class">ShaderNodeVectorCurve.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeVectorCurve.output_template" refuri="bpy.types.ShaderNodeVectorCurve#bpy.types.ShaderNodeVectorCurve.output_template"><literal classes="xref py py-class">ShaderNodeVectorCurve.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeVectorDisplacement.input_template" refuri="bpy.types.ShaderNodeVectorDisplacement#bpy.types.ShaderNodeVectorDisplacement.input_template"><literal classes="xref py py-class">ShaderNodeVectorDisplacement.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeVectorDisplacement.output_template" refuri="bpy.types.ShaderNodeVectorDisplacement#bpy.types.ShaderNodeVectorDisplacement.output_template"><literal classes="xref py py-class">ShaderNodeVectorDisplacement.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeVectorMath.input_template" refuri="bpy.types.ShaderNodeVectorMath#bpy.types.ShaderNodeVectorMath.input_template"><literal classes="xref py py-class">ShaderNodeVectorMath.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeVectorMath.output_template" refuri="bpy.types.ShaderNodeVectorMath#bpy.types.ShaderNodeVectorMath.output_template"><literal classes="xref py py-class">ShaderNodeVectorMath.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeVectorTransform.input_template" refuri="bpy.types.ShaderNodeVectorTransform#bpy.types.ShaderNodeVectorTransform.input_template"><literal classes="xref py py-class">ShaderNodeVectorTransform.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeVectorTransform.output_template" refuri="bpy.types.ShaderNodeVectorTransform#bpy.types.ShaderNodeVectorTransform.output_template"><literal classes="xref py py-class">ShaderNodeVectorTransform.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeVolumeAbsorption.input_template" refuri="bpy.types.ShaderNodeVolumeAbsorption#bpy.types.ShaderNodeVolumeAbsorption.input_template"><literal classes="xref py py-class">ShaderNodeVolumeAbsorption.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeVolumeAbsorption.output_template" refuri="bpy.types.ShaderNodeVolumeAbsorption#bpy.types.ShaderNodeVolumeAbsorption.output_template"><literal classes="xref py py-class">ShaderNodeVolumeAbsorption.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeVolumePrincipled.input_template" refuri="bpy.types.ShaderNodeVolumePrincipled#bpy.types.ShaderNodeVolumePrincipled.input_template"><literal classes="xref py py-class">ShaderNodeVolumePrincipled.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeVolumePrincipled.output_template" refuri="bpy.types.ShaderNodeVolumePrincipled#bpy.types.ShaderNodeVolumePrincipled.output_template"><literal classes="xref py py-class">ShaderNodeVolumePrincipled.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeVolumeScatter.input_template" refuri="bpy.types.ShaderNodeVolumeScatter#bpy.types.ShaderNodeVolumeScatter.input_template"><literal classes="xref py py-class">ShaderNodeVolumeScatter.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeVolumeScatter.output_template" refuri="bpy.types.ShaderNodeVolumeScatter#bpy.types.ShaderNodeVolumeScatter.output_template"><literal classes="xref py py-class">ShaderNodeVolumeScatter.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeWavelength.input_template" refuri="bpy.types.ShaderNodeWavelength#bpy.types.ShaderNodeWavelength.input_template"><literal classes="xref py py-class">ShaderNodeWavelength.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeWavelength.output_template" refuri="bpy.types.ShaderNodeWavelength#bpy.types.ShaderNodeWavelength.output_template"><literal classes="xref py py-class">ShaderNodeWavelength.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeWireframe.input_template" refuri="bpy.types.ShaderNodeWireframe#bpy.types.ShaderNodeWireframe.input_template"><literal classes="xref py py-class">ShaderNodeWireframe.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ShaderNodeWireframe.output_template" refuri="bpy.types.ShaderNodeWireframe#bpy.types.ShaderNodeWireframe.output_template"><literal classes="xref py py-class">ShaderNodeWireframe.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeAt.input_template" refuri="bpy.types.TextureNodeAt#bpy.types.TextureNodeAt.input_template"><literal classes="xref py py-class">TextureNodeAt.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeAt.output_template" refuri="bpy.types.TextureNodeAt#bpy.types.TextureNodeAt.output_template"><literal classes="xref py py-class">TextureNodeAt.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeBricks.input_template" refuri="bpy.types.TextureNodeBricks#bpy.types.TextureNodeBricks.input_template"><literal classes="xref py py-class">TextureNodeBricks.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeBricks.output_template" refuri="bpy.types.TextureNodeBricks#bpy.types.TextureNodeBricks.output_template"><literal classes="xref py py-class">TextureNodeBricks.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeChecker.input_template" refuri="bpy.types.TextureNodeChecker#bpy.types.TextureNodeChecker.input_template"><literal classes="xref py py-class">TextureNodeChecker.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeChecker.output_template" refuri="bpy.types.TextureNodeChecker#bpy.types.TextureNodeChecker.output_template"><literal classes="xref py py-class">TextureNodeChecker.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeCompose.input_template" refuri="bpy.types.TextureNodeCompose#bpy.types.TextureNodeCompose.input_template"><literal classes="xref py py-class">TextureNodeCompose.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeCompose.output_template" refuri="bpy.types.TextureNodeCompose#bpy.types.TextureNodeCompose.output_template"><literal classes="xref py py-class">TextureNodeCompose.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeCoordinates.input_template" refuri="bpy.types.TextureNodeCoordinates#bpy.types.TextureNodeCoordinates.input_template"><literal classes="xref py py-class">TextureNodeCoordinates.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeCoordinates.output_template" refuri="bpy.types.TextureNodeCoordinates#bpy.types.TextureNodeCoordinates.output_template"><literal classes="xref py py-class">TextureNodeCoordinates.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeCurveRGB.input_template" refuri="bpy.types.TextureNodeCurveRGB#bpy.types.TextureNodeCurveRGB.input_template"><literal classes="xref py py-class">TextureNodeCurveRGB.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeCurveRGB.output_template" refuri="bpy.types.TextureNodeCurveRGB#bpy.types.TextureNodeCurveRGB.output_template"><literal classes="xref py py-class">TextureNodeCurveRGB.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeCurveTime.input_template" refuri="bpy.types.TextureNodeCurveTime#bpy.types.TextureNodeCurveTime.input_template"><literal classes="xref py py-class">TextureNodeCurveTime.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeCurveTime.output_template" refuri="bpy.types.TextureNodeCurveTime#bpy.types.TextureNodeCurveTime.output_template"><literal classes="xref py py-class">TextureNodeCurveTime.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeDecompose.input_template" refuri="bpy.types.TextureNodeDecompose#bpy.types.TextureNodeDecompose.input_template"><literal classes="xref py py-class">TextureNodeDecompose.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeDecompose.output_template" refuri="bpy.types.TextureNodeDecompose#bpy.types.TextureNodeDecompose.output_template"><literal classes="xref py py-class">TextureNodeDecompose.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeDistance.input_template" refuri="bpy.types.TextureNodeDistance#bpy.types.TextureNodeDistance.input_template"><literal classes="xref py py-class">TextureNodeDistance.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeDistance.output_template" refuri="bpy.types.TextureNodeDistance#bpy.types.TextureNodeDistance.output_template"><literal classes="xref py py-class">TextureNodeDistance.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeGroup.input_template" refuri="bpy.types.TextureNodeGroup#bpy.types.TextureNodeGroup.input_template"><literal classes="xref py py-class">TextureNodeGroup.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeGroup.output_template" refuri="bpy.types.TextureNodeGroup#bpy.types.TextureNodeGroup.output_template"><literal classes="xref py py-class">TextureNodeGroup.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeHueSaturation.input_template" refuri="bpy.types.TextureNodeHueSaturation#bpy.types.TextureNodeHueSaturation.input_template"><literal classes="xref py py-class">TextureNodeHueSaturation.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeHueSaturation.output_template" refuri="bpy.types.TextureNodeHueSaturation#bpy.types.TextureNodeHueSaturation.output_template"><literal classes="xref py py-class">TextureNodeHueSaturation.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeImage.input_template" refuri="bpy.types.TextureNodeImage#bpy.types.TextureNodeImage.input_template"><literal classes="xref py py-class">TextureNodeImage.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeImage.output_template" refuri="bpy.types.TextureNodeImage#bpy.types.TextureNodeImage.output_template"><literal classes="xref py py-class">TextureNodeImage.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeInvert.input_template" refuri="bpy.types.TextureNodeInvert#bpy.types.TextureNodeInvert.input_template"><literal classes="xref py py-class">TextureNodeInvert.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeInvert.output_template" refuri="bpy.types.TextureNodeInvert#bpy.types.TextureNodeInvert.output_template"><literal classes="xref py py-class">TextureNodeInvert.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeMath.input_template" refuri="bpy.types.TextureNodeMath#bpy.types.TextureNodeMath.input_template"><literal classes="xref py py-class">TextureNodeMath.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeMath.output_template" refuri="bpy.types.TextureNodeMath#bpy.types.TextureNodeMath.output_template"><literal classes="xref py py-class">TextureNodeMath.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeMixRGB.input_template" refuri="bpy.types.TextureNodeMixRGB#bpy.types.TextureNodeMixRGB.input_template"><literal classes="xref py py-class">TextureNodeMixRGB.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeMixRGB.output_template" refuri="bpy.types.TextureNodeMixRGB#bpy.types.TextureNodeMixRGB.output_template"><literal classes="xref py py-class">TextureNodeMixRGB.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeOutput.input_template" refuri="bpy.types.TextureNodeOutput#bpy.types.TextureNodeOutput.input_template"><literal classes="xref py py-class">TextureNodeOutput.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeOutput.output_template" refuri="bpy.types.TextureNodeOutput#bpy.types.TextureNodeOutput.output_template"><literal classes="xref py py-class">TextureNodeOutput.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeRGBToBW.input_template" refuri="bpy.types.TextureNodeRGBToBW#bpy.types.TextureNodeRGBToBW.input_template"><literal classes="xref py py-class">TextureNodeRGBToBW.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeRGBToBW.output_template" refuri="bpy.types.TextureNodeRGBToBW#bpy.types.TextureNodeRGBToBW.output_template"><literal classes="xref py py-class">TextureNodeRGBToBW.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeRotate.input_template" refuri="bpy.types.TextureNodeRotate#bpy.types.TextureNodeRotate.input_template"><literal classes="xref py py-class">TextureNodeRotate.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeRotate.output_template" refuri="bpy.types.TextureNodeRotate#bpy.types.TextureNodeRotate.output_template"><literal classes="xref py py-class">TextureNodeRotate.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeScale.input_template" refuri="bpy.types.TextureNodeScale#bpy.types.TextureNodeScale.input_template"><literal classes="xref py py-class">TextureNodeScale.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeScale.output_template" refuri="bpy.types.TextureNodeScale#bpy.types.TextureNodeScale.output_template"><literal classes="xref py py-class">TextureNodeScale.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexBlend.input_template" refuri="bpy.types.TextureNodeTexBlend#bpy.types.TextureNodeTexBlend.input_template"><literal classes="xref py py-class">TextureNodeTexBlend.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexBlend.output_template" refuri="bpy.types.TextureNodeTexBlend#bpy.types.TextureNodeTexBlend.output_template"><literal classes="xref py py-class">TextureNodeTexBlend.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexClouds.input_template" refuri="bpy.types.TextureNodeTexClouds#bpy.types.TextureNodeTexClouds.input_template"><literal classes="xref py py-class">TextureNodeTexClouds.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexClouds.output_template" refuri="bpy.types.TextureNodeTexClouds#bpy.types.TextureNodeTexClouds.output_template"><literal classes="xref py py-class">TextureNodeTexClouds.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexDistNoise.input_template" refuri="bpy.types.TextureNodeTexDistNoise#bpy.types.TextureNodeTexDistNoise.input_template"><literal classes="xref py py-class">TextureNodeTexDistNoise.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexDistNoise.output_template" refuri="bpy.types.TextureNodeTexDistNoise#bpy.types.TextureNodeTexDistNoise.output_template"><literal classes="xref py py-class">TextureNodeTexDistNoise.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexMagic.input_template" refuri="bpy.types.TextureNodeTexMagic#bpy.types.TextureNodeTexMagic.input_template"><literal classes="xref py py-class">TextureNodeTexMagic.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexMagic.output_template" refuri="bpy.types.TextureNodeTexMagic#bpy.types.TextureNodeTexMagic.output_template"><literal classes="xref py py-class">TextureNodeTexMagic.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexMarble.input_template" refuri="bpy.types.TextureNodeTexMarble#bpy.types.TextureNodeTexMarble.input_template"><literal classes="xref py py-class">TextureNodeTexMarble.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexMarble.output_template" refuri="bpy.types.TextureNodeTexMarble#bpy.types.TextureNodeTexMarble.output_template"><literal classes="xref py py-class">TextureNodeTexMarble.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexMusgrave.input_template" refuri="bpy.types.TextureNodeTexMusgrave#bpy.types.TextureNodeTexMusgrave.input_template"><literal classes="xref py py-class">TextureNodeTexMusgrave.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexMusgrave.output_template" refuri="bpy.types.TextureNodeTexMusgrave#bpy.types.TextureNodeTexMusgrave.output_template"><literal classes="xref py py-class">TextureNodeTexMusgrave.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexNoise.input_template" refuri="bpy.types.TextureNodeTexNoise#bpy.types.TextureNodeTexNoise.input_template"><literal classes="xref py py-class">TextureNodeTexNoise.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexNoise.output_template" refuri="bpy.types.TextureNodeTexNoise#bpy.types.TextureNodeTexNoise.output_template"><literal classes="xref py py-class">TextureNodeTexNoise.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexStucci.input_template" refuri="bpy.types.TextureNodeTexStucci#bpy.types.TextureNodeTexStucci.input_template"><literal classes="xref py py-class">TextureNodeTexStucci.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexStucci.output_template" refuri="bpy.types.TextureNodeTexStucci#bpy.types.TextureNodeTexStucci.output_template"><literal classes="xref py py-class">TextureNodeTexStucci.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexVoronoi.input_template" refuri="bpy.types.TextureNodeTexVoronoi#bpy.types.TextureNodeTexVoronoi.input_template"><literal classes="xref py py-class">TextureNodeTexVoronoi.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexVoronoi.output_template" refuri="bpy.types.TextureNodeTexVoronoi#bpy.types.TextureNodeTexVoronoi.output_template"><literal classes="xref py py-class">TextureNodeTexVoronoi.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexWood.input_template" refuri="bpy.types.TextureNodeTexWood#bpy.types.TextureNodeTexWood.input_template"><literal classes="xref py py-class">TextureNodeTexWood.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexWood.output_template" refuri="bpy.types.TextureNodeTexWood#bpy.types.TextureNodeTexWood.output_template"><literal classes="xref py py-class">TextureNodeTexWood.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexture.input_template" refuri="bpy.types.TextureNodeTexture#bpy.types.TextureNodeTexture.input_template"><literal classes="xref py py-class">TextureNodeTexture.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTexture.output_template" refuri="bpy.types.TextureNodeTexture#bpy.types.TextureNodeTexture.output_template"><literal classes="xref py py-class">TextureNodeTexture.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTranslate.input_template" refuri="bpy.types.TextureNodeTranslate#bpy.types.TextureNodeTranslate.input_template"><literal classes="xref py py-class">TextureNodeTranslate.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeTranslate.output_template" refuri="bpy.types.TextureNodeTranslate#bpy.types.TextureNodeTranslate.output_template"><literal classes="xref py py-class">TextureNodeTranslate.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeValToNor.input_template" refuri="bpy.types.TextureNodeValToNor#bpy.types.TextureNodeValToNor.input_template"><literal classes="xref py py-class">TextureNodeValToNor.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeValToNor.output_template" refuri="bpy.types.TextureNodeValToNor#bpy.types.TextureNodeValToNor.output_template"><literal classes="xref py py-class">TextureNodeValToNor.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeValToRGB.input_template" refuri="bpy.types.TextureNodeValToRGB#bpy.types.TextureNodeValToRGB.input_template"><literal classes="xref py py-class">TextureNodeValToRGB.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeValToRGB.output_template" refuri="bpy.types.TextureNodeValToRGB#bpy.types.TextureNodeValToRGB.output_template"><literal classes="xref py py-class">TextureNodeValToRGB.output_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeViewer.input_template" refuri="bpy.types.TextureNodeViewer#bpy.types.TextureNodeViewer.input_template"><literal classes="xref py py-class">TextureNodeViewer.input_template</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.TextureNodeViewer.output_template" refuri="bpy.types.TextureNodeViewer#bpy.types.TextureNodeViewer.output_template"><literal classes="xref py py-class">TextureNodeViewer.output_template</literal></reference></paragraph>
                    </list_item>
                </bullet_list>
            </hlistcol>
        </hlist>
    </section>
</document>
