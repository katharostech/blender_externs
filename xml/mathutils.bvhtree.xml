<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/mathutils.bvhtree.rst">
    <section ids="module-mathutils.bvhtree bvhtree-utilities-mathutils-bvhtree" names="bvhtree\ utilities\ (mathutils.bvhtree)">
        <title>BVHTree Utilities (mathutils.bvhtree)</title>
        <index entries="['single',\ u'mathutils.bvhtree\ (module)',\ u'module-mathutils.bvhtree',\ '',\ None]"></index>
        <paragraph>BVH tree structures for proximity searches and ray casts on geometry.</paragraph>
        <index entries="['single',\ u'BVHTree\ (class\ in\ mathutils.bvhtree)',\ u'mathutils.bvhtree.BVHTree',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="BVHTree" ids="mathutils.bvhtree.BVHTree" module="mathutils.bvhtree" names="mathutils.bvhtree.BVHTree"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">mathutils.bvhtree.</desc_addname><desc_name xml:space="preserve">BVHTree</desc_name></desc_signature>
            <desc_content>
                <index entries="['single',\ u'FromBMesh()\ (mathutils.bvhtree.BVHTree\ class\ method)',\ u'mathutils.bvhtree.BVHTree.FromBMesh',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="BVHTree" first="False" fullname="BVHTree.FromBMesh" ids="mathutils.bvhtree.BVHTree.FromBMesh" module="mathutils.bvhtree" names="mathutils.bvhtree.BVHTree.FromBMesh"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">FromBMesh</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bmesh</desc_parameter><desc_parameter xml:space="preserve">epsilon=0.0</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>BVH tree based on <literal classes="xref py py-class">BMesh</literal> data.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">bmesh</literal_strong> (<literal classes="xref py py-class">BMesh</literal>) – BMesh data.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">epsilon</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Increase the threshold for detecting overlap and raycast hits.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'FromObject()\ (mathutils.bvhtree.BVHTree\ class\ method)',\ u'mathutils.bvhtree.BVHTree.FromObject',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="BVHTree" first="False" fullname="BVHTree.FromObject" ids="mathutils.bvhtree.BVHTree.FromObject" module="mathutils.bvhtree" names="mathutils.bvhtree.BVHTree.FromObject"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">FromObject</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">object</desc_parameter><desc_parameter xml:space="preserve">scene</desc_parameter><desc_parameter xml:space="preserve">deform=True</desc_parameter><desc_parameter xml:space="preserve">render=False</desc_parameter><desc_parameter xml:space="preserve">cage=False</desc_parameter><desc_parameter xml:space="preserve">epsilon=0.0</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>BVH tree based on <literal classes="xref py py-class">Object</literal> data.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">object</literal_strong> (<literal classes="xref py py-class">Object</literal>) – Object data.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">scene</literal_strong> (<literal classes="xref py py-class">Scene</literal>) – Scene data to use for evaluating the mesh.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">deform</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Use mesh with deformations.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">render</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Use render settings.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">cage</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Use render settings.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">epsilon</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Increase the threshold for detecting overlap and raycast hits.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'FromPolygons()\ (mathutils.bvhtree.BVHTree\ class\ method)',\ u'mathutils.bvhtree.BVHTree.FromPolygons',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="BVHTree" first="False" fullname="BVHTree.FromPolygons" ids="mathutils.bvhtree.BVHTree.FromPolygons" module="mathutils.bvhtree" names="mathutils.bvhtree.BVHTree.FromPolygons"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">FromPolygons</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">vertices</desc_parameter><desc_parameter xml:space="preserve">polygons</desc_parameter><desc_parameter xml:space="preserve">all_triangles=False</desc_parameter><desc_parameter xml:space="preserve">epsilon=0.0</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>BVH tree constructed geometry passed in as arguments.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">vertices</literal_strong> (<literal_emphasis>float triplet sequence</literal_emphasis>) – float triplets each representing <literal>(x, y, z)</literal></paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">polygons</literal_strong> (<literal_emphasis>Sequence of sequences containing ints</literal_emphasis>) – Sequence of polyugons, each containing indices to the vertices argument.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">all_triangles</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Use when all <strong>polygons</strong> are triangles for more efficient conversion.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">epsilon</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Increase the threshold for detecting overlap and raycast hits.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'find_nearest()\ (mathutils.bvhtree.BVHTree\ method)',\ u'mathutils.bvhtree.BVHTree.find_nearest',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BVHTree" first="False" fullname="BVHTree.find_nearest" ids="mathutils.bvhtree.BVHTree.find_nearest" module="mathutils.bvhtree" names="mathutils.bvhtree.BVHTree.find_nearest"><desc_name xml:space="preserve">find_nearest</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">origin</desc_parameter><desc_parameter xml:space="preserve">distance=1.84467e+19</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Find the nearest element (typically face index) to a point.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">co</literal_strong> (<literal classes="xref py py-class">Vector</literal>) – Find nearest element to this point.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">distance</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Maximum distance threshold.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>Returns a tuple
                                        (<literal classes="xref py py-class">Vector</literal> location, <literal classes="xref py py-class">Vector</literal> normal, int index, float distance),
                                        Values will all be None if no hit is found.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><literal classes="xref py py-class">tuple</literal></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'find_nearest_range()\ (mathutils.bvhtree.BVHTree\ method)',\ u'mathutils.bvhtree.BVHTree.find_nearest_range',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BVHTree" first="False" fullname="BVHTree.find_nearest_range" ids="mathutils.bvhtree.BVHTree.find_nearest_range" module="mathutils.bvhtree" names="mathutils.bvhtree.BVHTree.find_nearest_range"><desc_name xml:space="preserve">find_nearest_range</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">origin</desc_parameter><desc_parameter xml:space="preserve">distance=1.84467e+19</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Find the nearest elements (typically face index) to a point in the distance range.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">co</literal_strong> (<literal classes="xref py py-class">Vector</literal>) – Find nearest elements to this point.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">distance</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Maximum distance threshold.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>Returns a list of tuples
                                        (<literal classes="xref py py-class">Vector</literal> location, <literal classes="xref py py-class">Vector</literal> normal, int index, float distance),</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><literal classes="xref py py-class">list</literal></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'overlap()\ (mathutils.bvhtree.BVHTree\ method)',\ u'mathutils.bvhtree.BVHTree.overlap',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BVHTree" first="False" fullname="BVHTree.overlap" ids="mathutils.bvhtree.BVHTree.overlap" module="mathutils.bvhtree" names="mathutils.bvhtree.BVHTree.overlap"><desc_name xml:space="preserve">overlap</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">other_tree</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Find overlapping indices between 2 trees.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">other_tree</literal_strong> (<reference internal="True" refid="mathutils.bvhtree.BVHTree" reftitle="mathutils.bvhtree.BVHTree"><literal classes="xref py py-class">BVHTree</literal></reference>) – Other tree to perform overlap test on.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>Returns a list of unique index pairs,      the first index referencing this tree, the second referencing the <strong>other_tree</strong>.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><literal classes="xref py py-class">list</literal></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'ray_cast()\ (mathutils.bvhtree.BVHTree\ method)',\ u'mathutils.bvhtree.BVHTree.ray_cast',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BVHTree" first="False" fullname="BVHTree.ray_cast" ids="mathutils.bvhtree.BVHTree.ray_cast" module="mathutils.bvhtree" names="mathutils.bvhtree.BVHTree.ray_cast"><desc_name xml:space="preserve">ray_cast</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">origin</desc_parameter><desc_parameter xml:space="preserve">direction</desc_parameter><desc_parameter xml:space="preserve">distance=sys.float_info.max</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Cast a ray onto the mesh.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">co</literal_strong> (<literal classes="xref py py-class">Vector</literal>) – Start location of the ray in object space.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">direction</literal_strong> (<literal classes="xref py py-class">Vector</literal>) – Direction of the ray in object space.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">distance</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Maximum distance threshold.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>Returns a tuple
                                        (<literal classes="xref py py-class">Vector</literal> location, <literal classes="xref py py-class">Vector</literal> normal, int index, float distance),
                                        Values will all be None if no hit is found.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><literal classes="xref py py-class">tuple</literal></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
    </section>
</document>
