<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/bgl.rst">
    <section ids="module-bgl opengl-wrapper-bgl" names="opengl\ wrapper\ (bgl)">
        <title>OpenGL Wrapper (bgl)</title>
        <index entries="['single',\ u'bgl\ (module)',\ u'module-bgl',\ '',\ None]"></index>
        <paragraph>This module wraps OpenGL constants and functions, making them available from
            within Blender Python.</paragraph>
        <paragraph>The complete list can be retrieved from the module itself, by listing its
            contents: dir(bgl).  A simple search on the web can point to more
            than enough material to teach OpenGL programming, from books to many
            collections of tutorials.</paragraph>
        <paragraph>Here is a comprehensive <reference name="list of books" refuri="https://www.khronos.org/developers/books/">list of books</reference> (non free).
            The <reference name="arcsynthesis tutorials" refuri="https://web.archive.org/web/20150225192611/http://www.arcsynthesis.org/gltut/index.html">arcsynthesis tutorials</reference>
            is one of the best resources to learn modern OpenGL and
            <reference name="g-truc" refuri="http://www.g-truc.net/post-opengl-samples.html#menu">g-truc</reference>
            offers a set of extensive examples, including advanced features.</paragraph>
        <note>
            <paragraph>You can use the <literal classes="xref py py-class">Image</literal> type to load and set textures.
                See <literal classes="xref py py-class">Image.gl_load</literal> and <literal classes="xref py py-class">Image.gl_load</literal>,
                for example.</paragraph>
        </note>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glAccum(op, value):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Operate on the accumulation buffer.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glAccum.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">op</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – The accumulation buffer operation.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">value</literal_strong> (<literal_emphasis>float</literal_emphasis>) – a value used in the accumulation buffer operation.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glAlphaFunc(func, ref):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify the alpha test function.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glAlphaFunc.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">func</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the alpha comparison function.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">ref</literal_strong> (<literal_emphasis>float</literal_emphasis>) – The reference value that incoming alpha values are compared to.
                                        Clamped between 0 and 1.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glAreTexturesResident(n, textures, residences):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Determine if textures are loaded in texture memory</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glAreTexturesResident.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">n</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the number of textures to be queried.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">textures</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object I{type GL_INT}) – Specifies an array containing the names of the textures to be queried</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">residences</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object I{type GL_INT}(boolean)) – An array in which the texture residence status in returned.
                                        The residence status of a texture named by an element of textures is
                                        returned in the corresponding element of residences.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glBegin(mode):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Delimit the vertices of a primitive or a group of like primitives</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glBegin.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">mode</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the primitive that will be create from vertices between
                                glBegin and glEnd.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glBindTexture(target, texture):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Bind a named texture to a texturing target</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glBindTexture.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">target</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the target to which the texture is bound.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">texture</literal_strong> (<literal_emphasis>unsigned int</literal_emphasis>) – Specifies the name of a texture.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Draw a bitmap</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glBitmap.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">height</literal_strong> (<literal_emphasis>width</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the pixel width and height of the bitmap image.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">yorig</literal_strong> (<literal_emphasis>xorig</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the location of the origin in the bitmap image. The origin is measured
                                        from the lower left corner of the bitmap, with right and up being the positive axes.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">ymove</literal_strong> (<literal_emphasis>xmove</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the x and y offsets to be added to the current raster position after
                                        the bitmap is drawn.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">bitmap</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object I{type GL_BYTE}) – Specifies the address of the bitmap image.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glBlendFunc(sfactor, dfactor):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify pixel arithmetic</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glBlendFunc.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">sfactor</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies how the red, green, blue, and alpha source blending factors are
                                        computed.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">dfactor</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies how the red, green, blue, and alpha destination
                                        blending factors are computed.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glCallList(list):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Execute a display list</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glCallList.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">list</literal_strong> (<literal_emphasis>unsigned int</literal_emphasis>) – Specifies the integer name of the display list to be executed.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glCallLists(n, type, lists):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Execute a list of display lists</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glCallLists.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">n</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the number of display lists to be executed.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">type</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the type of values in lists.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">lists</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object) – Specifies the address of an array of name offsets in the display list.
                                        The pointer type is void because the offsets can be bytes, shorts, ints, or floats,
                                        depending on the value of type.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glClear(mask):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Clear buffers to preset values</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glClear.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">mask</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis><literal_emphasis>(</literal_emphasis><literal_emphasis>s</literal_emphasis><literal_emphasis>)</literal_emphasis>) – Bitwise OR of masks that indicate the buffers to be cleared.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glClearAccum(red, green, blue, alpha):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify clear values for the accumulation buffer</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glClearAccum.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">green</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">blue</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">alpha</literal_strong> (<literal_emphasis>red</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the red, green, blue, and alpha values used when the
                                accumulation buffer is cleared. The initial values are all 0.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glClearColor(red, green, blue, alpha):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify clear values for the color buffers</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glClearColor.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">green</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">blue</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">alpha</literal_strong> (<literal_emphasis>red</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the red, green, blue, and alpha values used when the
                                color buffers are cleared. The initial values are all 0.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glClearDepth(depth):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify the clear value for the depth buffer</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glClearDepth.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">depth</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the depth value used when the depth buffer is cleared.
                                The initial value is 1.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glClearIndex(c):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify the clear value for the color index buffers</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glClearIndex.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">c</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Specifies the index used when the color index buffers are cleared.
                                The initial value is 0.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glClearStencil(s):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify the clear value for the stencil buffer</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glClearStencil.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">s</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the index used when the stencil buffer is cleared. The initial value is 0.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glClipPlane (plane, equation):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify a plane against which all geometry is clipped</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glClipPlane.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">plane</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies which clipping plane is being positioned.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">equation</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object I{type GL_FLOAT}(double)) – Specifies the address of an array of four double- precision
                                        floating-point values. These values are interpreted as a plane equation.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glColor (red, green, blue, alpha):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glColor3b, glColor3d, glColor3f, glColor3i, glColor3s, glColor3ub, glColor3ui, glColor3us,
                    glColor4b, glColor4d, glColor4f, glColor4i, glColor4s, glColor4ub, glColor4ui, glColor4us,
                    glColor3bv, glColor3dv, glColor3fv, glColor3iv, glColor3sv, glColor3ubv, glColor3uiv,
                    glColor3usv, glColor4bv, glColor4dv, glColor4fv, glColor4iv, glColor4sv, glColor4ubv,
                    glColor4uiv, glColor4usv}</paragraph>
                <paragraph>Set a new color.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glColor.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">green</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">blue</literal_strong> (<literal_emphasis>red</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify new red, green, and blue values for the current color.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">alpha</literal_strong> – Specifies a new alpha value for the current color. Included only in the
                                        four-argument glColor4 commands. (With ‘4’ colors only)</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glColorMask(red, green, blue, alpha):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Enable and disable writing of frame buffer color components</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glColorMask.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">green</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">blue</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">alpha</literal_strong> (<literal_emphasis>red</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify whether red, green, blue, and alpha can or cannot be
                                written into the frame buffer. The initial values are all GL_TRUE, indicating that the
                                color components can be written.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glColorMaterial(face, mode):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Cause a material color to track the current color</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glColorMaterial.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">face</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies whether front, back, or both front and back material parameters should
                                        track the current color.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">mode</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies which of several material parameters track the current color.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glCopyPixels(x, y, width, height, type):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Copy pixels in the frame buffer</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glCopyPixels.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">y</literal_strong> (<literal_emphasis>x</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the window coordinates of the lower left corner of the rectangular
                                        region of pixels to be copied.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">width</literal_strong><literal_strong>,</literal_strong><literal_strong refspecific="True">height</literal_strong> – Specify the dimensions of the rectangular region of pixels to be copied.
                                        Both must be non-negative.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">type</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies whether color values, depth values, or stencil values are to be copied.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
                <paragraph>def glCopyTexImage2D(target, level, internalformat, x, y, width, height, border):</paragraph>
                <paragraph>Copy pixels into a 2D texture image</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glCopyTexImage2D.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">target</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the target texture.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">level</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the level-of-detail number. Level 0 is the base image level.
                                        Level n is the nth mipmap reduction image.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">internalformat</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the number of color components in the texture.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">y</literal_strong> (<literal_emphasis>x</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the window coordinates of the first pixel that is copied
                                        from the frame buffer. This location is the lower left corner of a rectangular
                                        block of pixels.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">width</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the width of the texture image. Must be 2n+2(border) for
                                        some integer n. All implementations support texture images that are at least 64
                                        texels wide.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">height</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the height of the texture image. Must be 2m+2(border) for
                                        some integer m. All implementations support texture images that are at least 64
                                        texels high.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">border</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the width of the border. Must be either 0 or 1.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glCullFace(mode):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify whether front- or back-facing facets can be culled</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glCullFace.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">mode</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies whether front- or back-facing facets are candidates for culling.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glDeleteLists(list, range):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Delete a contiguous group of display lists</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glDeleteLists.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">list</literal_strong> (<literal_emphasis>unsigned int</literal_emphasis>) – Specifies the integer name of the first display list to delete</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">range</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the number of display lists to delete</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glDeleteTextures(n, textures):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Delete named textures</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glDeleteTextures.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">n</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the number of textures to be deleted</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">textures</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> I{GL_INT}) – Specifies an array of textures to be deleted</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glDepthFunc(func):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify the value used for depth buffer comparisons</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glDepthFunc.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">func</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the depth comparison function.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glDepthMask(flag):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Enable or disable writing into the depth buffer</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glDepthMask.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">flag</literal_strong> (<literal_emphasis>int</literal_emphasis><literal_emphasis> (</literal_emphasis><literal_emphasis>boolean</literal_emphasis><literal_emphasis>)</literal_emphasis>) – Specifies whether the depth buffer is enabled for writing. If flag is GL_FALSE,
                                depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer
                                writing is enabled.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glDepthRange(zNear, zFar):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify mapping of depth values from normalized device coordinates to window coordinates</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glDepthRange.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">zNear</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the mapping of the near clipping plane to window coordinates.
                                        The initial value is 0.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">zFar</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the mapping of the far clipping plane to window coordinates.
                                        The initial value is 1.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glDisable(cap):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Disable server-side GL capabilities</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glEnable.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">cap</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a symbolic constant indicating a GL capability.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glDrawBuffer(mode):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify which color buffers are to be drawn into</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glDrawBuffer.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">mode</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies up to four color buffers to be drawn into.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glDrawPixels(width, height, format, type, pixels):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Write a block of pixels to the frame buffer</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glDrawPixels.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">height</literal_strong> (<literal_emphasis>width</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the dimensions of the pixel rectangle to be
                                        written into the frame buffer.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">format</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the format of the pixel data.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">type</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the data type for pixels.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pixels</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object) – Specifies a pointer to the pixel data.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glEdgeFlag (flag):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glEdgeFlag, glEdgeFlagv}</paragraph>
                <paragraph>Flag edges as either boundary or non-boundary</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glEdgeFlag.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">flag</literal_strong> (<literal_emphasis>Depends of function prototype</literal_emphasis>) – Specifies the current edge flag value.The initial value is GL_TRUE.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glEnable(cap):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Enable server-side GL capabilities</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glEnable.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">cap</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a symbolic constant indicating a GL capability.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glEnd():</desc_name></desc_signature>
            <desc_content>
                <paragraph>Delimit the vertices of a primitive or group of like primitives</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glBegin.xml">OpenGL Docs</reference></paragraph>
                </seealso>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glEndList():</desc_name></desc_signature>
            <desc_content>
                <paragraph>Create or replace a display list</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glNewList.xml">OpenGL Docs</reference></paragraph>
                </seealso>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glEvalCoord (u,v):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glEvalCoord1d, glEvalCoord1f, glEvalCoord2d, glEvalCoord2f, glEvalCoord1dv, glEvalCoord1fv,
                    glEvalCoord2dv, glEvalCoord2fv}</paragraph>
                <paragraph>Evaluate enabled one- and two-dimensional maps</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glEvalCoord.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">u</literal_strong> (<literal_emphasis>Depends on function prototype.</literal_emphasis>) – Specifies a value that is the domain coordinate u to the basis function defined
                                        in a previous glMap1 or glMap2 command. If the function prototype ends in ‘v’ then
                                        u specifies a pointer to an array containing either one or two domain coordinates. The first
                                        coordinate is u. The second coordinate is v, which is present only in glEvalCoord2 versions.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">v</literal_strong> (<literal_emphasis>Depends on function prototype.</literal_emphasis><literal_emphasis> (</literal_emphasis><literal_emphasis>only with '2' prototypes</literal_emphasis><literal_emphasis>)</literal_emphasis>) – Specifies a value that is the domain coordinate v to the basis function defined
                                        in a previous glMap2 command. This argument is not present in a glEvalCoord1 command.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glEvalMesh (mode, i1, i2):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glEvalMesh1 or glEvalMesh2}</paragraph>
                <paragraph>Compute a one- or two-dimensional grid of points or lines</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glEvalMesh.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">mode</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – In glEvalMesh1, specifies whether to compute a one-dimensional
                                        mesh of points or lines.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">i2</literal_strong> (<literal_emphasis>i1</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the first and last integer values for the grid domain variable i.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glEvalPoint (i, j):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glEvalPoint1 and glEvalPoint2}</paragraph>
                <paragraph>Generate and evaluate a single point in a mesh</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glEvalPoint.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">i</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the integer value for grid domain variable i.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">j</literal_strong> (<literal_emphasis>int</literal_emphasis><literal_emphasis> (</literal_emphasis><literal_emphasis>only with '2' prototypes</literal_emphasis><literal_emphasis>)</literal_emphasis>) – Specifies the integer value for grid domain variable j (glEvalPoint2 only).</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glFeedbackBuffer (size, type, buffer):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Controls feedback mode</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glFeedbackBuffer.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">size</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the maximum number of values that can be written into buffer.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">type</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a symbolic constant that describes the information that
                                        will be returned for each vertex.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">buffer</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object I{GL_FLOAT}) – Returns the feedback data.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glFinish():</desc_name></desc_signature>
            <desc_content>
                <paragraph>Block until all GL execution is complete</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glFinish.xml">OpenGL Docs</reference></paragraph>
                </seealso>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glFlush():</desc_name></desc_signature>
            <desc_content>
                <paragraph>Force Execution of GL commands in finite time</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glFlush.xml">OpenGL Docs</reference></paragraph>
                </seealso>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glFog (pname, param):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glFogf, glFogi, glFogfv, glFogiv}</paragraph>
                <paragraph>Specify fog parameters</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glFog.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pname</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a single-valued fog parameter. If the function prototype
                                        ends in ‘v’ specifies a fog parameter.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">param</literal_strong> (<literal_emphasis>Depends on function prototype.</literal_emphasis>) – Specifies the value or values to be assigned to pname. GL_FOG_COLOR
                                        requires an array of four values. All other parameters accept an array containing
                                        only a single value.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glFrontFace(mode):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Define front- and back-facing polygons</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glFrontFace.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">mode</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the orientation of front-facing polygons.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glFrustum(left, right, bottom, top, zNear, zFar):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Multiply the current matrix by a perspective matrix</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glFrustum.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">right</literal_strong> (<literal_emphasis>left</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the coordinates for the left and right vertical
                                        clipping planes.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">bottom</literal_strong> (<literal_emphasis>top</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the coordinates for the bottom and top horizontal
                                        clipping planes.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">zFar</literal_strong> (<literal_emphasis>zNear</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the distances to the near and far depth clipping planes.
                                        Both distances must be positive.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGenLists(range):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Generate a contiguous set of empty display lists</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGenLists.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">range</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the number of contiguous empty display lists to be generated.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGenTextures(n, textures):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Generate texture names</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGenTextures.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">n</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the number of textures name to be generated.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">textures</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object I{type GL_INT}) – Specifies an array in which the generated textures names are stored.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGet (pname, param):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glGetBooleanv, glGetfloatv, glGetFloatv, glGetIntegerv}</paragraph>
                <paragraph>Return the value or values of a selected parameter</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGet.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pname</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the parameter value to be returned.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">param</literal_strong> (<literal_emphasis>Depends on function prototype.</literal_emphasis>) – Returns the value or values of the specified parameter.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGetClipPlane(plane, equation):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Return the coefficients of the specified clipping plane</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGetClipPlane.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">plane</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a clipping plane. The number of clipping planes depends on the
                                        implementation, but at least six clipping planes are supported. They are identified by
                                        symbolic names of the form GL_CLIP_PLANEi where 0 &lt; i &lt; GL_MAX_CLIP_PLANES.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">equation</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object I{type GL_FLOAT}) – Returns four float (double)-precision values that are the coefficients of the
                                        plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGetError():</desc_name></desc_signature>
            <desc_content>
                <paragraph>Return error information</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGetError.xml">OpenGL Docs</reference></paragraph>
                </seealso>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGetLight (light, pname, params):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glGetLightfv and glGetLightiv}</paragraph>
                <paragraph>Return light source parameter values</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGetLight.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">light</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a light source. The number of possible lights depends on the
                                        implementation, but at least eight lights are supported. They are identified by symbolic
                                        names of the form GL_LIGHTi where 0 &lt; i &lt; GL_MAX_LIGHTS.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pname</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a light source parameter for light.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">params</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. Depends on function prototype.) – Returns the requested data.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGetMap (target, query, v):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glGetMapdv, glGetMapfv, glGetMapiv}</paragraph>
                <paragraph>Return evaluator parameters</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGetMap.xml">OpenGL Docs</reference><target ids="opengl-docs" names="opengl\ docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGetMap.xml"></target></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">target</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the symbolic name of a map.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">query</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies which parameter to return.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">v</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. Depends on function prototype.) – Returns the requested data.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGetMaterial (face, pname, params):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glGetMaterialfv, glGetMaterialiv}</paragraph>
                <paragraph>Return material parameters</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGetMaterial.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">face</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies which of the two materials is being queried.
                                        representing the front and back materials, respectively.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pname</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the material parameter to return.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">params</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. Depends on function prototype.) – Returns the requested data.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGetPixelMap (map, values):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glGetPixelMapfv, glGetPixelMapuiv, glGetPixelMapusv}</paragraph>
                <paragraph>Return the specified pixel map</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGetPixelMap.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">map</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the name of the pixel map to return.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">values</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. Depends on function prototype.) – Returns the pixel map contents.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGetPolygonStipple(mask):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Return the polygon stipple pattern</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGetPolygonStipple.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">mask</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object I{type GL_BYTE}) – Returns the stipple pattern. The initial value is all 1’s.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGetString(name):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Return a string describing the current GL connection</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGetString.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a symbolic constant.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGetTexEnv (target, pname, params):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glGetTexEnvfv, glGetTexEnviv}</paragraph>
                <paragraph>Return texture environment parameters</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGetTexEnv.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">target</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a texture environment. Must be GL_TEXTURE_ENV.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pname</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the symbolic name of a texture environment parameter.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">params</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. Depends on function prototype.) – Returns the requested data.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGetTexGen (coord, pname, params):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glGetTexGendv, glGetTexGenfv, glGetTexGeniv}</paragraph>
                <paragraph>Return texture coordinate generation parameters</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGetTexGen.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">coord</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a texture coordinate.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pname</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the symbolic name of the value(s) to be returned.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">params</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. Depends on function prototype.) – Returns the requested data.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGetTexImage(target, level, format, type, pixels):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Return a texture image</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGetTexImage.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">target</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies which texture is to be obtained.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">level</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the level-of-detail number of the desired image.
                                        Level 0 is the base image level. Level n is the nth mipmap reduction image.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">format</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a pixel format for the returned data.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">type</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a pixel type for the returned data.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pixels</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object.) – Returns the texture image. Should be a pointer to an array of the
                                        type specified by type</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGetTexLevelParameter (target, level, pname, params):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glGetTexLevelParameterfv, glGetTexLevelParameteriv}</paragraph>
                <paragraph>return texture parameter values for a specific level of detail</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGetTexLevelParameter.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">target</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the symbolic name of the target texture.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">level</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the level-of-detail number of the desired image.
                                        Level 0 is the base image level. Level n is the nth mipmap reduction image.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pname</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the symbolic name of a texture parameter.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">params</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. Depends on function prototype.) – Returns the requested data.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGetTexParameter (target, pname, params):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glGetTexParameterfv, glGetTexParameteriv}</paragraph>
                <paragraph>Return texture parameter values</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGetTexParameter.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">target</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the symbolic name of the target texture.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pname</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the symbolic name the target texture.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">params</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. Depends on function prototype.) – Returns the texture parameters.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glHint(target, mode):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify implementation-specific hints</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glHint.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">target</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a symbolic constant indicating the behavior to be
                                        controlled.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">mode</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a symbolic constant indicating the desired behavior.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glIndex(c):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glIndexd, glIndexf, glIndexi, glIndexs,  glIndexdv, glIndexfv, glIndexiv, glIndexsv}</paragraph>
                <paragraph>Set the current color index</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glIndex.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">c</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. Depends on function prototype.) – Specifies a pointer to a one element array that contains the new value for
                                the current color index.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glIndexMask(mask):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Control the writing of individual bits in the color index buffers</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glIndexMask.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">mask</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies a bit mask to enable and disable the writing of individual bits
                                in the color index buffers.
                                Initially, the mask is all 1’s.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glInitNames():</desc_name></desc_signature>
            <desc_content>
                <paragraph>Initialize the name stack</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glInitNames.xml">OpenGL Docs</reference></paragraph>
                </seealso>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glIsEnabled(cap):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Test whether a capability is enabled</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glIsEnabled.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">cap</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a constant representing a GL capability.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glIsList(list):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Determine if a name corresponds to a display-list</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glIsList.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">list</literal_strong> (<literal_emphasis>unsigned int</literal_emphasis>) – Specifies a potential display-list name.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glIsTexture(texture):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Determine if a name corresponds to a texture</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glIsTexture.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">texture</literal_strong> (<literal_emphasis>unsigned int</literal_emphasis>) – Specifies a value that may be the name of a texture.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glLight (light, pname, param):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glLightf,glLighti, glLightfv, glLightiv}</paragraph>
                <paragraph>Set the light source parameters</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glLight.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">light</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a light. The number of lights depends on the implementation,
                                        but at least eight lights are supported. They are identified by symbolic names of the
                                        form GL_LIGHTi where 0 &lt; i &lt; GL_MAX_LIGHTS.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pname</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a single-valued light source parameter for light.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">param</literal_strong> (<literal_emphasis>Depends on function prototype.</literal_emphasis>) – Specifies the value that parameter pname of light source light will be set to.
                                        If function prototype ends in ‘v’ specifies a pointer to the value or values that
                                        parameter pname of light source light will be set to.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glLightModel (pname, param):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glLightModelf, glLightModeli, glLightModelfv, glLightModeliv}</paragraph>
                <paragraph>Set the lighting model parameters</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glLightModel.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pname</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a single-value light model parameter.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">param</literal_strong> (<literal_emphasis>Depends on function prototype.</literal_emphasis>) – Specifies the value that param will be set to. If function prototype ends in ‘v’
                                        specifies a pointer to the value or values that param will be set to.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glLineStipple(factor, pattern):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify the line stipple pattern</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glLineStipple.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">factor</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies a multiplier for each bit in the line stipple pattern.
                                        If factor is 3, for example, each bit in the pattern is used three times before
                                        the next bit in the pattern is used. factor is clamped to the range [1, 256] and
                                        defaults to 1.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pattern</literal_strong> (<literal_emphasis>unsigned short int</literal_emphasis>) – Specifies a 16-bit integer whose bit pattern determines which fragments
                                        of a line will be drawn when the line is rasterized. Bit zero is used first; the default
                                        pattern is all 1’s.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glLineWidth(width):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify the width of rasterized lines.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glLineWidth.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">width</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Specifies the width of rasterized lines. The initial value is 1.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glListBase(base):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Set the display-list base for glCallLists</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glListBase.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">base</literal_strong> (<literal_emphasis>unsigned int</literal_emphasis>) – Specifies an integer offset that will be added to glCallLists
                                offsets to generate display-list names. The initial value is 0.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glLoadIdentity():</desc_name></desc_signature>
            <desc_content>
                <paragraph>Replace the current matrix with the identity matrix</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glLoadIdentity.xml">OpenGL Docs</reference></paragraph>
                </seealso>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glLoadMatrix (m):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glLoadMatrixd, glLoadMatixf}</paragraph>
                <paragraph>Replace the current matrix with the specified matrix</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glLoadMatrix.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">m</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. Depends on function prototype.) – Specifies a pointer to 16 consecutive values, which are used as the elements
                                of a 4x4 column-major matrix.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glLoadName(name):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Load a name onto the name stack.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glLoadName.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>unsigned int</literal_emphasis>) – Specifies a name that will replace the top value on the name stack.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glLogicOp(opcode):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify a logical pixel operation for color index rendering</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glLogicOp.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">opcode</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a symbolic constant that selects a logical operation.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glMap1 (target, u1, u2, stride, order, points):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glMap1d, glMap1f}</paragraph>
                <paragraph>Define a one-dimensional evaluator</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glMap1.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">target</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the kind of values that are generated by the evaluator.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">u1</literal_strong><literal_strong>,</literal_strong><literal_strong refspecific="True">u2</literal_strong> – Specify a linear mapping of u, as presented to glEvalCoord1, to ^, t
                                        he variable that is evaluated by the equations specified by this command.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">stride</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the number of floats or float (double)s between the beginning
                                        of one control point and the beginning of the next one in the data structure
                                        referenced in points. This allows control points to be embedded in arbitrary data
                                        structures. The only constraint is that the values for a particular control point must
                                        occupy contiguous memory locations.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">order</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the number of control points. Must be positive.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">points</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. Depends on function prototype.) – Specifies a pointer to the array of control points.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glMap2 (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glMap2d, glMap2f}</paragraph>
                <paragraph>Define a two-dimensional evaluator</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glMap2.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">target</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the kind of values that are generated by the evaluator.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">u1</literal_strong><literal_strong>,</literal_strong><literal_strong refspecific="True">u2</literal_strong> – Specify a linear mapping of u, as presented to glEvalCoord2, to ^, t
                                        he variable that is evaluated by the equations specified by this command. Initially
                                        u1 is 0 and u2 is 1.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">ustride</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the number of floats or float (double)s between the beginning
                                        of control point R and the beginning of control point R ij, where i and j are the u
                                        and v control point indices, respectively. This allows control points to be embedded
                                        in arbitrary data structures. The only constraint is that the values for a particular
                                        control point must occupy contiguous memory locations. The initial value of ustride is 0.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">uorder</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the dimension of the control point array in the u axis.
                                        Must be positive. The initial value is 1.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">v2</literal_strong> (<literal_emphasis>v1</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify a linear mapping of v, as presented to glEvalCoord2,
                                        to ^, one of the two variables that are evaluated by the equations
                                        specified by this command. Initially, v1 is 0 and v2 is 1.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">vstride</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the number of floats or float (double)s between the
                                        beginning of control point R and the beginning of control point R ij,
                                        where i and j are the u and v control point(indices, respectively.
                                        This allows control points to be embedded in arbitrary data structures.
                                        The only constraint is that the values for a particular control point must
                                        occupy contiguous memory locations. The initial value of vstride is 0.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">vorder</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the dimension of the control point array in the v axis.
                                        Must be positive. The initial value is 1.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">points</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. Depends on function prototype.) – Specifies a pointer to the array of control points.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glMapGrid (un, u1,u2 ,vn, v1, v2):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glMapGrid1d, glMapGrid1f, glMapGrid2d, glMapGrid2f}</paragraph>
                <paragraph>Define a one- or two-dimensional mesh</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glMapGrid.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">un</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the number of partitions in the grid range interval
                                        [u1, u2]. Must be positive.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">u2</literal_strong> (<literal_emphasis>u1</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the mappings for integer grid domain values i=0 and i=un.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">vn</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the number of partitions in the grid range interval
                                        [v1, v2] (glMapGrid2 only).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">v2</literal_strong> (<literal_emphasis>v1</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the mappings for integer grid domain values j=0 and j=vn
                                        (glMapGrid2 only).</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glMaterial (face, pname, params):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify material parameters for the lighting model.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glMaterial.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">face</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies which face or faces are being updated. Must be one of:</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pname</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the single-valued material parameter of the face
                                        or faces that is being updated. Must be GL_SHININESS.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">params</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the value that parameter GL_SHININESS will be set to.
                                        If function prototype ends in ‘v’ specifies a pointer to the value or values that
                                        pname will be set to.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glMatrixMode(mode):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify which matrix is the current matrix.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glMatrixMode.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">mode</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies which matrix stack is the target for subsequent matrix operations.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glMultMatrix (m):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glMultMatrixd, glMultMatrixf}</paragraph>
                <paragraph>Multiply the current matrix with the specified matrix</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glMultMatrix.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">m</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. Depends on function prototype.) – Points to 16 consecutive values that are used as the elements of a 4x4 column
                                major matrix.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glNewList(list, mode):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Create or replace a display list</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glNewList.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">list</literal_strong> (<literal_emphasis>unsigned int</literal_emphasis>) – Specifies the display list name</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">mode</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the compilation mode.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glNormal3 (nx, ny, nz, v):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{Normal3b, Normal3bv, Normal3d, Normal3dv, Normal3f, Normal3fv, Normal3i, Normal3iv,
                    Normal3s, Normal3sv}</paragraph>
                <paragraph>Set the current normal vector</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glNormal.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">ny</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">nz</literal_strong> (<literal_emphasis>nx</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the x, y, and z coordinates of the new current normal.
                                        The initial value of the current normal is the unit vector, (0, 0, 1).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">v</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. Depends on function prototype. (‘v’ prototypes)) – Specifies a pointer to an array of three elements: the x, y, and z coordinates
                                        of the new current normal.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glOrtho(left, right, bottom, top, zNear, zFar):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Multiply the current matrix with an orthographic matrix</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glOrtho.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">right</literal_strong> (<literal_emphasis>left</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the coordinates for the left and
                                        right vertical clipping planes.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">top</literal_strong> (<literal_emphasis>bottom</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the coordinates for the bottom and top
                                        horizontal clipping planes.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">zFar</literal_strong> (<literal_emphasis>zNear</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the distances to the nearer and farther
                                        depth clipping planes. These values are negative if the plane is to be behind the viewer.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glPassThrough(token):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Place a marker in the feedback buffer</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glPassThrough.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">token</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Specifies a marker value to be placed in the feedback
                                buffer following a GL_PASS_THROUGH_TOKEN.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glPixelMap (map, mapsize, values):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glPixelMapfv, glPixelMapuiv, glPixelMapusv}</paragraph>
                <paragraph>Set up pixel transfer maps</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glPixelMap.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">map</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a symbolic map name.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">mapsize</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the size of the map being defined.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">values</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. Depends on function prototype.) – Specifies an array of mapsize values.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glPixelStore (pname, param):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glPixelStoref, glPixelStorei}</paragraph>
                <paragraph>Set pixel storage modes</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glPixelStore.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pname</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the symbolic name of the parameter to be set.
                                        Six values affect the packing of pixel data into memory.
                                        Six more affect the unpacking of pixel data from memory.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">param</literal_strong> (<literal_emphasis>Depends on function prototype.</literal_emphasis>) – Specifies the value that pname is set to.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glPixelTransfer (pname, param):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glPixelTransferf, glPixelTransferi}</paragraph>
                <paragraph>Set pixel transfer modes</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glPixelTransfer.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pname</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the symbolic name of the pixel transfer parameter to be set.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">param</literal_strong> (<literal_emphasis>Depends on function prototype.</literal_emphasis>) – Specifies the value that pname is set to.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glPixelZoom(xfactor, yfactor):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify the pixel zoom factors</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glPixelZoom.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">yfactor</literal_strong> (<literal_emphasis>xfactor</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the x and y zoom factors for pixel write operations.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glPointSize(size):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify the diameter of rasterized points</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glPointSize.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">size</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Specifies the diameter of rasterized points. The initial value is 1.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glPolygonMode(face, mode):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Select a polygon rasterization mode</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glPolygonMode.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">face</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the polygons that mode applies to.
                                        Must be GL_FRONT for front-facing polygons, GL_BACK for back- facing
                                        polygons, or GL_FRONT_AND_BACK for front- and back-facing polygons.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">mode</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies how polygons will be rasterized.
                                        The initial value is GL_FILL for both front- and back- facing polygons.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glPolygonOffset(factor, units):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Set the scale and units used to calculate depth values</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glPolygonOffset.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">factor</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Specifies a scale factor that is used to create a variable depth
                                        offset for each polygon. The initial value is 0.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">units</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Is multiplied by an implementation-specific value to create a
                                        constant depth offset. The initial value is 0.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glPolygonStipple(mask):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Set the polygon stippling pattern</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glPolygonStipple.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">mask</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object I{type GL_BYTE}) – Specifies a pointer to a 32x32 stipple pattern that will be unpacked
                                from memory in the same way that glDrawPixels unpacks pixels.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glPopAttrib():</desc_name></desc_signature>
            <desc_content>
                <paragraph>Pop the server attribute stack</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glPopAttrib.xml">OpenGL Docs</reference></paragraph>
                </seealso>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glPopClientAttrib():</desc_name></desc_signature>
            <desc_content>
                <paragraph>Pop the client attribute stack</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glPopClientAttrib.xml">OpenGL Docs</reference></paragraph>
                </seealso>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glPopMatrix():</desc_name></desc_signature>
            <desc_content>
                <paragraph>Pop the current matrix stack</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glPopMatrix.xml">OpenGL Docs</reference></paragraph>
                </seealso>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glPopName():</desc_name></desc_signature>
            <desc_content>
                <paragraph>Pop the name stack</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glPopName.xml">OpenGL Docs</reference></paragraph>
                </seealso>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glPrioritizeTextures(n, textures, priorities):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Set texture residence priority</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glPrioritizeTextures.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">n</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the number of textures to be prioritized.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">textures</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> I{type GL_INT}) – Specifies an array containing the names of the textures to be prioritized.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">priorities</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> I{type GL_FLOAT}) – Specifies an array containing the texture priorities.
                                        A priority given in an element of priorities applies to the texture named
                                        by the corresponding element of textures.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glPushAttrib(mask):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Push the server attribute stack</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glPushAttrib.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">mask</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis><literal_emphasis>(</literal_emphasis><literal_emphasis>s</literal_emphasis><literal_emphasis>)</literal_emphasis>) – Specifies a mask that indicates which attributes to save.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glPushClientAttrib(mask):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Push the client attribute stack</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glPushClientAttrib.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">mask</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis><literal_emphasis>(</literal_emphasis><literal_emphasis>s</literal_emphasis><literal_emphasis>)</literal_emphasis>) – Specifies a mask that indicates which attributes to save.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glPushMatrix():</desc_name></desc_signature>
            <desc_content>
                <paragraph>Push the current matrix stack</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glPushMatrix.xml">OpenGL Docs</reference></paragraph>
                </seealso>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glPushName(name):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Push the name stack</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glPushName.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>unsigned int</literal_emphasis>) – Specifies a name that will be pushed onto the name stack.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glRasterPos (x,y,z,w):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glRasterPos2d, glRasterPos2f, glRasterPos2i, glRasterPos2s, glRasterPos3d,
                    glRasterPos3f, glRasterPos3i, glRasterPos3s, glRasterPos4d, glRasterPos4f,
                    glRasterPos4i, glRasterPos4s, glRasterPos2dv, glRasterPos2fv, glRasterPos2iv,
                    glRasterPos2sv, glRasterPos3dv, glRasterPos3fv, glRasterPos3iv, glRasterPos3sv,
                    glRasterPos4dv, glRasterPos4fv, glRasterPos4iv, glRasterPos4sv}</paragraph>
                <paragraph>Specify the raster position for pixel operations</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glRasterPos.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">y</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">z</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">w</literal_strong> (<literal_emphasis>x</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the x,y,z, and w object coordinates (if present) for the
                                raster position.  If function prototype ends in ‘v’ specifies a pointer to an array of two,
                                three, or four elements, specifying x, y, z, and w coordinates, respectively.</paragraph>
                        </field_body>
                    </field>
                </field_list>
                <note>
                    <paragraph>If you are drawing to the 3d view with a Scriptlink of a space handler
                        the zoom level of the panels will scale the glRasterPos by the view matrix.
                        so a X of 10 will not always offset 10 pixels as you would expect.</paragraph>
                    <paragraph>To work around this get the scale value of the view matrix and use it to scale your pixel values.</paragraph>
                    <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">import bgl
xval, yval= 100, 40
# Get the scale of the view matrix
view_matrix = bgl.Buffer(bgl.GL_FLOAT, 16)
bgl.glGetFloatv(bgl.GL_MODELVIEW_MATRIX, view_matrix)
f = 1.0 / view_matrix[0]

# Instead of the usual glRasterPos2i(xval, yval)
bgl.glRasterPos2f(xval * f, yval * f)</literal_block>
                </note>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glReadBuffer(mode):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Select a color buffer source for pixels.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glReadBuffer.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">mode</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a color buffer.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glReadPixels(x, y, width, height, format, type, pixels):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Read a block of pixels from the frame buffer</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glReadPixels.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">y</literal_strong> (<literal_emphasis>x</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the window coordinates of the first pixel that is read
                                        from the frame buffer. This location is the lower left corner of a rectangular
                                        block of pixels.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">height</literal_strong> (<literal_emphasis>width</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the dimensions of the pixel rectangle. width and
                                        height of one correspond to a single pixel.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">format</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the format of the pixel data.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">type</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the data type of the pixel data.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pixels</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object) – Returns the pixel data.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glRect (x1,y1,x2,y2,v1,v2):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glRectd, glRectf, glRecti, glRects, glRectdv, glRectfv, glRectiv, glRectsv}</paragraph>
                <paragraph>Draw a rectangle</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glRect.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">y1</literal_strong> (<literal_emphasis>x1</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify one vertex of a rectangle</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">y2</literal_strong> (<literal_emphasis>x2</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the opposite vertex of the rectangle</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">v2</literal_strong> (<literal_emphasis>v1</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specifies a pointer to one vertex of a rectangle and the pointer
                                        to the opposite vertex of the rectangle</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glRenderMode(mode):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Set rasterization mode</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glRenderMode.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">mode</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the rasterization mode.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glRotate (angle, x, y, z):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glRotated, glRotatef}</paragraph>
                <paragraph>Multiply the current matrix by a rotation matrix</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glRotate.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">angle</literal_strong> (<literal_emphasis>Depends on function prototype.</literal_emphasis>) – Specifies the angle of rotation in degrees.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">y</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">z</literal_strong> (<literal_emphasis>x</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the x, y, and z coordinates of a vector respectively.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glScale (x,y,z):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glScaled, glScalef}</paragraph>
                <paragraph>Multiply the current matrix by a general scaling matrix</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glScale.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">y</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">z</literal_strong> (<literal_emphasis>x</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify scale factors along the x, y, and z axes, respectively.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glScissor(x,y,width,height):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Define the scissor box</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glScissor.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">y</literal_strong> (<literal_emphasis>x</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the lower left corner of the scissor box. Initially (0, 0).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">height</literal_strong> (<literal_emphasis>width</literal_emphasis>) – Specify the width and height of the scissor box. When a
                                        GL context is first attached to a window, width and height are set to the
                                        dimensions of that window.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glSelectBuffer(size, buffer):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Establish a buffer for selection mode values</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glSelectBuffer.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">size</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the size of buffer</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">buffer</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> I{type GL_INT}) – Returns the selection data</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glShadeModel(mode):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Select flat or smooth shading</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glShadeModel.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">mode</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a symbolic value representing a shading technique.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glStencilFunc(func, ref, mask):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Set function and reference value for stencil testing</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man/docbook4/xhtml/glStencilFunc.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">func</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the test function.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">ref</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the reference value for the stencil test. ref is clamped
                                        to the range [0,2n-1], where n is the number of bitplanes in the stencil
                                        buffer. The initial value is 0.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">mask</literal_strong> (<literal_emphasis>unsigned int</literal_emphasis>) – Specifies a mask that is ANDed with both the reference value and
                                        the stored stencil value when the test is done. The initial value is all 1’s.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glStencilMask(mask):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Control the writing of individual bits in the stencil planes</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glStencilMask.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">mask</literal_strong> (<literal_emphasis>unsigned int</literal_emphasis>) – Specifies a bit mask to enable and disable writing of individual bits
                                in the stencil planes. Initially, the mask is all 1’s.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glStencilOp(fail, zfail, zpass):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Set stencil test actions</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glStencilOp.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">fail</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the action to take when the stencil test fails.
                                        The initial value is GL_KEEP.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">zfail</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the stencil action when the stencil test passes, but the
                                        depth test fails. zfail accepts the same symbolic constants as fail.
                                        The initial value is GL_KEEP.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">zpass</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the stencil action when both the stencil test and the
                                        depth test pass, or when the stencil test passes and either there is no
                                        depth buffer or depth testing is not enabled. zpass accepts the same
                                        symbolic constants
                                        as fail. The initial value is GL_KEEP.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glTexCoord (s,t,r,q,v):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glTexCoord1d, glTexCoord1f, glTexCoord1i, glTexCoord1s, glTexCoord2d, glTexCoord2f,
                    glTexCoord2i, glTexCoord2s, glTexCoord3d, glTexCoord3f, glTexCoord3i, glTexCoord3s,
                    glTexCoord4d, glTexCoord4f, glTexCoord4i, glTexCoord4s, glTexCoord1dv, glTexCoord1fv,
                    glTexCoord1iv, glTexCoord1sv, glTexCoord2dv, glTexCoord2fv, glTexCoord2iv,
                    glTexCoord2sv, glTexCoord3dv, glTexCoord3fv, glTexCoord3iv, glTexCoord3sv,
                    glTexCoord4dv, glTexCoord4fv, glTexCoord4iv, glTexCoord4sv}</paragraph>
                <paragraph>Set the current texture coordinates</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glTexCoord.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">t</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">r</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">q</literal_strong> (<literal_emphasis>s</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify s, t, r, and q texture coordinates. Not all parameters are
                                        present in all forms of the command.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">v</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. Depends on function prototype. (for ‘v’ prototypes only)) – Specifies a pointer to an array of one, two, three, or four elements,
                                        which in turn specify the s, t, r, and q texture coordinates.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glTexEnv  (target, pname, param):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glTextEnvf, glTextEnvi, glTextEnvfv, glTextEnviv}</paragraph>
                <paragraph>Set texture environment parameters</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glTexEnv.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">target</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a texture environment. Must be GL_TEXTURE_ENV.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pname</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the symbolic name of a single-valued texture environment
                                        parameter. Must be GL_TEXTURE_ENV_MODE.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">param</literal_strong> (<literal_emphasis>Depends on function prototype.</literal_emphasis>) – Specifies a single symbolic constant. If function prototype ends in ‘v’
                                        specifies a pointer to a parameter array that contains either a single
                                        symbolic constant or an RGBA color</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glTexGen (coord, pname, param):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glTexGend, glTexGenf, glTexGeni, glTexGendv, glTexGenfv, glTexGeniv}</paragraph>
                <paragraph>Control the generation of texture coordinates</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glTexGen.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">coord</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies a texture coordinate.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pname</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the symbolic name of the texture- coordinate generation function.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">param</literal_strong> (<literal_emphasis>Depends on function prototype.</literal_emphasis>) – Specifies a single-valued texture generation parameter.
                                        If function prototype ends in ‘v’ specifies a pointer to an array of texture
                                        generation parameters. If pname is GL_TEXTURE_GEN_MODE, then the array must
                                        contain a single symbolic constant. Otherwise, params holds the coefficients
                                        for the texture-coordinate generation function specified by pname.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glTexImage1D(target, level, internalformat, width, border, format, type, pixels):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify a one-dimensional texture image</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glTexImage1D.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">target</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the target texture.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">level</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the level-of-detail number. Level 0 is the base image level.
                                        Level n is the nth mipmap reduction image.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">internalformat</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the number of color components in the texture.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">width</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the width of the texture image. Must be 2n+2(border)
                                        for some integer n. All implementations support texture images that are
                                        at least 64 texels wide. The height of the 1D texture image is 1.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">border</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the width of the border. Must be either 0 or 1.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">format</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the format of the pixel data.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">type</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the data type of the pixel data.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pixels</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object.) – Specifies a pointer to the image data in memory.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Specify a two-dimensional texture image</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glTexImage2D.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">target</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the target texture.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">level</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the level-of-detail number. Level 0 is the base image level.
                                        Level n is the nth mipmap reduction image.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">internalformat</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the number of color components in the texture.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">width</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the width of the texture image. Must be 2n+2(border)
                                        for some integer n. All implementations support texture images that are at
                                        least 64 texels wide.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">height</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the height of the texture image. Must be 2m+2(border) for
                                        some integer m. All implementations support texture images that are at
                                        least 64 texels high.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">border</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the width of the border. Must be either 0 or 1.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">format</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the format of the pixel data.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">type</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the data type of the pixel data.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pixels</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object.) – Specifies a pointer to the image data in memory.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glTexParameter (target, pname, param):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glTexParameterf, glTexParameteri, glTexParameterfv, glTexParameteriv}</paragraph>
                <paragraph>Set texture parameters</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glTexParameter.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">target</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the target texture.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pname</literal_strong> (<literal_emphasis>Enumerated constant</literal_emphasis>) – Specifies the symbolic name of a single-valued texture parameter.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">param</literal_strong> (<literal_emphasis>Depends on function prototype.</literal_emphasis>) – Specifies the value of pname. If function prototype ends in ‘v’ specifies
                                        a pointer to an array where the value or values of pname are stored.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glTranslate (x, y, z):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glTranslatef, glTranslated}</paragraph>
                <paragraph>Multiply the current matrix by a translation matrix</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glTranslate.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">y</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">z</literal_strong> (<literal_emphasis>x</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the x, y, and z coordinates of a translation vector.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glVertex (x,y,z,w,v):</desc_name></desc_signature>
            <desc_content>
                <paragraph>B{glVertex2d, glVertex2f, glVertex2i, glVertex2s, glVertex3d, glVertex3f, glVertex3i,
                    glVertex3s, glVertex4d, glVertex4f, glVertex4i, glVertex4s, glVertex2dv, glVertex2fv,
                    glVertex2iv, glVertex2sv, glVertex3dv, glVertex3fv, glVertex3iv, glVertex3sv, glVertex4dv,
                    glVertex4fv, glVertex4iv, glVertex4sv}</paragraph>
                <paragraph>Specify a vertex</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glVertex.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">y</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">z</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">w</literal_strong> (<literal_emphasis>x</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify x, y, z, and w coordinates of a vertex. Not all parameters
                                        are present in all forms of the command.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">v</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. Depends of function prototype (for ‘v’
                                        prototypes only)) – Specifies a pointer to an array of two, three, or four elements. The
                                        elements of a two-element array are x and y; of a three-element array,
                                        x, y, and z; and of a four-element array, x, y, z, and w.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glViewport(x,y,width,height):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Set the viewport</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glViewport.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">y</literal_strong> (<literal_emphasis>x</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the lower left corner of the viewport rectangle,
                                        in pixels. The initial value is (0,0).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">height</literal_strong> (<literal_emphasis>width</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the width and height of the viewport. When a GL
                                        context is first attached to a window, width and height are set to the
                                        dimensions of that window.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">gluPerspective(fovY, aspect, zNear, zFar):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Set up a perspective projection matrix.</paragraph>
                <seealso>
                    <paragraph><reference refuri="https://www.opengl.org/sdk/docs/man2/xhtml/gluPerspective.xml">https://www.opengl.org/sdk/docs/man2/xhtml/gluPerspective.xml</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">fovY</literal_strong> (<literal_emphasis>double</literal_emphasis>) – Specifies the field of view angle, in degrees, in the y direction.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">aspect</literal_strong> (<literal_emphasis>double</literal_emphasis>) – Specifies the aspect ratio that determines the field of view in the x direction.
                                        The aspect ratio is the ratio of x (width) to y (height).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">zNear</literal_strong> (<literal_emphasis>double</literal_emphasis>) – Specifies the distance from the viewer to the near clipping plane (always positive).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">zFar</literal_strong> (<literal_emphasis>double</literal_emphasis>) – Specifies the distance from the viewer to the far clipping plane (always positive).</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">gluLookAt(eyex, eyey, eyez, centerx, centery, centerz, upx, upy, upz):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Define a viewing transformation.</paragraph>
                <seealso>
                    <paragraph><reference refuri="https://www.opengl.org/sdk/docs/man2/xhtml/gluLookAt.xml">https://www.opengl.org/sdk/docs/man2/xhtml/gluLookAt.xml</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">eyey</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">eyez</literal_strong> (<literal_emphasis>eyex</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specifies the position of the eye point.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">centery</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">centerz</literal_strong> (<literal_emphasis>centerx</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specifies the position of the reference point.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">upy</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">upz</literal_strong> (<literal_emphasis>upx</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specifies the direction of the up vector.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">gluOrtho2D(left, right, bottom, top):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Define a 2-D orthographic projection matrix.</paragraph>
                <seealso>
                    <paragraph><reference refuri="https://www.opengl.org/sdk/docs/man2/xhtml/gluOrtho2D.xml">https://www.opengl.org/sdk/docs/man2/xhtml/gluOrtho2D.xml</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">right</literal_strong> (<literal_emphasis>left</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the coordinates for the left and right vertical clipping planes.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">top</literal_strong> (<literal_emphasis>bottom</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the coordinates for the bottom and top horizontal clipping planes.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">gluPickMatrix(x, y, width, height, viewport):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Define a picking region.</paragraph>
                <seealso>
                    <paragraph><reference refuri="https://www.opengl.org/sdk/docs/man2/xhtml/gluPickMatrix.xml">https://www.opengl.org/sdk/docs/man2/xhtml/gluPickMatrix.xml</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">y</literal_strong> (<literal_emphasis>x</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the center of a picking region in window coordinates.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">height</literal_strong> (<literal_emphasis>width</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the width and height, respectively, of the picking region in window coordinates.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">viewport</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. [int]) – Specifies the current viewport.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">gluProject(objx, objy, objz, modelMatrix, projMatrix, viewport, winx, winy, winz):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Map object coordinates to window coordinates.</paragraph>
                <seealso>
                    <paragraph><reference refuri="https://www.opengl.org/sdk/docs/man2/xhtml/gluProject.xml">https://www.opengl.org/sdk/docs/man2/xhtml/gluProject.xml</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">objy</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">objz</literal_strong> (<literal_emphasis>objx</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the object coordinates.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">modelMatrix</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. [double]) – Specifies the current modelview matrix (as from a glGetDoublev call).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">projMatrix</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. [double]) – Specifies the current projection matrix (as from a glGetDoublev call).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">viewport</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. [int]) – Specifies the current viewport (as from a glGetIntegerv call).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">winy</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">winz</literal_strong> (<literal_emphasis>winx</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Return the computed window coordinates.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">gluUnProject(winx, winy, winz, modelMatrix, projMatrix, viewport, objx, objy, objz):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Map object coordinates to window coordinates.</paragraph>
                <seealso>
                    <paragraph><reference refuri="https://www.opengl.org/sdk/docs/man2/xhtml/gluUnProject.xml">https://www.opengl.org/sdk/docs/man2/xhtml/gluUnProject.xml</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">winy</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">winz</literal_strong> (<literal_emphasis>winx</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Specify the window coordinates to be mapped.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">modelMatrix</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. [double]) – Specifies the current modelview matrix (as from a glGetDoublev call).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">projMatrix</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. [double]) – Specifies the current projection matrix (as from a glGetDoublev call).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">viewport</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> object. [int]) – Specifies the current viewport (as from a glGetIntegerv call).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">objy</literal_strong><literal_strong>, </literal_strong><literal_strong refspecific="True">objz</literal_strong> (<literal_emphasis>objx</literal_emphasis><literal_emphasis>,</literal_emphasis>) – Return the computed object coordinates.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glUseProgram(program):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Installs a program object as part of current rendering state</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glUseProgram.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">program</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the handle of the program object whose executables are to be used as part of current rendering state.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glValidateProgram(program):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Validates a program object</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glValidateProgram.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">program</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the handle of the program object to be validated.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glLinkProgram(program):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Links a program object.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glLinkProgram.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">program</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the handle of the program object to be linked.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glActiveTexture(texture):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Select active texture unit.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glActiveTexture.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">texture</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Constant in <literal>GL_TEXTURE0</literal> 0 - 8</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glAttachShader(program, shader):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Attaches a shader object to a program object.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glAttachShader.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">program</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the program object to which a shader object will be attached.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">shader</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the shader object that is to be attached.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glCompileShader(shader):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Compiles a shader object.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glCompileShader.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">shader</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the shader object to be compiled.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glCreateProgram():</desc_name></desc_signature>
            <desc_content>
                <paragraph>Creates a program object</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glCreateProgram.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Return type</field_name>
                        <field_body>
                            <paragraph>int</paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Returns</field_name>
                        <field_body>
                            <paragraph>The new program or zero if an error occurs.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glCreateShader(shaderType):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Creates a shader object.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glCreateShader.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">shaderType</literal_strong> (Specifies the type of shader to be created.
                                Must be one of <literal>GL_VERTEX_SHADER</literal>,
                                <literal>GL_TESS_CONTROL_SHADER</literal>,
                                <literal>GL_TESS_EVALUATION_SHADER</literal>,
                                <literal>GL_GEOMETRY_SHADER</literal>,
                                or <literal>GL_FRAGMENT_SHADER</literal>.) – </paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Return type</field_name>
                        <field_body>
                            <paragraph>int</paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Returns</field_name>
                        <field_body>
                            <paragraph>0 if an error occurs.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glDeleteProgram(program):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Deletes a program object.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glDeleteProgram.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">program</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the program object to be deleted.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glDeleteShader(shader):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Deletes a shader object.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glDeleteShader.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">shader</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the shader object to be deleted.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glDetachShader(program, shader):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Detaches a shader object from a program object to which it is attached.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glDetachShader.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">program</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the program object from which to detach the shader object.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">shader</literal_strong> (<literal_emphasis>int</literal_emphasis>) – pecifies the program object from which to detach the shader object.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGetAttachedShaders(program, maxCount, count, shaders):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Returns the handles of the shader objects attached to a program object.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGetAttachedShaders.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">program</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the program object to be queried.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">maxCount</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the size of the array for storing the returned object names.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">count</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> int buffer.) – Returns the number of names actually returned in objects.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">shaders</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> int buffer.) – Specifies an array that is used to return the names of attached shader objects.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGetProgramInfoLog(program, maxLength, length, infoLog):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Returns the information log for a program object.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGetProgramInfoLog.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">program</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the program object whose information log is to be queried.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">maxLength</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the size of the character buffer for storing the returned information log.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">length</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> int buffer.) – Returns the length of the string returned in <strong>infoLog</strong> (excluding the null terminator).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">infoLog</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> char buffer.) – Specifies an array of characters that is used to return the information log.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGetShaderInfoLog(program, maxLength, length, infoLog):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Returns the information log for a shader object.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGetShaderInfoLog.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">shader</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the shader object whose information log is to be queried.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">maxLength</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the size of the character buffer for storing the returned information log.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">length</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> int buffer.) – Returns the length of the string returned in <strong>infoLog</strong> (excluding the null terminator).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">infoLog</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> char buffer.) – Specifies an array of characters that is used to return the information log.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGetProgramiv(program, pname, params):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Returns a parameter from a program object.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGetProgram.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">program</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the program object to be queried.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">pname</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the object parameter.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">params</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> int buffer.) – Returns the requested object parameter.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glIsShader(shader):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Determines if a name corresponds to a shader object.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glIsShader.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">shader</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies a potential shader object.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glIsProgram(program):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Determines if a name corresponds to a program object</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glIsProgram.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">program</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies a potential program object.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glGetShaderSource(shader, bufSize, length, source):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Returns the source code string from a shader object</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man2/xhtml/glGetShaderSource.xml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">shader</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the shader object to be queried.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">bufSize</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the size of the character buffer for storing the returned source code string.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">length</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> int buffer.) – Returns the length of the string returned in source (excluding the null terminator).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">source</literal_strong> (<reference internal="True" refid="bgl.Buffer" reftitle="bgl.Buffer"><literal classes="xref py py-class">bgl.Buffer</literal></reference> char.) – Specifies an array of characters that is used to return the source code string.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries=""></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature first="False"><desc_name xml:space="preserve">glShaderSource(shader, shader_string):</desc_name></desc_signature>
            <desc_content>
                <paragraph>Replaces the source code in a shader object.</paragraph>
                <seealso>
                    <paragraph><reference name="OpenGL Docs" refuri="https://www.opengl.org/sdk/docs/man/html/glShaderSource.xhtml">OpenGL Docs</reference></paragraph>
                </seealso>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">shader</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the handle of the shader object whose source code is to be replaced.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">shader_string</literal_strong> (<literal_emphasis>string</literal_emphasis>) – The shader string.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ u'Buffer\ (class\ in\ bgl)',\ u'bgl.Buffer',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Buffer" ids="bgl.Buffer" module="bgl" names="bgl.Buffer"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bgl.</desc_addname><desc_name xml:space="preserve">Buffer</desc_name></desc_signature>
            <desc_content>
                <paragraph>The Buffer object is simply a block of memory that is delineated and initialized by the
                    user. Many OpenGL functions return data to a C-style pointer, however, because this
                    is not possible in python the Buffer object can be used to this end. Wherever pointer
                    notation is used in the OpenGL functions the Buffer object can be used in it’s bgl
                    wrapper. In some instances the Buffer object will need to be initialized with the template
                    parameter, while in other instances the user will want to create just a blank buffer
                    which will be zeroed by default.</paragraph>
                <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">import bgl

myByteBuffer = bgl.Buffer(bgl.GL_BYTE, [32, 32])
bgl.glGetPolygonStipple(myByteBuffer)

print(myByteBuffer.dimensions)
print(myByteBuffer.to_list())

sliceBuffer = myByteBuffer[0:16]
print(sliceBuffer)</literal_block>
                <index entries="['single',\ u'dimensions\ (bgl.Buffer\ attribute)',\ u'bgl.Buffer.dimensions',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Buffer" first="False" fullname="Buffer.dimensions" ids="bgl.Buffer.dimensions" module="bgl" names="bgl.Buffer.dimensions"><desc_name xml:space="preserve">dimensions</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The number of dimensions of the Buffer.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'to_list()\ (bgl.Buffer\ method)',\ u'bgl.Buffer.to_list',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Buffer" first="False" fullname="Buffer.to_list" ids="bgl.Buffer.to_list" module="bgl" names="bgl.Buffer.to_list"><desc_name xml:space="preserve">to_list</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>The contents of the Buffer as a python list.</paragraph>
                    </desc_content>
                </desc>
                <index entries=""></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature first="False"><desc_name xml:space="preserve">__init__(type, dimensions, template = None):</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>This will create a new Buffer object for use with other bgl OpenGL commands.
                            Only the type of argument to store in the buffer and the dimensions of the buffer
                            are necessary. Buffers are zeroed by default unless a template is supplied, in
                            which case the buffer is initialized to the template.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">type</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The format to store data in. The type should be one of
                                                GL_BYTE, GL_SHORT, GL_INT, or GL_FLOAT.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">dimensions</literal_strong> (<literal_emphasis>An int</literal_emphasis><literal_emphasis> or </literal_emphasis><literal_emphasis>sequence object specifying the dimensions of the buffer.</literal_emphasis>) – If the dimensions are specified as an int a linear array will
                                                be created for the buffer. If a sequence is passed for the dimensions, the buffer
                                                becomes n-Dimensional, where n is equal to the number of parameters passed in the
                                                sequence. Example: [256,2] is a two- dimensional buffer while [256,256,4] creates
                                                a three- dimensional buffer. You can think of each additional dimension as a sub-item
                                                of the dimension to the left. i.e. [10,2] is a 10 element array each with 2 sub-items.
                                                [(0,0), (0,1), (1,0), (1,1), (2,0), …] etc.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">template</literal_strong> (<literal_emphasis>A python sequence object</literal_emphasis><literal_emphasis> (</literal_emphasis><literal_emphasis>optional</literal_emphasis><literal_emphasis>)</literal_emphasis>) – A sequence of matching dimensions which will be used to initialize
                                                the Buffer. If a template is not passed in all fields will be initialized to 0.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>Buffer object</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The newly created buffer as a PyObject.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
    </section>
</document>
