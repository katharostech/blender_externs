<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/bpy.types.Menu.rst">
    <section ids="module-bpy.types menu-bpy-struct" names="menu(bpy_struct)">
        <title>Menu(bpy_struct)</title>
        <index entries="['single',\ u'bpy.types\ (module)',\ u'module-bpy.types',\ '',\ None]"></index>
        <section ids="basic-menu-example" names="basic\ menu\ example">
            <title>Basic Menu Example</title>
            <paragraph>Here is an example of a simple menu. Menus differ from panels in that they must
                reference from a header, panel or another menu.</paragraph>
            <paragraph>Notice the ‘CATEGORY_MT_name’ in  <reference internal="True" refid="bpy.types.Menu.bl_idname" reftitle="bpy.types.Menu.bl_idname"><literal classes="xref py py-class">Menu.bl_idname</literal></reference>, this is a naming
                convention for menus.</paragraph>
            <note>
                <paragraph>Menu subclasses must be registered before referencing them from blender.</paragraph>
            </note>
            <note>
                <paragraph>Menus have their <literal classes="xref py py-class">Layout.operator_context</literal> initialized as
                    ‘EXEC_REGION_WIN’ rather than ‘INVOKE_DEFAULT’ (see <reference internal="True" refuri="bpy.ops#operator-execution-context"><inline classes="std std-ref">Execution Context</inline></reference>).
                    If the operator context needs to initialize inputs from the
                    <reference internal="True" reftitle="bpy.types.Operator.invoke" refuri="bpy.types.Operator#bpy.types.Operator.invoke"><literal classes="xref py py-class">Operator.invoke</literal></reference> function, then this needs to be explicitly set.</paragraph>
            </note>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.types.Menu.py" xml:space="preserve">import bpy


class BasicMenu(bpy.types.Menu):
    bl_idname = "OBJECT_MT_select_test"
    bl_label = "Select"

    def draw(self, context):
        layout = self.layout

        layout.operator("object.select_all", text="Select/Deselect All").action = 'TOGGLE'
        layout.operator("object.select_all", text="Inverse").action = 'INVERT'
        layout.operator("object.select_random", text="Random")


bpy.utils.register_class(BasicMenu)

# test call to display immediately.
bpy.ops.wm.call_menu(name="OBJECT_MT_select_test")
</literal_block>
        </section>
        <section ids="submenus" names="submenus">
            <title>Submenus</title>
            <paragraph>This menu demonstrates some different functions.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.types.Menu.1.py" xml:space="preserve">import bpy


class SubMenu(bpy.types.Menu):
    bl_idname = "OBJECT_MT_select_submenu"
    bl_label = "Select"

    def draw(self, context):
        layout = self.layout

        layout.operator("object.select_all", text="Select/Deselect All").action = 'TOGGLE'
        layout.operator("object.select_all", text="Inverse").action = 'INVERT'
        layout.operator("object.select_random", text="Random")

        # access this operator as a submenu
        layout.operator_menu_enum("object.select_by_type", "type", text="Select All by Type...")

        layout.separator()

        # expand each operator option into this menu
        layout.operator_enum("object.lamp_add", "type")

        layout.separator()

        # use existing memu
        layout.menu("VIEW3D_MT_transform")


bpy.utils.register_class(SubMenu)

# test call to display immediately.
bpy.ops.wm.call_menu(name="OBJECT_MT_select_submenu")
</literal_block>
        </section>
        <section ids="extending-menus" names="extending\ menus">
            <title>Extending Menus</title>
            <paragraph>When creating menus for add-ons you can’t reference menus
                in Blender’s default scripts.
                Instead, the add-on can add menu items to existing menus.</paragraph>
            <paragraph>The function menu_draw acts like <reference internal="True" refid="bpy.types.Menu.draw" reftitle="bpy.types.Menu.draw"><literal classes="xref py py-class">Menu.draw</literal></reference>.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.types.Menu.2.py" xml:space="preserve">import bpy


def menu_draw(self, context):
    self.layout.operator("wm.save_homefile")


bpy.types.TOPBAR_MT_file.append(menu_draw)
</literal_block>
        </section>
        <section ids="preset-menus" names="preset\ menus">
            <title>Preset Menus</title>
            <paragraph>Preset menus are simply a convention that uses a menu sub-class
                to perform the common task of managing presets.</paragraph>
            <paragraph>This example shows how you can add a preset menu.</paragraph>
            <paragraph>This example uses the object display options,
                however you can use properties defined by your own scripts too.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.types.Menu.3.py" xml:space="preserve">
import bpy
from bpy.types import Operator, Menu
from bl_operators.presets import AddPresetBase


class OBJECT_MT_display_presets(Menu):
    bl_label = "Object Display Presets"
    preset_subdir = "object/display"
    preset_operator = "script.execute_preset"
    display = Menu.display_preset


class AddPresetObjectDisplay(AddPresetBase, Operator):
    '''Add a Object Display Preset'''
    bl_idname = "camera.object_display_preset_add"
    bl_label = "Add Object Display Preset"
    preset_menu = "OBJECT_MT_display_presets"

    # variable used for all preset values
    preset_defines = [
        "obj = bpy.context.object"
    ]

    # properties to store in the preset
    preset_values = [
        "obj.display_type",
        "obj.show_bounds",
        "obj.display_bounds_type",
        "obj.show_name",
        "obj.show_axis",
        "obj.show_wire",
    ]

    # where to store the preset
    preset_subdir = "object/display"


# Display into an existing panel
def panel_func(self, context):
    layout = self.layout

    row = layout.row(align=True)
    row.menu(OBJECT_MT_display_presets.__name__, text=OBJECT_MT_display_presets.bl_label)
    row.operator(AddPresetObjectDisplay.bl_idname, text="", icon='ZOOMIN')
    row.operator(AddPresetObjectDisplay.bl_idname, text="", icon='ZOOMOUT').remove_active = True


classes = (
    OBJECT_MT_display_presets,
    AddPresetObjectDisplay,
)


def register():
    for cls in classes:
        bpy.utils.register_class(cls)
    bpy.types.OBJECT_PT_display.prepend(panel_func)


def unregister():
    for cls in classes:
        bpy.utils.unregister_class(cls)
    bpy.types.OBJECT_PT_display.remove(panel_func)


if __name__ == "__main__":
    register()
</literal_block>
        </section>
        <section ids="extending-the-button-context-menu" names="extending\ the\ button\ context\ menu">
            <title>Extending the Button Context Menu</title>
            <paragraph>This example enables you to insert your own menu entry into the common
                right click menu that you get while hovering over a value field,
                color, string, etc.</paragraph>
            <paragraph>To make the example work, you have to first select an object
                then right click on an user interface element (maybe a color in the
                material properties) and choose <emphasis>Execute Custom Action</emphasis>.</paragraph>
            <paragraph>Executing the operator will then print all values.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.types.Menu.4.py" xml:space="preserve">
import bpy
from bpy.types import Menu


def dump(obj, text):
    for attr in dir(obj):
        print("%r.%s = %s" % (obj, attr, getattr(obj, attr)))


class WM_OT_button_context_test(bpy.types.Operator):
    """Right click entry test"""
    bl_idname = "wm.button_context_test"
    bl_label = "Run Context Test"

    @classmethod
    def poll(cls, context):
        return context.active_object is not None

    def execute(self, context):
        value = getattr(context, "button_pointer", None)
        if value is not None:
            dump(value, "button_pointer")

        value = getattr(context, "button_prop", None)
        if value is not None:
            dump(value, "button_prop")

        value = getattr(context, "button_operator", None)
        if value is not None:
            dump(value, "button_operator")

        return {'FINISHED'}


# This class has to be exactly named like that to insert an entry in the right click menu
class WM_MT_button_context(Menu):
    bl_label = "Unused"

    def draw(self, context):
        pass


def menu_func(self, context):
    layout = self.layout
    layout.separator()
    layout.operator(WM_OT_button_context_test.bl_idname)


classes = (
    WM_OT_button_context_test,
    WM_MT_button_context,
)


def register():
    for cls in classes:
        bpy.utils.register_class(cls)
    bpy.types.WM_MT_button_context.append(menu_func)


def unregister():
    for cls in classes:
        bpy.utils.unregister_class(cls)
    bpy.types.WM_MT_button_context.remove(menu_func)


if __name__ == "__main__":
    register()
</literal_block>
            <paragraph>base class — <reference internal="True" reftitle="bpy.types.bpy_struct" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct"><literal classes="xref py py-class">bpy_struct</literal></reference></paragraph>
            <index entries="['single',\ u'Menu\ (class\ in\ bpy.types)',\ u'bpy.types.Menu',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="Menu" ids="bpy.types.Menu" module="bpy.types" names="bpy.types.Menu"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bpy.types.</desc_addname><desc_name xml:space="preserve">Menu</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bpy_struct</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Editor menu containing buttons</paragraph>
                    <index entries="['single',\ u'bl_description\ (bpy.types.Menu\ attribute)',\ u'bpy.types.Menu.bl_description',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Menu" first="False" fullname="Menu.bl_description" ids="bpy.types.Menu.bl_description" module="bpy.types" names="bpy.types.Menu.bl_description"><desc_name xml:space="preserve">bl_description</desc_name></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “”</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_idname\ (bpy.types.Menu\ attribute)',\ u'bpy.types.Menu.bl_idname',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Menu" first="False" fullname="Menu.bl_idname" ids="bpy.types.Menu.bl_idname" module="bpy.types" names="bpy.types.Menu.bl_idname"><desc_name xml:space="preserve">bl_idname</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>If this is set, the menu gets a custom ID, otherwise it takes the name of the class used to define the menu (for example, if the class name is “OBJECT_MT_hello”, and bl_idname is not set by the script, then bl_idname = “OBJECT_MT_hello”)</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “”, (never None)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_label\ (bpy.types.Menu\ attribute)',\ u'bpy.types.Menu.bl_label',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Menu" first="False" fullname="Menu.bl_label" ids="bpy.types.Menu.bl_label" module="bpy.types" names="bpy.types.Menu.bl_label"><desc_name xml:space="preserve">bl_label</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The menu label</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “”, (never None)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_owner_id\ (bpy.types.Menu\ attribute)',\ u'bpy.types.Menu.bl_owner_id',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Menu" first="False" fullname="Menu.bl_owner_id" ids="bpy.types.Menu.bl_owner_id" module="bpy.types" names="bpy.types.Menu.bl_owner_id"><desc_name xml:space="preserve">bl_owner_id</desc_name></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “”, (never None)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_translation_context\ (bpy.types.Menu\ attribute)',\ u'bpy.types.Menu.bl_translation_context',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Menu" first="False" fullname="Menu.bl_translation_context" ids="bpy.types.Menu.bl_translation_context" module="bpy.types" names="bpy.types.Menu.bl_translation_context"><desc_name xml:space="preserve">bl_translation_context</desc_name></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “*”, (never None)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'Menu.layout\ (in\ module\ bpy.types)',\ u'bpy.types.Menu.layout',\ '',\ None]"></index>
                    <desc desctype="data" domain="py" noindex="False" objtype="data">
                        <desc_signature class="Menu" first="False" fullname="Menu.layout" ids="bpy.types.Menu.layout" module="bpy.types" names="bpy.types.Menu.layout"><desc_name xml:space="preserve">layout</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Defines the structure of the menu in the UI</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="bpy.types.UILayout" refuri="bpy.types.UILayout#bpy.types.UILayout"><literal classes="xref py py-class">UILayout</literal></reference>, (readonly)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'poll()\ (bpy.types.Menu\ class\ method)',\ u'bpy.types.Menu.poll',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="Menu" first="False" fullname="Menu.poll" ids="bpy.types.Menu.poll" module="bpy.types" names="bpy.types.Menu.poll"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">poll</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>If this method returns a non-null output, then the menu can be drawn</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'draw()\ (bpy.types.Menu\ method)',\ u'bpy.types.Menu.draw',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Menu" first="False" fullname="Menu.draw" ids="bpy.types.Menu.draw" module="bpy.types" names="bpy.types.Menu.draw"><desc_name xml:space="preserve">draw</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Draw UI elements into the menu UI layout</paragraph>
                            <field_list>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'draw_preset()\ (bpy.types.Menu\ method)',\ u'bpy.types.Menu.draw_preset',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Menu" first="False" fullname="Menu.draw_preset" ids="bpy.types.Menu.draw_preset" module="bpy.types" names="bpy.types.Menu.draw_preset"><desc_name xml:space="preserve">draw_preset</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Define these on the subclass:
                                - preset_operator (string)
                                - preset_subdir (string)</paragraph>
                            <paragraph>Optionally:
                                - preset_add_operator (string)
                                - preset_extensions (set of strings)
                                - preset_operator_defaults (dict of keyword args)</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'path_menu()\ (bpy.types.Menu\ method)',\ u'bpy.types.Menu.path_menu',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Menu" first="False" fullname="Menu.path_menu" ids="bpy.types.Menu.path_menu" module="bpy.types" names="bpy.types.Menu.path_menu"><desc_name xml:space="preserve">path_menu</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">searchpaths</desc_parameter><desc_parameter xml:space="preserve">operator</desc_parameter><desc_parameter xml:space="preserve">*</desc_parameter><desc_parameter xml:space="preserve">props_default=None</desc_parameter><desc_parameter xml:space="preserve">prop_filepath='filepath'</desc_parameter><desc_parameter xml:space="preserve">filter_ext=None</desc_parameter><desc_parameter xml:space="preserve">filter_path=None</desc_parameter><desc_parameter xml:space="preserve">display_name=None</desc_parameter><desc_parameter xml:space="preserve">add_operator=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Populate a menu from a list of paths.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">searchpaths</literal_strong> (<literal_emphasis>sequence of strings.</literal_emphasis>) – Paths to scan.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">operator</literal_strong> (<literal_emphasis>string</literal_emphasis>) – The operator id to use with each file.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">prop_filepath</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Optional operator filepath property (defaults to “filepath”).</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">props_default</literal_strong> (<literal_emphasis>dict</literal_emphasis>) – Properties to assign to each operator.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">filter_ext</literal_strong> (<literal_emphasis>Callable that takes a string and returns a bool.</literal_emphasis>) – <paragraph>Optional callback that takes the file extensions.</paragraph><paragraph>Returning false excludes the file from the list.</paragraph></paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">display_name</literal_strong> (<literal_emphasis>Callable that takes a string and returns a string.</literal_emphasis>) – Optional callback that takes the full path, returns the name to display.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_rna_get_subclass()\ (bpy.types.Menu\ class\ method)',\ u'bpy.types.Menu.bl_rna_get_subclass',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="Menu" first="False" fullname="Menu.bl_rna_get_subclass" ids="bpy.types.Menu.bl_rna_get_subclass" module="bpy.types" names="bpy.types.Menu.bl_rna_get_subclass"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">bl_rna_get_subclass</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">default=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">id</literal_strong> (<literal_emphasis>string</literal_emphasis>) – The RNA type identifier.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The RNA type or default when not found.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="bpy.types.Struct" refuri="bpy.types.Struct#bpy.types.Struct"><literal classes="xref py py-class">bpy.types.Struct</literal></reference> subclass</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_rna_get_subclass_py()\ (bpy.types.Menu\ class\ method)',\ u'bpy.types.Menu.bl_rna_get_subclass_py',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="Menu" first="False" fullname="Menu.bl_rna_get_subclass_py" ids="bpy.types.Menu.bl_rna_get_subclass_py" module="bpy.types" names="bpy.types.Menu.bl_rna_get_subclass_py"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">bl_rna_get_subclass_py</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">default=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">id</literal_strong> (<literal_emphasis>string</literal_emphasis>) – The RNA type identifier.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The class or default when not found.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>type</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <rubric>Inherited Properties</rubric>
            <hlist>
                <hlistcol>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.id_data" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.id_data"><literal classes="xref py py-class">bpy_struct.id_data</literal></reference></paragraph>
                        </list_item>
                    </bullet_list>
                </hlistcol>
                <hlistcol>
                    <bullet_list>
                    </bullet_list>
                </hlistcol>
            </hlist>
            <rubric>Inherited Functions</rubric>
            <hlist>
                <hlistcol>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.as_pointer" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.as_pointer"><literal classes="xref py py-class">bpy_struct.as_pointer</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.driver_add" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.driver_add"><literal classes="xref py py-class">bpy_struct.driver_add</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.driver_remove" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.driver_remove"><literal classes="xref py py-class">bpy_struct.driver_remove</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.get" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.get"><literal classes="xref py py-class">bpy_struct.get</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_hidden" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_hidden"><literal classes="xref py py-class">bpy_struct.is_property_hidden</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_overridable_static" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_overridable_static"><literal classes="xref py py-class">bpy_struct.is_property_overridable_static</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_readonly" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_readonly"><literal classes="xref py py-class">bpy_struct.is_property_readonly</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_set" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_set"><literal classes="xref py py-class">bpy_struct.is_property_set</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.items" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.items"><literal classes="xref py py-class">bpy_struct.items</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keyframe_delete" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keyframe_delete"><literal classes="xref py py-class">bpy_struct.keyframe_delete</literal></reference></paragraph>
                        </list_item>
                    </bullet_list>
                </hlistcol>
                <hlistcol>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keyframe_insert" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keyframe_insert"><literal classes="xref py py-class">bpy_struct.keyframe_insert</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keys" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keys"><literal classes="xref py py-class">bpy_struct.keys</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.path_from_id" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.path_from_id"><literal classes="xref py py-class">bpy_struct.path_from_id</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.path_resolve" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.path_resolve"><literal classes="xref py py-class">bpy_struct.path_resolve</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.pop" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.pop"><literal classes="xref py py-class">bpy_struct.pop</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.property_overridable_static_set" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.property_overridable_static_set"><literal classes="xref py py-class">bpy_struct.property_overridable_static_set</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.property_unset" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.property_unset"><literal classes="xref py py-class">bpy_struct.property_unset</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.type_recast" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.type_recast"><literal classes="xref py py-class">bpy_struct.type_recast</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.values" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.values"><literal classes="xref py py-class">bpy_struct.values</literal></reference></paragraph>
                        </list_item>
                    </bullet_list>
                </hlistcol>
            </hlist>
        </section>
    </section>
</document>
