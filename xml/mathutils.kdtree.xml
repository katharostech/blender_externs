<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/mathutils.kdtree.rst">
    <section ids="module-mathutils.kdtree kdtree-utilities-mathutils-kdtree" names="kdtree\ utilities\ (mathutils.kdtree)">
        <title>KDTree Utilities (mathutils.kdtree)</title>
        <index entries="['single',\ u'mathutils.kdtree\ (module)',\ u'module-mathutils.kdtree',\ '',\ None]"></index>
        <paragraph>Generic 3-dimentional kd-tree to perform spatial searches.</paragraph>
        <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/mathutils.kdtree.py" xml:space="preserve">import mathutils

# create a kd-tree from a mesh
from bpy import context
obj = context.object

# 3d cursor relative to the object data
co_find = context.scene.cursor_location * obj.matrix_world.inverted()

mesh = obj.data
size = len(mesh.vertices)
kd = mathutils.kdtree.KDTree(size)

for i, v in enumerate(mesh.vertices):
    kd.insert(v.co, i)

kd.balance()


# Find the closest point to the center
co_find = (0.0, 0.0, 0.0)
co, index, dist = kd.find(co_find)
print("Close to center:", co, index, dist)


# Find the closest 10 points to the 3d cursor
print("Close 10 points")
for (co, index, dist) in kd.find_n(co_find, 10):
    print("    ", co, index, dist)


# Find points within a radius of the 3d cursor
print("Close points within 0.5 distance")
co_find = context.scene.cursor_location
for (co, index, dist) in kd.find_range(co_find, 0.5):
    print("    ", co, index, dist)
</literal_block>
        <index entries="['single',\ u'KDTree\ (class\ in\ mathutils.kdtree)',\ u'mathutils.kdtree.KDTree',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="KDTree" ids="mathutils.kdtree.KDTree" module="mathutils.kdtree" names="mathutils.kdtree.KDTree"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">mathutils.kdtree.</desc_addname><desc_name xml:space="preserve">KDTree</desc_name></desc_signature>
            <desc_content>
                <paragraph>KdTree(size) -&gt; new kd-tree initialized to hold <literal>size</literal> items.</paragraph>
                <note>
                    <paragraph><reference internal="True" refid="mathutils.kdtree.KDTree.balance" reftitle="mathutils.kdtree.KDTree.balance"><literal classes="xref py py-class">KDTree.balance</literal></reference> must have been called before using any of the <literal>find</literal> methods.</paragraph>
                </note>
                <index entries="['single',\ u'balance()\ (mathutils.kdtree.KDTree\ method)',\ u'mathutils.kdtree.KDTree.balance',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="KDTree" first="False" fullname="KDTree.balance" ids="mathutils.kdtree.KDTree.balance" module="mathutils.kdtree" names="mathutils.kdtree.KDTree.balance"><desc_name xml:space="preserve">balance</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Balance the tree.</paragraph>
                    </desc_content>
                </desc>
                <note>
                    <paragraph>This builds the entire tree, avoid calling after each insertion.</paragraph>
                </note>
                <index entries="['single',\ u'find()\ (mathutils.kdtree.KDTree\ method)',\ u'mathutils.kdtree.KDTree.find',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="KDTree" first="False" fullname="KDTree.find" ids="mathutils.kdtree.KDTree.find" module="mathutils.kdtree" names="mathutils.kdtree.KDTree.find"><desc_name xml:space="preserve">find</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">co</desc_parameter><desc_parameter xml:space="preserve">filter=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Find nearest point to <literal>co</literal>.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">co</literal_strong> (<literal_emphasis>float triplet</literal_emphasis>) – 3d coordinates.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">filter</literal_strong> (<literal_emphasis>callable</literal_emphasis>) – function which takes an index and returns True for indices to include in the search.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>Returns (<literal classes="xref py py-class">Vector</literal>, index, distance).</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><literal classes="xref py py-class">tuple</literal></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'find_n()\ (mathutils.kdtree.KDTree\ method)',\ u'mathutils.kdtree.KDTree.find_n',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="KDTree" first="False" fullname="KDTree.find_n" ids="mathutils.kdtree.KDTree.find_n" module="mathutils.kdtree" names="mathutils.kdtree.KDTree.find_n"><desc_name xml:space="preserve">find_n</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">co</desc_parameter><desc_parameter xml:space="preserve">n</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Find nearest <literal>n</literal> points to <literal>co</literal>.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">co</literal_strong> (<literal_emphasis>float triplet</literal_emphasis>) – 3d coordinates.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">n</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Number of points to find.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>Returns a list of tuples (<literal classes="xref py py-class">Vector</literal>, index, distance).</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><literal classes="xref py py-class">list</literal></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'find_range()\ (mathutils.kdtree.KDTree\ method)',\ u'mathutils.kdtree.KDTree.find_range',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="KDTree" first="False" fullname="KDTree.find_range" ids="mathutils.kdtree.KDTree.find_range" module="mathutils.kdtree" names="mathutils.kdtree.KDTree.find_range"><desc_name xml:space="preserve">find_range</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">co</desc_parameter><desc_parameter xml:space="preserve">radius</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Find all points within <literal>radius</literal> of <literal>co</literal>.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">co</literal_strong> (<literal_emphasis>float triplet</literal_emphasis>) – 3d coordinates.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">radius</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Distance to search for points.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>Returns a list of tuples (<literal classes="xref py py-class">Vector</literal>, index, distance).</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><literal classes="xref py py-class">list</literal></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'insert()\ (mathutils.kdtree.KDTree\ method)',\ u'mathutils.kdtree.KDTree.insert',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="KDTree" first="False" fullname="KDTree.insert" ids="mathutils.kdtree.KDTree.insert" module="mathutils.kdtree" names="mathutils.kdtree.KDTree.insert"><desc_name xml:space="preserve">insert</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">co</desc_parameter><desc_parameter xml:space="preserve">index</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Insert a point into the KDTree.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">co</literal_strong> (<literal_emphasis>float triplet</literal_emphasis>) – Point 3d position.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">index</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The index of the point.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
    </section>
</document>
