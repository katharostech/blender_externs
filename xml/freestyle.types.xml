<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/freestyle.types.rst">
    <section ids="module-freestyle.types freestyle-types-freestyle-types" names="freestyle\ types\ (freestyle.types)">
        <title>Freestyle Types (freestyle.types)</title>
        <index entries="['single',\ u'freestyle.types\ (module)',\ u'module-freestyle.types',\ '',\ None]"></index>
        <paragraph>This module contains core classes of the Freestyle Python API,
            including data types of view map components (0D and 1D elements), base
            classes for user-defined line stylization rules (predicates,
            functions, chaining iterators, and stroke shaders), and operators.</paragraph>
        <paragraph>Class hierarchy:</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.BBox" reftitle="freestyle.types.BBox"><literal classes="xref py py-class">BBox</literal></reference></paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.BinaryPredicate0D" reftitle="freestyle.types.BinaryPredicate0D"><literal classes="xref py py-class">BinaryPredicate0D</literal></reference></paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.BinaryPredicate1D" reftitle="freestyle.types.BinaryPredicate1D"><literal classes="xref py py-class">BinaryPredicate1D</literal></reference></paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.Id" reftitle="freestyle.types.Id"><literal classes="xref py py-class">Id</literal></reference></paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.Interface0D" reftitle="freestyle.types.Interface0D"><literal classes="xref py py-class">Interface0D</literal></reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.CurvePoint" reftitle="freestyle.types.CurvePoint"><literal classes="xref py py-class">CurvePoint</literal></reference></paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph><reference internal="True" refid="freestyle.types.StrokeVertex" reftitle="freestyle.types.StrokeVertex"><literal classes="xref py py-class">StrokeVertex</literal></reference></paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.ViewVertex" reftitle="freestyle.types.ViewVertex"><literal classes="xref py py-class">ViewVertex</literal></reference></paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph><reference internal="True" refid="freestyle.types.NonTVertex" reftitle="freestyle.types.NonTVertex"><literal classes="xref py py-class">NonTVertex</literal></reference></paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><reference internal="True" refid="freestyle.types.TVertex" reftitle="freestyle.types.TVertex"><literal classes="xref py py-class">TVertex</literal></reference></paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </bullet_list>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.Curve" reftitle="freestyle.types.Curve"><literal classes="xref py py-class">Curve</literal></reference></paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph><reference internal="True" refid="freestyle.types.Chain" reftitle="freestyle.types.Chain"><literal classes="xref py py-class">Chain</literal></reference></paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.FEdge" reftitle="freestyle.types.FEdge"><literal classes="xref py py-class">FEdge</literal></reference></paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph><reference internal="True" refid="freestyle.types.FEdgeSharp" reftitle="freestyle.types.FEdgeSharp"><literal classes="xref py py-class">FEdgeSharp</literal></reference></paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><reference internal="True" refid="freestyle.types.FEdgeSmooth" reftitle="freestyle.types.FEdgeSmooth"><literal classes="xref py py-class">FEdgeSmooth</literal></reference></paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.Stroke" reftitle="freestyle.types.Stroke"><literal classes="xref py py-class">Stroke</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference></paragraph>
                    </list_item>
                </bullet_list>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.Iterator" reftitle="freestyle.types.Iterator"><literal classes="xref py py-class">Iterator</literal></reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.AdjacencyIterator" reftitle="freestyle.types.AdjacencyIterator"><literal classes="xref py py-class">AdjacencyIterator</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.CurvePointIterator" reftitle="freestyle.types.CurvePointIterator"><literal classes="xref py py-class">CurvePointIterator</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.SVertexIterator" reftitle="freestyle.types.SVertexIterator"><literal classes="xref py py-class">SVertexIterator</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.StrokeVertexIterator" reftitle="freestyle.types.StrokeVertexIterator"><literal classes="xref py py-class">StrokeVertexIterator</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.ViewEdgeIterator" reftitle="freestyle.types.ViewEdgeIterator"><literal classes="xref py py-class">ViewEdgeIterator</literal></reference></paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph><reference internal="True" refid="freestyle.types.ChainingIterator" reftitle="freestyle.types.ChainingIterator"><literal classes="xref py py-class">ChainingIterator</literal></reference></paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.orientedViewEdgeIterator" reftitle="freestyle.types.orientedViewEdgeIterator"><literal classes="xref py py-class">orientedViewEdgeIterator</literal></reference></paragraph>
                    </list_item>
                </bullet_list>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.Material" reftitle="freestyle.types.Material"><literal classes="xref py py-class">Material</literal></reference></paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.Noise" reftitle="freestyle.types.Noise"><literal classes="xref py py-class">Noise</literal></reference></paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.Operators" reftitle="freestyle.types.Operators"><literal classes="xref py py-class">Operators</literal></reference></paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.SShape" reftitle="freestyle.types.SShape"><literal classes="xref py py-class">SShape</literal></reference></paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.StrokeAttribute" reftitle="freestyle.types.StrokeAttribute"><literal classes="xref py py-class">StrokeAttribute</literal></reference></paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.StrokeShader" reftitle="freestyle.types.StrokeShader"><literal classes="xref py py-class">StrokeShader</literal></reference></paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0D" reftitle="freestyle.types.UnaryFunction0D"><literal classes="xref py py-class">UnaryFunction0D</literal></reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0DDouble" reftitle="freestyle.types.UnaryFunction0DDouble"><literal classes="xref py py-class">UnaryFunction0DDouble</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0DEdgeNature" reftitle="freestyle.types.UnaryFunction0DEdgeNature"><literal classes="xref py py-class">UnaryFunction0DEdgeNature</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0DFloat" reftitle="freestyle.types.UnaryFunction0DFloat"><literal classes="xref py py-class">UnaryFunction0DFloat</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0DId" reftitle="freestyle.types.UnaryFunction0DId"><literal classes="xref py py-class">UnaryFunction0DId</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0DMaterial" reftitle="freestyle.types.UnaryFunction0DMaterial"><literal classes="xref py py-class">UnaryFunction0DMaterial</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0DUnsigned" reftitle="freestyle.types.UnaryFunction0DUnsigned"><literal classes="xref py py-class">UnaryFunction0DUnsigned</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0DVec2f" reftitle="freestyle.types.UnaryFunction0DVec2f"><literal classes="xref py py-class">UnaryFunction0DVec2f</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0DVec3f" reftitle="freestyle.types.UnaryFunction0DVec3f"><literal classes="xref py py-class">UnaryFunction0DVec3f</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0DVectorViewShape" reftitle="freestyle.types.UnaryFunction0DVectorViewShape"><literal classes="xref py py-class">UnaryFunction0DVectorViewShape</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0DViewShape" reftitle="freestyle.types.UnaryFunction0DViewShape"><literal classes="xref py py-class">UnaryFunction0DViewShape</literal></reference></paragraph>
                    </list_item>
                </bullet_list>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction1D" reftitle="freestyle.types.UnaryFunction1D"><literal classes="xref py py-class">UnaryFunction1D</literal></reference></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction1DDouble" reftitle="freestyle.types.UnaryFunction1DDouble"><literal classes="xref py py-class">UnaryFunction1DDouble</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction1DEdgeNature" reftitle="freestyle.types.UnaryFunction1DEdgeNature"><literal classes="xref py py-class">UnaryFunction1DEdgeNature</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction1DFloat" reftitle="freestyle.types.UnaryFunction1DFloat"><literal classes="xref py py-class">UnaryFunction1DFloat</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction1DUnsigned" reftitle="freestyle.types.UnaryFunction1DUnsigned"><literal classes="xref py py-class">UnaryFunction1DUnsigned</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction1DVec2f" reftitle="freestyle.types.UnaryFunction1DVec2f"><literal classes="xref py py-class">UnaryFunction1DVec2f</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction1DVec3f" reftitle="freestyle.types.UnaryFunction1DVec3f"><literal classes="xref py py-class">UnaryFunction1DVec3f</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction1DVectorViewShape" reftitle="freestyle.types.UnaryFunction1DVectorViewShape"><literal classes="xref py py-class">UnaryFunction1DVectorViewShape</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction1DVoid" reftitle="freestyle.types.UnaryFunction1DVoid"><literal classes="xref py py-class">UnaryFunction1DVoid</literal></reference></paragraph>
                    </list_item>
                </bullet_list>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.UnaryPredicate0D" reftitle="freestyle.types.UnaryPredicate0D"><literal classes="xref py py-class">UnaryPredicate0D</literal></reference></paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.UnaryPredicate1D" reftitle="freestyle.types.UnaryPredicate1D"><literal classes="xref py py-class">UnaryPredicate1D</literal></reference></paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.ViewMap" reftitle="freestyle.types.ViewMap"><literal classes="xref py py-class">ViewMap</literal></reference></paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.ViewShape" reftitle="freestyle.types.ViewShape"><literal classes="xref py py-class">ViewShape</literal></reference></paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.IntegrationType" reftitle="freestyle.types.IntegrationType"><literal classes="xref py py-class">IntegrationType</literal></reference></paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.MediumType" reftitle="freestyle.types.MediumType"><literal classes="xref py py-class">MediumType</literal></reference></paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refid="freestyle.types.Nature" reftitle="freestyle.types.Nature"><literal classes="xref py py-class">Nature</literal></reference></paragraph>
            </list_item>
        </bullet_list>
        <index entries="['single',\ u'AdjacencyIterator\ (class\ in\ freestyle.types)',\ u'freestyle.types.AdjacencyIterator',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="AdjacencyIterator" ids="freestyle.types.AdjacencyIterator" module="freestyle.types" names="freestyle.types.AdjacencyIterator"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">AdjacencyIterator</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Iterator" reftitle="freestyle.types.Iterator"><literal classes="xref py py-class">Iterator</literal></reference> &gt; <reference internal="True" refid="freestyle.types.AdjacencyIterator" reftitle="freestyle.types.AdjacencyIterator"><literal classes="xref py py-class">AdjacencyIterator</literal></reference></paragraph>
                <paragraph>Class for representing adjacency iterators used in the chaining
                    process.  An AdjacencyIterator is created in the increment() and
                    decrement() methods of a <reference internal="True" refid="freestyle.types.ChainingIterator" reftitle="freestyle.types.ChainingIterator"><literal classes="xref py py-class">ChainingIterator</literal></reference> and passed to the
                    traverse() method of the ChainingIterator.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.AdjacencyIterator\ method)',\ u'freestyle.types.AdjacencyIterator.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="AdjacencyIterator" first="False" fullname="AdjacencyIterator.__init__" ids="freestyle.types.AdjacencyIterator.__init__" module="freestyle.types" names="freestyle.types.AdjacencyIterator.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.AdjacencyIterator\ method)',\ u'freestyle.types.AdjacencyIterator.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="AdjacencyIterator" first="False" fullname="AdjacencyIterator.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<reference internal="True" refid="freestyle.types.AdjacencyIterator" reftitle="freestyle.types.AdjacencyIterator"><literal classes="xref py py-class">AdjacencyIterator</literal></reference>) – An AdjacencyIterator object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.AdjacencyIterator\ method)',\ u'freestyle.types.AdjacencyIterator.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="AdjacencyIterator" first="False" fullname="AdjacencyIterator.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">vertex</desc_parameter><desc_parameter xml:space="preserve">restrict_to_selection=True</desc_parameter><desc_parameter xml:space="preserve">restrict_to_unvisited=True</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a AdjacencyIterator object.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">vertex</literal_strong> (<reference internal="True" refid="freestyle.types.ViewVertex" reftitle="freestyle.types.ViewVertex"><literal classes="xref py py-class">ViewVertex</literal></reference>) – The vertex which is the next crossing.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">restrict_to_selection</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Indicates whether to force the chaining
                                                to stay within the set of selected ViewEdges or not.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">restrict_to_unvisited</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Indicates whether a ViewEdge that has
                                                already been chained must be ignored ot not.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'is_incoming\ (freestyle.types.AdjacencyIterator\ attribute)',\ u'freestyle.types.AdjacencyIterator.is_incoming',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="AdjacencyIterator" first="False" fullname="AdjacencyIterator.is_incoming" ids="freestyle.types.AdjacencyIterator.is_incoming" module="freestyle.types" names="freestyle.types.AdjacencyIterator.is_incoming"><desc_name xml:space="preserve">is_incoming</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>True if the current ViewEdge is coming towards the iteration vertex, and
                            False otherwise.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'object\ (freestyle.types.AdjacencyIterator\ attribute)',\ u'freestyle.types.AdjacencyIterator.object',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="AdjacencyIterator" first="False" fullname="AdjacencyIterator.object" ids="freestyle.types.AdjacencyIterator.object" module="freestyle.types" names="freestyle.types.AdjacencyIterator.object"><desc_name xml:space="preserve">object</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The ViewEdge object currently pointed to by this iterator.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'BBox\ (class\ in\ freestyle.types)',\ u'freestyle.types.BBox',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="BBox" ids="freestyle.types.BBox" module="freestyle.types" names="freestyle.types.BBox"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">BBox</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class for representing a bounding box.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.BBox\ method)',\ u'freestyle.types.BBox.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BBox" first="False" fullname="BBox.__init__" ids="freestyle.types.BBox.__init__" module="freestyle.types" names="freestyle.types.BBox.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'BinaryPredicate0D\ (class\ in\ freestyle.types)',\ u'freestyle.types.BinaryPredicate0D',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="BinaryPredicate0D" ids="freestyle.types.BinaryPredicate0D" module="freestyle.types" names="freestyle.types.BinaryPredicate0D"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">BinaryPredicate0D</desc_name></desc_signature>
            <desc_content>
                <paragraph>Base class for binary predicates working on <reference internal="True" refid="freestyle.types.Interface0D" reftitle="freestyle.types.Interface0D"><literal classes="xref py py-class">Interface0D</literal></reference>
                    objects.  A BinaryPredicate0D is typically an ordering relation
                    between two Interface0D objects.  The predicate evaluates a relation
                    between the two Interface0D instances and returns a boolean value (true
                    or false).  It is used by invoking the __call__() method.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.BinaryPredicate0D\ method)',\ u'freestyle.types.BinaryPredicate0D.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BinaryPredicate0D" first="False" fullname="BinaryPredicate0D.__init__" ids="freestyle.types.BinaryPredicate0D.__init__" module="freestyle.types" names="freestyle.types.BinaryPredicate0D.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__call__()\ (freestyle.types.BinaryPredicate0D\ method)',\ u'freestyle.types.BinaryPredicate0D.__call__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BinaryPredicate0D" first="False" fullname="BinaryPredicate0D.__call__" ids="freestyle.types.BinaryPredicate0D.__call__" module="freestyle.types" names="freestyle.types.BinaryPredicate0D.__call__"><desc_name xml:space="preserve">__call__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">inter1</desc_parameter><desc_parameter xml:space="preserve">inter2</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Must be overload by inherited classes.  It evaluates a relation
                            between two Interface0D objects.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">inter1</literal_strong> (<reference internal="True" refid="freestyle.types.Interface0D" reftitle="freestyle.types.Interface0D"><literal classes="xref py py-class">Interface0D</literal></reference>) – The first Interface0D object.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">inter2</literal_strong> (<reference internal="True" refid="freestyle.types.Interface0D" reftitle="freestyle.types.Interface0D"><literal classes="xref py py-class">Interface0D</literal></reference>) – The second Interface0D object.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>True or false.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'name\ (freestyle.types.BinaryPredicate0D\ attribute)',\ u'freestyle.types.BinaryPredicate0D.name',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="BinaryPredicate0D" first="False" fullname="BinaryPredicate0D.name" ids="freestyle.types.BinaryPredicate0D.name" module="freestyle.types" names="freestyle.types.BinaryPredicate0D.name"><desc_name xml:space="preserve">name</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The name of the binary 0D predicate.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>str</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'BinaryPredicate1D\ (class\ in\ freestyle.types)',\ u'freestyle.types.BinaryPredicate1D',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="BinaryPredicate1D" ids="freestyle.types.BinaryPredicate1D" module="freestyle.types" names="freestyle.types.BinaryPredicate1D"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">BinaryPredicate1D</desc_name></desc_signature>
            <desc_content>
                <paragraph>Base class for binary predicates working on <reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference>
                    objects.  A BinaryPredicate1D is typically an ordering relation
                    between two Interface1D objects.  The predicate evaluates a relation
                    between the two Interface1D instances and returns a boolean value (true
                    or false).  It is used by invoking the __call__() method.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.BinaryPredicate1D\ method)',\ u'freestyle.types.BinaryPredicate1D.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BinaryPredicate1D" first="False" fullname="BinaryPredicate1D.__init__" ids="freestyle.types.BinaryPredicate1D.__init__" module="freestyle.types" names="freestyle.types.BinaryPredicate1D.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__call__()\ (freestyle.types.BinaryPredicate1D\ method)',\ u'freestyle.types.BinaryPredicate1D.__call__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="BinaryPredicate1D" first="False" fullname="BinaryPredicate1D.__call__" ids="freestyle.types.BinaryPredicate1D.__call__" module="freestyle.types" names="freestyle.types.BinaryPredicate1D.__call__"><desc_name xml:space="preserve">__call__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">inter1</desc_parameter><desc_parameter xml:space="preserve">inter2</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Must be overload by inherited classes. It evaluates a relation
                            between two Interface1D objects.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">inter1</literal_strong> (<reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference>) – The first Interface1D object.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">inter2</literal_strong> (<reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference>) – The second Interface1D object.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>True or false.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'name\ (freestyle.types.BinaryPredicate1D\ attribute)',\ u'freestyle.types.BinaryPredicate1D.name',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="BinaryPredicate1D" first="False" fullname="BinaryPredicate1D.name" ids="freestyle.types.BinaryPredicate1D.name" module="freestyle.types" names="freestyle.types.BinaryPredicate1D.name"><desc_name xml:space="preserve">name</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The name of the binary 1D predicate.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>str</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'Chain\ (class\ in\ freestyle.types)',\ u'freestyle.types.Chain',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Chain" ids="freestyle.types.Chain" module="freestyle.types" names="freestyle.types.Chain"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">Chain</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.Curve" reftitle="freestyle.types.Curve"><literal classes="xref py py-class">Curve</literal></reference> &gt; <reference internal="True" refid="freestyle.types.Chain" reftitle="freestyle.types.Chain"><literal classes="xref py py-class">Chain</literal></reference></paragraph>
                <paragraph>Class to represent a 1D elements issued from the chaining process.  A
                    Chain is the last step before the <reference internal="True" refid="freestyle.types.Stroke" reftitle="freestyle.types.Stroke"><literal classes="xref py py-class">Stroke</literal></reference> and is used in the
                    Splitting and Creation processes.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.Chain\ method)',\ u'freestyle.types.Chain.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Chain" first="False" fullname="Chain.__init__" ids="freestyle.types.Chain.__init__" module="freestyle.types" names="freestyle.types.Chain.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.Chain\ method)',\ u'freestyle.types.Chain.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Chain" first="False" fullname="Chain.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<reference internal="True" refid="freestyle.types.Chain" reftitle="freestyle.types.Chain"><literal classes="xref py py-class">Chain</literal></reference>) – A Chain object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.Chain\ method)',\ u'freestyle.types.Chain.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Chain" first="False" fullname="Chain.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">id</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a chain from its Id.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">id</literal_strong> (<reference internal="True" refid="freestyle.types.Id" reftitle="freestyle.types.Id"><literal classes="xref py py-class">Id</literal></reference>) – An Id object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'push_viewedge_back()\ (freestyle.types.Chain\ method)',\ u'freestyle.types.Chain.push_viewedge_back',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Chain" first="False" fullname="Chain.push_viewedge_back" ids="freestyle.types.Chain.push_viewedge_back" module="freestyle.types" names="freestyle.types.Chain.push_viewedge_back"><desc_name xml:space="preserve">push_viewedge_back</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">viewedge</desc_parameter><desc_parameter xml:space="preserve">orientation</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Adds a ViewEdge at the end of the Chain.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">viewedge</literal_strong> (<reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference>) – The ViewEdge that must be added.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">orientation</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – The orientation with which the ViewEdge must be
                                                processed.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'push_viewedge_front()\ (freestyle.types.Chain\ method)',\ u'freestyle.types.Chain.push_viewedge_front',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Chain" first="False" fullname="Chain.push_viewedge_front" ids="freestyle.types.Chain.push_viewedge_front" module="freestyle.types" names="freestyle.types.Chain.push_viewedge_front"><desc_name xml:space="preserve">push_viewedge_front</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">viewedge</desc_parameter><desc_parameter xml:space="preserve">orientation</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Adds a ViewEdge at the beginning of the Chain.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">viewedge</literal_strong> (<reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference>) – The ViewEdge that must be added.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">orientation</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – The orientation with which the ViewEdge must be
                                                processed.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'ChainingIterator\ (class\ in\ freestyle.types)',\ u'freestyle.types.ChainingIterator',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ChainingIterator" ids="freestyle.types.ChainingIterator" module="freestyle.types" names="freestyle.types.ChainingIterator"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">ChainingIterator</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Iterator" reftitle="freestyle.types.Iterator"><literal classes="xref py py-class">Iterator</literal></reference> &gt; <reference internal="True" refid="freestyle.types.ViewEdgeIterator" reftitle="freestyle.types.ViewEdgeIterator"><literal classes="xref py py-class">ViewEdgeIterator</literal></reference> &gt; <reference internal="True" refid="freestyle.types.ChainingIterator" reftitle="freestyle.types.ChainingIterator"><literal classes="xref py py-class">ChainingIterator</literal></reference></paragraph>
                <paragraph>Base class for chaining iterators.  This class is designed to be
                    overloaded in order to describe chaining rules.  It makes the
                    description of chaining rules easier.  The two main methods that need
                    to overloaded are traverse() and init().  traverse() tells which
                    <reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference> to follow, among the adjacent ones.  If you specify
                    restriction rules (such as “Chain only ViewEdges of the selection”),
                    they will be included in the adjacency iterator (i.e, the adjacent
                    iterator will only stop on “valid” edges).</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.ChainingIterator\ method)',\ u'freestyle.types.ChainingIterator.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ChainingIterator" first="False" fullname="ChainingIterator.__init__" ids="freestyle.types.ChainingIterator.__init__" module="freestyle.types" names="freestyle.types.ChainingIterator.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">restrict_to_selection=True</desc_parameter><desc_parameter xml:space="preserve">restrict_to_unvisited=True</desc_parameter><desc_parameter xml:space="preserve">begin=None</desc_parameter><desc_parameter xml:space="preserve">orientation=True</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a Chaining Iterator from the first ViewEdge used for
                            iteration and its orientation.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">restrict_to_selection</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Indicates whether to force the chaining
                                                to stay within the set of selected ViewEdges or not.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">restrict_to_unvisited</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Indicates whether a ViewEdge that has
                                                already been chained must be ignored ot not.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">begin</literal_strong> (<reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference> or None) – The ViewEdge from which to start the chain.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">orientation</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – The direction to follow to explore the graph.  If
                                                true, the direction indicated by the first ViewEdge is used.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.ChainingIterator\ method)',\ u'freestyle.types.ChainingIterator.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ChainingIterator" first="False" fullname="ChainingIterator.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<literal_emphasis>ChainingIterator</literal_emphasis>) – </paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'init()\ (freestyle.types.ChainingIterator\ method)',\ u'freestyle.types.ChainingIterator.init',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ChainingIterator" first="False" fullname="ChainingIterator.init" ids="freestyle.types.ChainingIterator.init" module="freestyle.types" names="freestyle.types.ChainingIterator.init"><desc_name xml:space="preserve">init</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Initializes the iterator context.  This method is called each
                            time a new chain is started.  It can be used to reset some
                            history information that you might want to keep.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'traverse()\ (freestyle.types.ChainingIterator\ method)',\ u'freestyle.types.ChainingIterator.traverse',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ChainingIterator" first="False" fullname="ChainingIterator.traverse" ids="freestyle.types.ChainingIterator.traverse" module="freestyle.types" names="freestyle.types.ChainingIterator.traverse"><desc_name xml:space="preserve">traverse</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">it</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>This method iterates over the potential next ViewEdges and returns
                            the one that will be followed next.  Returns the next ViewEdge to
                            follow or None when the end of the chain is reached.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">it</literal_strong> (<reference internal="True" refid="freestyle.types.AdjacencyIterator" reftitle="freestyle.types.AdjacencyIterator"><literal classes="xref py py-class">AdjacencyIterator</literal></reference>) – The iterator over the ViewEdges adjacent to the end vertex
                                        of the current ViewEdge.  The adjacency iterator reflects the
                                        restriction rules by only iterating over the valid ViewEdges.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>Returns the next ViewEdge to follow, or None if chaining ends.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference> or None</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'is_incrementing\ (freestyle.types.ChainingIterator\ attribute)',\ u'freestyle.types.ChainingIterator.is_incrementing',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ChainingIterator" first="False" fullname="ChainingIterator.is_incrementing" ids="freestyle.types.ChainingIterator.is_incrementing" module="freestyle.types" names="freestyle.types.ChainingIterator.is_incrementing"><desc_name xml:space="preserve">is_incrementing</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>True if the current iteration is an incrementation.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'next_vertex\ (freestyle.types.ChainingIterator\ attribute)',\ u'freestyle.types.ChainingIterator.next_vertex',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ChainingIterator" first="False" fullname="ChainingIterator.next_vertex" ids="freestyle.types.ChainingIterator.next_vertex" module="freestyle.types" names="freestyle.types.ChainingIterator.next_vertex"><desc_name xml:space="preserve">next_vertex</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The ViewVertex that is the next crossing.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.ViewVertex" reftitle="freestyle.types.ViewVertex"><literal classes="xref py py-class">ViewVertex</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'object\ (freestyle.types.ChainingIterator\ attribute)',\ u'freestyle.types.ChainingIterator.object',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ChainingIterator" first="False" fullname="ChainingIterator.object" ids="freestyle.types.ChainingIterator.object" module="freestyle.types" names="freestyle.types.ChainingIterator.object"><desc_name xml:space="preserve">object</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The ViewEdge object currently pointed by this iterator.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'Curve\ (class\ in\ freestyle.types)',\ u'freestyle.types.Curve',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Curve" ids="freestyle.types.Curve" module="freestyle.types" names="freestyle.types.Curve"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">Curve</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.Curve" reftitle="freestyle.types.Curve"><literal classes="xref py py-class">Curve</literal></reference></paragraph>
                <paragraph>Base class for curves made of CurvePoints.  <reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference> is the
                    type of the initial curve vertices.  A <reference internal="True" refid="freestyle.types.Chain" reftitle="freestyle.types.Chain"><literal classes="xref py py-class">Chain</literal></reference> is a
                    specialization of a Curve.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.Curve\ method)',\ u'freestyle.types.Curve.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Curve" first="False" fullname="Curve.__init__" ids="freestyle.types.Curve.__init__" module="freestyle.types" names="freestyle.types.Curve.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default Constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.Curve\ method)',\ u'freestyle.types.Curve.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Curve" first="False" fullname="Curve.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy Constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<reference internal="True" refid="freestyle.types.Curve" reftitle="freestyle.types.Curve"><literal classes="xref py py-class">Curve</literal></reference>) – A Curve object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.Curve\ method)',\ u'freestyle.types.Curve.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Curve" first="False" fullname="Curve.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">id</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a Curve from its Id.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">id</literal_strong> (<reference internal="True" refid="freestyle.types.Id" reftitle="freestyle.types.Id"><literal classes="xref py py-class">Id</literal></reference>) – An Id object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'push_vertex_back()\ (freestyle.types.Curve\ method)',\ u'freestyle.types.Curve.push_vertex_back',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Curve" first="False" fullname="Curve.push_vertex_back" ids="freestyle.types.Curve.push_vertex_back" module="freestyle.types" names="freestyle.types.Curve.push_vertex_back"><desc_name xml:space="preserve">push_vertex_back</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">vertex</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Adds a single vertex at the end of the Curve.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">vertex</literal_strong> (<reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference> or <reference internal="True" refid="freestyle.types.CurvePoint" reftitle="freestyle.types.CurvePoint"><literal classes="xref py py-class">CurvePoint</literal></reference>) – A vertex object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'push_vertex_front()\ (freestyle.types.Curve\ method)',\ u'freestyle.types.Curve.push_vertex_front',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Curve" first="False" fullname="Curve.push_vertex_front" ids="freestyle.types.Curve.push_vertex_front" module="freestyle.types" names="freestyle.types.Curve.push_vertex_front"><desc_name xml:space="preserve">push_vertex_front</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">vertex</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Adds a single vertex at the front of the Curve.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">vertex</literal_strong> (<reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference> or <reference internal="True" refid="freestyle.types.CurvePoint" reftitle="freestyle.types.CurvePoint"><literal classes="xref py py-class">CurvePoint</literal></reference>) – A vertex object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'is_empty\ (freestyle.types.Curve\ attribute)',\ u'freestyle.types.Curve.is_empty',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Curve" first="False" fullname="Curve.is_empty" ids="freestyle.types.Curve.is_empty" module="freestyle.types" names="freestyle.types.Curve.is_empty"><desc_name xml:space="preserve">is_empty</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>True if the Curve doesn’t have any Vertex yet.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'segments_size\ (freestyle.types.Curve\ attribute)',\ u'freestyle.types.Curve.segments_size',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Curve" first="False" fullname="Curve.segments_size" ids="freestyle.types.Curve.segments_size" module="freestyle.types" names="freestyle.types.Curve.segments_size"><desc_name xml:space="preserve">segments_size</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The number of segments in the polyline constituting the Curve.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'CurvePoint\ (class\ in\ freestyle.types)',\ u'freestyle.types.CurvePoint',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="CurvePoint" ids="freestyle.types.CurvePoint" module="freestyle.types" names="freestyle.types.CurvePoint"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">CurvePoint</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Interface0D" reftitle="freestyle.types.Interface0D"><literal classes="xref py py-class">Interface0D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.CurvePoint" reftitle="freestyle.types.CurvePoint"><literal classes="xref py py-class">CurvePoint</literal></reference></paragraph>
                <paragraph>Class to represent a point of a curve.  A CurvePoint can be any point
                    of a 1D curve (it doesn’t have to be a vertex of the curve).  Any
                    <reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference> is built upon ViewEdges, themselves built upon
                    FEdges.  Therefore, a curve is basically a polyline made of a list of
                    <reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference> objects.  Thus, a CurvePoint is built by linearly
                    interpolating two <reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference> instances.  CurvePoint can be used
                    as virtual points while querying 0D information along a curve at a
                    given resolution.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.CurvePoint\ method)',\ u'freestyle.types.CurvePoint.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CurvePoint" first="False" fullname="CurvePoint.__init__" ids="freestyle.types.CurvePoint.__init__" module="freestyle.types" names="freestyle.types.CurvePoint.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Defult constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.CurvePoint\ method)',\ u'freestyle.types.CurvePoint.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CurvePoint" first="False" fullname="CurvePoint.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<reference internal="True" refid="freestyle.types.CurvePoint" reftitle="freestyle.types.CurvePoint"><literal classes="xref py py-class">CurvePoint</literal></reference>) – A CurvePoint object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.CurvePoint\ method)',\ u'freestyle.types.CurvePoint.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CurvePoint" first="False" fullname="CurvePoint.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">first_vertex</desc_parameter><desc_parameter xml:space="preserve">second_vertex</desc_parameter><desc_parameter xml:space="preserve">t2d</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a CurvePoint from two SVertex objects and an interpolation parameter.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">first_vertex</literal_strong> (<reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference>) – The first SVertex.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">second_vertex</literal_strong> (<reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference>) – The second SVertex.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">t2d</literal_strong> (<literal_emphasis>float</literal_emphasis>) – A 2D interpolation parameter used to linearly interpolate
                                                first_vertex and second_vertex.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.CurvePoint\ method)',\ u'freestyle.types.CurvePoint.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CurvePoint" first="False" fullname="CurvePoint.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">first_point</desc_parameter><desc_parameter xml:space="preserve">second_point</desc_parameter><desc_parameter xml:space="preserve">t2d</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a CurvePoint from two CurvePoint objects and an interpolation
                            parameter.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">first_point</literal_strong> (<reference internal="True" refid="freestyle.types.CurvePoint" reftitle="freestyle.types.CurvePoint"><literal classes="xref py py-class">CurvePoint</literal></reference>) – The first CurvePoint.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">second_point</literal_strong> (<reference internal="True" refid="freestyle.types.CurvePoint" reftitle="freestyle.types.CurvePoint"><literal classes="xref py py-class">CurvePoint</literal></reference>) – The second CurvePoint.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">t2d</literal_strong> (<literal_emphasis>float</literal_emphasis>) – The 2D interpolation parameter used to linearly interpolate
                                                first_point and second_point.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'fedge\ (freestyle.types.CurvePoint\ attribute)',\ u'freestyle.types.CurvePoint.fedge',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CurvePoint" first="False" fullname="CurvePoint.fedge" ids="freestyle.types.CurvePoint.fedge" module="freestyle.types" names="freestyle.types.CurvePoint.fedge"><desc_name xml:space="preserve">fedge</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Gets the FEdge for the two SVertices that given CurvePoints consists out of.
                            A shortcut for CurvePoint.first_svertex.get_fedge(CurvePoint.second_svertex).</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.FEdge" reftitle="freestyle.types.FEdge"><literal classes="xref py py-class">FEdge</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'first_svertex\ (freestyle.types.CurvePoint\ attribute)',\ u'freestyle.types.CurvePoint.first_svertex',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CurvePoint" first="False" fullname="CurvePoint.first_svertex" ids="freestyle.types.CurvePoint.first_svertex" module="freestyle.types" names="freestyle.types.CurvePoint.first_svertex"><desc_name xml:space="preserve">first_svertex</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The first SVertex upon which the CurvePoint is built.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'second_svertex\ (freestyle.types.CurvePoint\ attribute)',\ u'freestyle.types.CurvePoint.second_svertex',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CurvePoint" first="False" fullname="CurvePoint.second_svertex" ids="freestyle.types.CurvePoint.second_svertex" module="freestyle.types" names="freestyle.types.CurvePoint.second_svertex"><desc_name xml:space="preserve">second_svertex</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The second SVertex upon which the CurvePoint is built.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u't2d\ (freestyle.types.CurvePoint\ attribute)',\ u'freestyle.types.CurvePoint.t2d',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CurvePoint" first="False" fullname="CurvePoint.t2d" ids="freestyle.types.CurvePoint.t2d" module="freestyle.types" names="freestyle.types.CurvePoint.t2d"><desc_name xml:space="preserve">t2d</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The 2D interpolation parameter.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'CurvePointIterator\ (class\ in\ freestyle.types)',\ u'freestyle.types.CurvePointIterator',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="CurvePointIterator" ids="freestyle.types.CurvePointIterator" module="freestyle.types" names="freestyle.types.CurvePointIterator"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">CurvePointIterator</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Iterator" reftitle="freestyle.types.Iterator"><literal classes="xref py py-class">Iterator</literal></reference> &gt; <reference internal="True" refid="freestyle.types.CurvePointIterator" reftitle="freestyle.types.CurvePointIterator"><literal classes="xref py py-class">CurvePointIterator</literal></reference></paragraph>
                <paragraph>Class representing an iterator on a curve.  Allows an iterating
                    outside initial vertices.  A CurvePoint is instanciated and returned
                    through the .object attribute.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.CurvePointIterator\ method)',\ u'freestyle.types.CurvePointIterator.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CurvePointIterator" first="False" fullname="CurvePointIterator.__init__" ids="freestyle.types.CurvePointIterator.__init__" module="freestyle.types" names="freestyle.types.CurvePointIterator.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.CurvePointIterator\ method)',\ u'freestyle.types.CurvePointIterator.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CurvePointIterator" first="False" fullname="CurvePointIterator.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<reference internal="True" refid="freestyle.types.CurvePointIterator" reftitle="freestyle.types.CurvePointIterator"><literal classes="xref py py-class">CurvePointIterator</literal></reference>) – A CurvePointIterator object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.CurvePointIterator\ method)',\ u'freestyle.types.CurvePointIterator.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CurvePointIterator" first="False" fullname="CurvePointIterator.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">step=0.0</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a CurvePointIterator object.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">step</literal_strong> (<literal_emphasis>float</literal_emphasis>) – A resampling resolution with which the curve is resampled.
                                        If zero, no resampling is done (i.e., the iterator iterates over
                                        initial vertices).</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'object\ (freestyle.types.CurvePointIterator\ attribute)',\ u'freestyle.types.CurvePointIterator.object',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CurvePointIterator" first="False" fullname="CurvePointIterator.object" ids="freestyle.types.CurvePointIterator.object" module="freestyle.types" names="freestyle.types.CurvePointIterator.object"><desc_name xml:space="preserve">object</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The CurvePoint object currently pointed by this iterator.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.CurvePoint" reftitle="freestyle.types.CurvePoint"><literal classes="xref py py-class">CurvePoint</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u't\ (freestyle.types.CurvePointIterator\ attribute)',\ u'freestyle.types.CurvePointIterator.t',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CurvePointIterator" first="False" fullname="CurvePointIterator.t" ids="freestyle.types.CurvePointIterator.t" module="freestyle.types" names="freestyle.types.CurvePointIterator.t"><desc_name xml:space="preserve">t</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The curvilinear abscissa of the current point.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'u\ (freestyle.types.CurvePointIterator\ attribute)',\ u'freestyle.types.CurvePointIterator.u',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CurvePointIterator" first="False" fullname="CurvePointIterator.u" ids="freestyle.types.CurvePointIterator.u" module="freestyle.types" names="freestyle.types.CurvePointIterator.u"><desc_name xml:space="preserve">u</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The point parameter at the current point in the stroke (0 &lt;= u &lt;= 1).</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'FEdge\ (class\ in\ freestyle.types)',\ u'freestyle.types.FEdge',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="FEdge" ids="freestyle.types.FEdge" module="freestyle.types" names="freestyle.types.FEdge"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">FEdge</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.FEdge" reftitle="freestyle.types.FEdge"><literal classes="xref py py-class">FEdge</literal></reference></paragraph>
                <paragraph>Base Class for feature edges.  This FEdge can represent a silhouette,
                    a crease, a ridge/valley, a border or a suggestive contour.  For
                    silhouettes, the FEdge is oriented so that the visible face lies on
                    the left of the edge.  For borders, the FEdge is oriented so that the
                    face lies on the left of the edge.  An FEdge can represent an initial
                    edge of the mesh or runs across a face of the initial mesh depending
                    on the smoothness or sharpness of the mesh.  This class is specialized
                    into a smooth and a sharp version since their properties slightly vary
                    from one to the other.</paragraph>
                <index entries="['single',\ u'FEdge()\ (freestyle.types.FEdge\ method)',\ u'freestyle.types.FEdge.FEdge',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="FEdge" first="False" fullname="FEdge.FEdge" ids="freestyle.types.FEdge.FEdge" module="freestyle.types" names="freestyle.types.FEdge.FEdge"><desc_name xml:space="preserve">FEdge</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'FEdge()\ (freestyle.types.FEdge\ method)',\ u'freestyle.types.FEdge.FEdge',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="FEdge" first="False" fullname="FEdge.FEdge" module="freestyle.types"><desc_name xml:space="preserve">FEdge</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<reference internal="True" refid="freestyle.types.FEdge" reftitle="freestyle.types.FEdge"><literal classes="xref py py-class">FEdge</literal></reference>) – An FEdge object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'FEdge()\ (freestyle.types.FEdge\ method)',\ u'freestyle.types.FEdge.FEdge',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="FEdge" first="False" fullname="FEdge.FEdge" module="freestyle.types"><desc_name xml:space="preserve">FEdge</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">first_vertex</desc_parameter><desc_parameter xml:space="preserve">second_vertex</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds an FEdge going from the first vertex to the second.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">first_vertex</literal_strong> (<reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference>) – The first SVertex.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">second_vertex</literal_strong> (<reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference>) – The second SVertex.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'first_svertex\ (freestyle.types.FEdge\ attribute)',\ u'freestyle.types.FEdge.first_svertex',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="FEdge" first="False" fullname="FEdge.first_svertex" ids="freestyle.types.FEdge.first_svertex" module="freestyle.types" names="freestyle.types.FEdge.first_svertex"><desc_name xml:space="preserve">first_svertex</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The first SVertex constituting this FEdge.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'id\ (freestyle.types.FEdge\ attribute)',\ u'freestyle.types.FEdge.id',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="FEdge" first="False" fullname="FEdge.id" ids="freestyle.types.FEdge.id" module="freestyle.types" names="freestyle.types.FEdge.id"><desc_name xml:space="preserve">id</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The Id of this FEdge.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Id" reftitle="freestyle.types.Id"><literal classes="xref py py-class">Id</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'is_smooth\ (freestyle.types.FEdge\ attribute)',\ u'freestyle.types.FEdge.is_smooth',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="FEdge" first="False" fullname="FEdge.is_smooth" ids="freestyle.types.FEdge.is_smooth" module="freestyle.types" names="freestyle.types.FEdge.is_smooth"><desc_name xml:space="preserve">is_smooth</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>True if this FEdge is a smooth FEdge.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'nature\ (freestyle.types.FEdge\ attribute)',\ u'freestyle.types.FEdge.nature',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="FEdge" first="False" fullname="FEdge.nature" ids="freestyle.types.FEdge.nature" module="freestyle.types" names="freestyle.types.FEdge.nature"><desc_name xml:space="preserve">nature</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The nature of this FEdge.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Nature" reftitle="freestyle.types.Nature"><literal classes="xref py py-class">Nature</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'next_fedge\ (freestyle.types.FEdge\ attribute)',\ u'freestyle.types.FEdge.next_fedge',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="FEdge" first="False" fullname="FEdge.next_fedge" ids="freestyle.types.FEdge.next_fedge" module="freestyle.types" names="freestyle.types.FEdge.next_fedge"><desc_name xml:space="preserve">next_fedge</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The FEdge following this one in the ViewEdge.  The value is None if
                            this FEdge is the last of the ViewEdge.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.FEdge" reftitle="freestyle.types.FEdge"><literal classes="xref py py-class">FEdge</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'previous_fedge\ (freestyle.types.FEdge\ attribute)',\ u'freestyle.types.FEdge.previous_fedge',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="FEdge" first="False" fullname="FEdge.previous_fedge" ids="freestyle.types.FEdge.previous_fedge" module="freestyle.types" names="freestyle.types.FEdge.previous_fedge"><desc_name xml:space="preserve">previous_fedge</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The FEdge preceding this one in the ViewEdge.  The value is None if
                            this FEdge is the first one of the ViewEdge.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.FEdge" reftitle="freestyle.types.FEdge"><literal classes="xref py py-class">FEdge</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'second_svertex\ (freestyle.types.FEdge\ attribute)',\ u'freestyle.types.FEdge.second_svertex',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="FEdge" first="False" fullname="FEdge.second_svertex" ids="freestyle.types.FEdge.second_svertex" module="freestyle.types" names="freestyle.types.FEdge.second_svertex"><desc_name xml:space="preserve">second_svertex</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The second SVertex constituting this FEdge.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'viewedge\ (freestyle.types.FEdge\ attribute)',\ u'freestyle.types.FEdge.viewedge',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="FEdge" first="False" fullname="FEdge.viewedge" ids="freestyle.types.FEdge.viewedge" module="freestyle.types" names="freestyle.types.FEdge.viewedge"><desc_name xml:space="preserve">viewedge</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The ViewEdge to which this FEdge belongs to.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'FEdgeSharp\ (class\ in\ freestyle.types)',\ u'freestyle.types.FEdgeSharp',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="FEdgeSharp" ids="freestyle.types.FEdgeSharp" module="freestyle.types" names="freestyle.types.FEdgeSharp"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">FEdgeSharp</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.FEdge" reftitle="freestyle.types.FEdge"><literal classes="xref py py-class">FEdge</literal></reference> &gt; <reference internal="True" refid="freestyle.types.FEdgeSharp" reftitle="freestyle.types.FEdgeSharp"><literal classes="xref py py-class">FEdgeSharp</literal></reference></paragraph>
                <paragraph>Class defining a sharp FEdge.  A Sharp FEdge corresponds to an initial
                    edge of the input mesh.  It can be a silhouette, a crease or a border.
                    If it is a crease edge, then it is borded by two faces of the mesh.
                    Face a lies on its right whereas Face b lies on its left.  If it is a
                    border edge, then it doesn’t have any face on its right, and thus Face
                    a is None.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.FEdgeSharp\ method)',\ u'freestyle.types.FEdgeSharp.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="FEdgeSharp" first="False" fullname="FEdgeSharp.__init__" ids="freestyle.types.FEdgeSharp.__init__" module="freestyle.types" names="freestyle.types.FEdgeSharp.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.FEdgeSharp\ method)',\ u'freestyle.types.FEdgeSharp.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="FEdgeSharp" first="False" fullname="FEdgeSharp.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<reference internal="True" refid="freestyle.types.FEdgeSharp" reftitle="freestyle.types.FEdgeSharp"><literal classes="xref py py-class">FEdgeSharp</literal></reference>) – An FEdgeSharp object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.FEdgeSharp\ method)',\ u'freestyle.types.FEdgeSharp.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="FEdgeSharp" first="False" fullname="FEdgeSharp.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">first_vertex</desc_parameter><desc_parameter xml:space="preserve">second_vertex</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds an FEdgeSharp going from the first vertex to the second.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">first_vertex</literal_strong> (<reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference>) – The first SVertex object.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">second_vertex</literal_strong> (<reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference>) – The second SVertex object.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'face_mark_left\ (freestyle.types.FEdgeSharp\ attribute)',\ u'freestyle.types.FEdgeSharp.face_mark_left',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="FEdgeSharp" first="False" fullname="FEdgeSharp.face_mark_left" ids="freestyle.types.FEdgeSharp.face_mark_left" module="freestyle.types" names="freestyle.types.FEdgeSharp.face_mark_left"><desc_name xml:space="preserve">face_mark_left</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The face mark of the face lying on the left of the FEdge.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'face_mark_right\ (freestyle.types.FEdgeSharp\ attribute)',\ u'freestyle.types.FEdgeSharp.face_mark_right',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="FEdgeSharp" first="False" fullname="FEdgeSharp.face_mark_right" ids="freestyle.types.FEdgeSharp.face_mark_right" module="freestyle.types" names="freestyle.types.FEdgeSharp.face_mark_right"><desc_name xml:space="preserve">face_mark_right</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The face mark of the face lying on the right of the FEdge.  If this FEdge
                            is a border, it has no face on the right and thus this property is set to
                            false.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'material_index_left\ (freestyle.types.FEdgeSharp\ attribute)',\ u'freestyle.types.FEdgeSharp.material_index_left',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="FEdgeSharp" first="False" fullname="FEdgeSharp.material_index_left" ids="freestyle.types.FEdgeSharp.material_index_left" module="freestyle.types" names="freestyle.types.FEdgeSharp.material_index_left"><desc_name xml:space="preserve">material_index_left</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The index of the material of the face lying on the left of the FEdge.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'material_index_right\ (freestyle.types.FEdgeSharp\ attribute)',\ u'freestyle.types.FEdgeSharp.material_index_right',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="FEdgeSharp" first="False" fullname="FEdgeSharp.material_index_right" ids="freestyle.types.FEdgeSharp.material_index_right" module="freestyle.types" names="freestyle.types.FEdgeSharp.material_index_right"><desc_name xml:space="preserve">material_index_right</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The index of the material of the face lying on the right of the FEdge.
                            If this FEdge is a border, it has no Face on its right and therefore
                            no material.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'material_left\ (freestyle.types.FEdgeSharp\ attribute)',\ u'freestyle.types.FEdgeSharp.material_left',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="FEdgeSharp" first="False" fullname="FEdgeSharp.material_left" ids="freestyle.types.FEdgeSharp.material_left" module="freestyle.types" names="freestyle.types.FEdgeSharp.material_left"><desc_name xml:space="preserve">material_left</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The material of the face lying on the left of the FEdge.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Material" reftitle="freestyle.types.Material"><literal classes="xref py py-class">Material</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'material_right\ (freestyle.types.FEdgeSharp\ attribute)',\ u'freestyle.types.FEdgeSharp.material_right',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="FEdgeSharp" first="False" fullname="FEdgeSharp.material_right" ids="freestyle.types.FEdgeSharp.material_right" module="freestyle.types" names="freestyle.types.FEdgeSharp.material_right"><desc_name xml:space="preserve">material_right</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The material of the face lying on the right of the FEdge.  If this FEdge
                            is a border, it has no Face on its right and therefore no material.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Material" reftitle="freestyle.types.Material"><literal classes="xref py py-class">Material</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'normal_left\ (freestyle.types.FEdgeSharp\ attribute)',\ u'freestyle.types.FEdgeSharp.normal_left',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="FEdgeSharp" first="False" fullname="FEdgeSharp.normal_left" ids="freestyle.types.FEdgeSharp.normal_left" module="freestyle.types" names="freestyle.types.FEdgeSharp.normal_left"><desc_name xml:space="preserve">normal_left</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The normal to the face lying on the left of the FEdge.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'normal_right\ (freestyle.types.FEdgeSharp\ attribute)',\ u'freestyle.types.FEdgeSharp.normal_right',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="FEdgeSharp" first="False" fullname="FEdgeSharp.normal_right" ids="freestyle.types.FEdgeSharp.normal_right" module="freestyle.types" names="freestyle.types.FEdgeSharp.normal_right"><desc_name xml:space="preserve">normal_right</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The normal to the face lying on the right of the FEdge.  If this FEdge
                            is a border, it has no Face on its right and therefore no normal.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'FEdgeSmooth\ (class\ in\ freestyle.types)',\ u'freestyle.types.FEdgeSmooth',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="FEdgeSmooth" ids="freestyle.types.FEdgeSmooth" module="freestyle.types" names="freestyle.types.FEdgeSmooth"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">FEdgeSmooth</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.FEdge" reftitle="freestyle.types.FEdge"><literal classes="xref py py-class">FEdge</literal></reference> &gt; <reference internal="True" refid="freestyle.types.FEdgeSmooth" reftitle="freestyle.types.FEdgeSmooth"><literal classes="xref py py-class">FEdgeSmooth</literal></reference></paragraph>
                <paragraph>Class defining a smooth edge.  This kind of edge typically runs across
                    a face of the input mesh.  It can be a silhouette, a ridge or valley,
                    a suggestive contour.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.FEdgeSmooth\ method)',\ u'freestyle.types.FEdgeSmooth.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="FEdgeSmooth" first="False" fullname="FEdgeSmooth.__init__" ids="freestyle.types.FEdgeSmooth.__init__" module="freestyle.types" names="freestyle.types.FEdgeSmooth.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.FEdgeSmooth\ method)',\ u'freestyle.types.FEdgeSmooth.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="FEdgeSmooth" first="False" fullname="FEdgeSmooth.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<reference internal="True" refid="freestyle.types.FEdgeSmooth" reftitle="freestyle.types.FEdgeSmooth"><literal classes="xref py py-class">FEdgeSmooth</literal></reference>) – An FEdgeSmooth object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.FEdgeSmooth\ method)',\ u'freestyle.types.FEdgeSmooth.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="FEdgeSmooth" first="False" fullname="FEdgeSmooth.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">first_vertex</desc_parameter><desc_parameter xml:space="preserve">second_vertex</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds an FEdgeSmooth going from the first to the second.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">first_vertex</literal_strong> (<reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference>) – The first SVertex object.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">second_vertex</literal_strong> (<reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference>) – The second SVertex object.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'face_mark\ (freestyle.types.FEdgeSmooth\ attribute)',\ u'freestyle.types.FEdgeSmooth.face_mark',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="FEdgeSmooth" first="False" fullname="FEdgeSmooth.face_mark" ids="freestyle.types.FEdgeSmooth.face_mark" module="freestyle.types" names="freestyle.types.FEdgeSmooth.face_mark"><desc_name xml:space="preserve">face_mark</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The face mark of the face that this FEdge is running across.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'material\ (freestyle.types.FEdgeSmooth\ attribute)',\ u'freestyle.types.FEdgeSmooth.material',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="FEdgeSmooth" first="False" fullname="FEdgeSmooth.material" ids="freestyle.types.FEdgeSmooth.material" module="freestyle.types" names="freestyle.types.FEdgeSmooth.material"><desc_name xml:space="preserve">material</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The material of the face that this FEdge is running across.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Material" reftitle="freestyle.types.Material"><literal classes="xref py py-class">Material</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'material_index\ (freestyle.types.FEdgeSmooth\ attribute)',\ u'freestyle.types.FEdgeSmooth.material_index',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="FEdgeSmooth" first="False" fullname="FEdgeSmooth.material_index" ids="freestyle.types.FEdgeSmooth.material_index" module="freestyle.types" names="freestyle.types.FEdgeSmooth.material_index"><desc_name xml:space="preserve">material_index</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The index of the material of the face that this FEdge is running across.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'normal\ (freestyle.types.FEdgeSmooth\ attribute)',\ u'freestyle.types.FEdgeSmooth.normal',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="FEdgeSmooth" first="False" fullname="FEdgeSmooth.normal" ids="freestyle.types.FEdgeSmooth.normal" module="freestyle.types" names="freestyle.types.FEdgeSmooth.normal"><desc_name xml:space="preserve">normal</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The normal of the face that this FEdge is running across.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'Id\ (class\ in\ freestyle.types)',\ u'freestyle.types.Id',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Id" ids="freestyle.types.Id" module="freestyle.types" names="freestyle.types.Id"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">Id</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class for representing an object Id.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.Id\ method)',\ u'freestyle.types.Id.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Id" first="False" fullname="Id.__init__" ids="freestyle.types.Id.__init__" module="freestyle.types" names="freestyle.types.Id.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">first=0</desc_parameter><desc_parameter xml:space="preserve">second=0</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Build the Id from two numbers.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">first</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The first number.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">second</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The second number.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.Id\ method)',\ u'freestyle.types.Id.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Id" first="False" fullname="Id.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<reference internal="True" refid="freestyle.types.Id" reftitle="freestyle.types.Id"><literal classes="xref py py-class">Id</literal></reference>) – An Id object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'first\ (freestyle.types.Id\ attribute)',\ u'freestyle.types.Id.first',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Id" first="False" fullname="Id.first" ids="freestyle.types.Id.first" module="freestyle.types" names="freestyle.types.Id.first"><desc_name xml:space="preserve">first</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The first number constituting the Id.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'second\ (freestyle.types.Id\ attribute)',\ u'freestyle.types.Id.second',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Id" first="False" fullname="Id.second" ids="freestyle.types.Id.second" module="freestyle.types" names="freestyle.types.Id.second"><desc_name xml:space="preserve">second</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The second number constituting the Id.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'IntegrationType\ (class\ in\ freestyle.types)',\ u'freestyle.types.IntegrationType',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="IntegrationType" ids="freestyle.types.IntegrationType" module="freestyle.types" names="freestyle.types.IntegrationType"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">IntegrationType</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: int &gt; <reference internal="True" refid="freestyle.types.IntegrationType" reftitle="freestyle.types.IntegrationType"><literal classes="xref py py-class">IntegrationType</literal></reference></paragraph>
                <paragraph>Different integration methods that can be invoked to integrate into a
                    single value the set of values obtained from each 0D element of an 1D
                    element:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>IntegrationType.MEAN: The value computed for the 1D element is the
                            mean of the values obtained for the 0D elements.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>IntegrationType.MIN: The value computed for the 1D element is the
                            minimum of the values obtained for the 0D elements.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>IntegrationType.MAX: The value computed for the 1D element is the
                            maximum of the values obtained for the 0D elements.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>IntegrationType.FIRST: The value computed for the 1D element is the
                            first of the values obtained for the 0D elements.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>IntegrationType.LAST: The value computed for the 1D element is the
                            last of the values obtained for the 0D elements.</paragraph>
                    </list_item>
                </bullet_list>
            </desc_content>
        </desc>
        <index entries="['single',\ u'Interface0D\ (class\ in\ freestyle.types)',\ u'freestyle.types.Interface0D',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Interface0D" ids="freestyle.types.Interface0D" module="freestyle.types" names="freestyle.types.Interface0D"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">Interface0D</desc_name></desc_signature>
            <desc_content>
                <paragraph>Base class for any 0D element.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.Interface0D\ method)',\ u'freestyle.types.Interface0D.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Interface0D" first="False" fullname="Interface0D.__init__" ids="freestyle.types.Interface0D.__init__" module="freestyle.types" names="freestyle.types.Interface0D.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'get_fedge()\ (freestyle.types.Interface0D\ method)',\ u'freestyle.types.Interface0D.get_fedge',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Interface0D" first="False" fullname="Interface0D.get_fedge" ids="freestyle.types.Interface0D.get_fedge" module="freestyle.types" names="freestyle.types.Interface0D.get_fedge"><desc_name xml:space="preserve">get_fedge</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">inter</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns the FEdge that lies between this 0D element and the 0D
                            element given as the argument.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">inter</literal_strong> (<reference internal="True" refid="freestyle.types.Interface0D" reftitle="freestyle.types.Interface0D"><literal classes="xref py py-class">Interface0D</literal></reference>) – A 0D element.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The FEdge lying between the two 0D elements.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.FEdge" reftitle="freestyle.types.FEdge"><literal classes="xref py py-class">FEdge</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'id\ (freestyle.types.Interface0D\ attribute)',\ u'freestyle.types.Interface0D.id',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Interface0D" first="False" fullname="Interface0D.id" ids="freestyle.types.Interface0D.id" module="freestyle.types" names="freestyle.types.Interface0D.id"><desc_name xml:space="preserve">id</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The Id of this 0D element.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Id" reftitle="freestyle.types.Id"><literal classes="xref py py-class">Id</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'name\ (freestyle.types.Interface0D\ attribute)',\ u'freestyle.types.Interface0D.name',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Interface0D" first="False" fullname="Interface0D.name" ids="freestyle.types.Interface0D.name" module="freestyle.types" names="freestyle.types.Interface0D.name"><desc_name xml:space="preserve">name</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The string of the name of this 0D element.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>str</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'nature\ (freestyle.types.Interface0D\ attribute)',\ u'freestyle.types.Interface0D.nature',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Interface0D" first="False" fullname="Interface0D.nature" ids="freestyle.types.Interface0D.nature" module="freestyle.types" names="freestyle.types.Interface0D.nature"><desc_name xml:space="preserve">nature</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The nature of this 0D element.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Nature" reftitle="freestyle.types.Nature"><literal classes="xref py py-class">Nature</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'point_2d\ (freestyle.types.Interface0D\ attribute)',\ u'freestyle.types.Interface0D.point_2d',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Interface0D" first="False" fullname="Interface0D.point_2d" ids="freestyle.types.Interface0D.point_2d" module="freestyle.types" names="freestyle.types.Interface0D.point_2d"><desc_name xml:space="preserve">point_2d</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The 2D point of this 0D element.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'point_3d\ (freestyle.types.Interface0D\ attribute)',\ u'freestyle.types.Interface0D.point_3d',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Interface0D" first="False" fullname="Interface0D.point_3d" ids="freestyle.types.Interface0D.point_3d" module="freestyle.types" names="freestyle.types.Interface0D.point_3d"><desc_name xml:space="preserve">point_3d</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The 3D point of this 0D element.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'projected_x\ (freestyle.types.Interface0D\ attribute)',\ u'freestyle.types.Interface0D.projected_x',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Interface0D" first="False" fullname="Interface0D.projected_x" ids="freestyle.types.Interface0D.projected_x" module="freestyle.types" names="freestyle.types.Interface0D.projected_x"><desc_name xml:space="preserve">projected_x</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The X coordinate of the projected 3D point of this 0D element.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'projected_y\ (freestyle.types.Interface0D\ attribute)',\ u'freestyle.types.Interface0D.projected_y',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Interface0D" first="False" fullname="Interface0D.projected_y" ids="freestyle.types.Interface0D.projected_y" module="freestyle.types" names="freestyle.types.Interface0D.projected_y"><desc_name xml:space="preserve">projected_y</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The Y coordinate of the projected 3D point of this 0D element.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'projected_z\ (freestyle.types.Interface0D\ attribute)',\ u'freestyle.types.Interface0D.projected_z',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Interface0D" first="False" fullname="Interface0D.projected_z" ids="freestyle.types.Interface0D.projected_z" module="freestyle.types" names="freestyle.types.Interface0D.projected_z"><desc_name xml:space="preserve">projected_z</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The Z coordinate of the projected 3D point of this 0D element.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'Interface0DIterator\ (class\ in\ freestyle.types)',\ u'freestyle.types.Interface0DIterator',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Interface0DIterator" ids="freestyle.types.Interface0DIterator" module="freestyle.types" names="freestyle.types.Interface0DIterator"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">Interface0DIterator</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Iterator" reftitle="freestyle.types.Iterator"><literal classes="xref py py-class">Iterator</literal></reference> &gt; <reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference></paragraph>
                <paragraph>Class defining an iterator over Interface0D elements.  An instance of
                    this iterator is always obtained from a 1D element.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.Interface0DIterator\ method)',\ u'freestyle.types.Interface0DIterator.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Interface0DIterator" first="False" fullname="Interface0DIterator.__init__" ids="freestyle.types.Interface0DIterator.__init__" module="freestyle.types" names="freestyle.types.Interface0DIterator.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference>) – An Interface0DIterator object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.Interface0DIterator\ method)',\ u'freestyle.types.Interface0DIterator.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Interface0DIterator" first="False" fullname="Interface0DIterator.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">it</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Construct a nested Interface0DIterator that can be the argument of
                            a Function0D.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">it</literal_strong> (<reference internal="True" refid="freestyle.types.SVertexIterator" reftitle="freestyle.types.SVertexIterator"><literal classes="xref py py-class">SVertexIterator</literal></reference>, <reference internal="True" refid="freestyle.types.CurvePointIterator" reftitle="freestyle.types.CurvePointIterator"><literal classes="xref py py-class">CurvePointIterator</literal></reference>, or
                                        <reference internal="True" refid="freestyle.types.StrokeVertexIterator" reftitle="freestyle.types.StrokeVertexIterator"><literal classes="xref py py-class">StrokeVertexIterator</literal></reference>) – An iterator object to be nested.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'at_last\ (freestyle.types.Interface0DIterator\ attribute)',\ u'freestyle.types.Interface0DIterator.at_last',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Interface0DIterator" first="False" fullname="Interface0DIterator.at_last" ids="freestyle.types.Interface0DIterator.at_last" module="freestyle.types" names="freestyle.types.Interface0DIterator.at_last"><desc_name xml:space="preserve">at_last</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>True if the interator points to the last valid element.
                            For its counterpart (pointing to the first valid element), use it.is_begin.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'object\ (freestyle.types.Interface0DIterator\ attribute)',\ u'freestyle.types.Interface0DIterator.object',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Interface0DIterator" first="False" fullname="Interface0DIterator.object" ids="freestyle.types.Interface0DIterator.object" module="freestyle.types" names="freestyle.types.Interface0DIterator.object"><desc_name xml:space="preserve">object</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The 0D object currently pointed to by this iterator.  Note that the object
                            may be an instance of an Interface0D subclass. For example if the iterator
                            has been created from the <title_reference>vertices_begin()</title_reference> method of the <reference internal="True" refid="freestyle.types.Stroke" reftitle="freestyle.types.Stroke"><literal classes="xref py py-class">Stroke</literal></reference>
                            class, the .object property refers to a <reference internal="True" refid="freestyle.types.StrokeVertex" reftitle="freestyle.types.StrokeVertex"><literal classes="xref py py-class">StrokeVertex</literal></reference> object.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Interface0D" reftitle="freestyle.types.Interface0D"><literal classes="xref py py-class">Interface0D</literal></reference> or one of its subclasses.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u't\ (freestyle.types.Interface0DIterator\ attribute)',\ u'freestyle.types.Interface0DIterator.t',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Interface0DIterator" first="False" fullname="Interface0DIterator.t" ids="freestyle.types.Interface0DIterator.t" module="freestyle.types" names="freestyle.types.Interface0DIterator.t"><desc_name xml:space="preserve">t</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The curvilinear abscissa of the current point.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'u\ (freestyle.types.Interface0DIterator\ attribute)',\ u'freestyle.types.Interface0DIterator.u',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Interface0DIterator" first="False" fullname="Interface0DIterator.u" ids="freestyle.types.Interface0DIterator.u" module="freestyle.types" names="freestyle.types.Interface0DIterator.u"><desc_name xml:space="preserve">u</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The point parameter at the current point in the 1D element (0 &lt;= u &lt;= 1).</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'Interface1D\ (class\ in\ freestyle.types)',\ u'freestyle.types.Interface1D',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Interface1D" ids="freestyle.types.Interface1D" module="freestyle.types" names="freestyle.types.Interface1D"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">Interface1D</desc_name></desc_signature>
            <desc_content>
                <paragraph>Base class for any 1D element.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.Interface1D\ method)',\ u'freestyle.types.Interface1D.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Interface1D" first="False" fullname="Interface1D.__init__" ids="freestyle.types.Interface1D.__init__" module="freestyle.types" names="freestyle.types.Interface1D.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'points_begin()\ (freestyle.types.Interface1D\ method)',\ u'freestyle.types.Interface1D.points_begin',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Interface1D" first="False" fullname="Interface1D.points_begin" ids="freestyle.types.Interface1D.points_begin" module="freestyle.types" names="freestyle.types.Interface1D.points_begin"><desc_name xml:space="preserve">points_begin</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">t=0.0</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns an iterator over the Interface1D points, pointing to the
                            first point. The difference with vertices_begin() is that here we can
                            iterate over points of the 1D element at a any given sampling.
                            Indeed, for each iteration, a virtual point is created.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">t</literal_strong> (<literal_emphasis>float</literal_emphasis>) – A sampling with which we want to iterate over points of
                                        this 1D element.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>An Interface0DIterator pointing to the first point.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'points_end()\ (freestyle.types.Interface1D\ method)',\ u'freestyle.types.Interface1D.points_end',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Interface1D" first="False" fullname="Interface1D.points_end" ids="freestyle.types.Interface1D.points_end" module="freestyle.types" names="freestyle.types.Interface1D.points_end"><desc_name xml:space="preserve">points_end</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">t=0.0</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns an iterator over the Interface1D points, pointing after the
                            last point. The difference with vertices_end() is that here we can
                            iterate over points of the 1D element at a given sampling.  Indeed,
                            for each iteration, a virtual point is created.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">t</literal_strong> (<literal_emphasis>float</literal_emphasis>) – A sampling with which we want to iterate over points of
                                        this 1D element.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>An Interface0DIterator pointing after the last point.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'vertices_begin()\ (freestyle.types.Interface1D\ method)',\ u'freestyle.types.Interface1D.vertices_begin',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Interface1D" first="False" fullname="Interface1D.vertices_begin" ids="freestyle.types.Interface1D.vertices_begin" module="freestyle.types" names="freestyle.types.Interface1D.vertices_begin"><desc_name xml:space="preserve">vertices_begin</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns an iterator over the Interface1D vertices, pointing to the
                            first vertex.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>An Interface0DIterator pointing to the first vertex.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'vertices_end()\ (freestyle.types.Interface1D\ method)',\ u'freestyle.types.Interface1D.vertices_end',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Interface1D" first="False" fullname="Interface1D.vertices_end" ids="freestyle.types.Interface1D.vertices_end" module="freestyle.types" names="freestyle.types.Interface1D.vertices_end"><desc_name xml:space="preserve">vertices_end</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns an iterator over the Interface1D vertices, pointing after
                            the last vertex.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>An Interface0DIterator pointing after the last vertex.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'id\ (freestyle.types.Interface1D\ attribute)',\ u'freestyle.types.Interface1D.id',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Interface1D" first="False" fullname="Interface1D.id" ids="freestyle.types.Interface1D.id" module="freestyle.types" names="freestyle.types.Interface1D.id"><desc_name xml:space="preserve">id</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The Id of this Interface1D.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Id" reftitle="freestyle.types.Id"><literal classes="xref py py-class">Id</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'length_2d\ (freestyle.types.Interface1D\ attribute)',\ u'freestyle.types.Interface1D.length_2d',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Interface1D" first="False" fullname="Interface1D.length_2d" ids="freestyle.types.Interface1D.length_2d" module="freestyle.types" names="freestyle.types.Interface1D.length_2d"><desc_name xml:space="preserve">length_2d</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The 2D length of this Interface1D.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'name\ (freestyle.types.Interface1D\ attribute)',\ u'freestyle.types.Interface1D.name',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Interface1D" first="False" fullname="Interface1D.name" ids="freestyle.types.Interface1D.name" module="freestyle.types" names="freestyle.types.Interface1D.name"><desc_name xml:space="preserve">name</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The string of the name of the 1D element.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>str</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'nature\ (freestyle.types.Interface1D\ attribute)',\ u'freestyle.types.Interface1D.nature',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Interface1D" first="False" fullname="Interface1D.nature" ids="freestyle.types.Interface1D.nature" module="freestyle.types" names="freestyle.types.Interface1D.nature"><desc_name xml:space="preserve">nature</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The nature of this Interface1D.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Nature" reftitle="freestyle.types.Nature"><literal classes="xref py py-class">Nature</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'time_stamp\ (freestyle.types.Interface1D\ attribute)',\ u'freestyle.types.Interface1D.time_stamp',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Interface1D" first="False" fullname="Interface1D.time_stamp" ids="freestyle.types.Interface1D.time_stamp" module="freestyle.types" names="freestyle.types.Interface1D.time_stamp"><desc_name xml:space="preserve">time_stamp</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The time stamp of the 1D element, mainly used for selection.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'Iterator\ (class\ in\ freestyle.types)',\ u'freestyle.types.Iterator',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Iterator" ids="freestyle.types.Iterator" module="freestyle.types" names="freestyle.types.Iterator"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">Iterator</desc_name></desc_signature>
            <desc_content>
                <paragraph>Base class to define iterators.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.Iterator\ method)',\ u'freestyle.types.Iterator.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Iterator" first="False" fullname="Iterator.__init__" ids="freestyle.types.Iterator.__init__" module="freestyle.types" names="freestyle.types.Iterator.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'decrement()\ (freestyle.types.Iterator\ method)',\ u'freestyle.types.Iterator.decrement',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Iterator" first="False" fullname="Iterator.decrement" ids="freestyle.types.Iterator.decrement" module="freestyle.types" names="freestyle.types.Iterator.decrement"><desc_name xml:space="preserve">decrement</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Makes the iterator point the previous element.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'increment()\ (freestyle.types.Iterator\ method)',\ u'freestyle.types.Iterator.increment',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Iterator" first="False" fullname="Iterator.increment" ids="freestyle.types.Iterator.increment" module="freestyle.types" names="freestyle.types.Iterator.increment"><desc_name xml:space="preserve">increment</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Makes the iterator point the next element.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'is_begin\ (freestyle.types.Iterator\ attribute)',\ u'freestyle.types.Iterator.is_begin',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Iterator" first="False" fullname="Iterator.is_begin" ids="freestyle.types.Iterator.is_begin" module="freestyle.types" names="freestyle.types.Iterator.is_begin"><desc_name xml:space="preserve">is_begin</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>True if the interator points the first element.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'is_end\ (freestyle.types.Iterator\ attribute)',\ u'freestyle.types.Iterator.is_end',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Iterator" first="False" fullname="Iterator.is_end" ids="freestyle.types.Iterator.is_end" module="freestyle.types" names="freestyle.types.Iterator.is_end"><desc_name xml:space="preserve">is_end</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>True if the interator points the last element.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'name\ (freestyle.types.Iterator\ attribute)',\ u'freestyle.types.Iterator.name',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Iterator" first="False" fullname="Iterator.name" ids="freestyle.types.Iterator.name" module="freestyle.types" names="freestyle.types.Iterator.name"><desc_name xml:space="preserve">name</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The string of the name of this iterator.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>str</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'Material\ (class\ in\ freestyle.types)',\ u'freestyle.types.Material',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Material" ids="freestyle.types.Material" module="freestyle.types" names="freestyle.types.Material"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">Material</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class defining a material.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.Material\ method)',\ u'freestyle.types.Material.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Material" first="False" fullname="Material.__init__" ids="freestyle.types.Material.__init__" module="freestyle.types" names="freestyle.types.Material.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.Material\ method)',\ u'freestyle.types.Material.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Material" first="False" fullname="Material.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<reference internal="True" refid="freestyle.types.Material" reftitle="freestyle.types.Material"><literal classes="xref py py-class">Material</literal></reference>) – A Material object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.Material\ method)',\ u'freestyle.types.Material.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Material" first="False" fullname="Material.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">line</desc_parameter><desc_parameter xml:space="preserve">diffuse</desc_parameter><desc_parameter xml:space="preserve">ambient</desc_parameter><desc_parameter xml:space="preserve">specular</desc_parameter><desc_parameter xml:space="preserve">emission</desc_parameter><desc_parameter xml:space="preserve">shininess</desc_parameter><desc_parameter xml:space="preserve">priority</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a Material from its line, diffuse, ambient, specular, emissive
                            colors, a shininess coefficient and line color priority.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">line</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference>, list or tuple of 4 float values) – The line color.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">diffuse</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference>, list or tuple of 4 float values) – The diffuse color.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">ambient</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference>, list or tuple of 4 float values) – The ambient color.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">specular</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference>, list or tuple of 4 float values) – The specular color.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">emission</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference>, list or tuple of 4 float values) – The emissive color.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">shininess</literal_strong> (<literal_emphasis>float</literal_emphasis>) – The shininess coefficient.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">priority</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The line color priority.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'ambient\ (freestyle.types.Material\ attribute)',\ u'freestyle.types.Material.ambient',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Material" first="False" fullname="Material.ambient" ids="freestyle.types.Material.ambient" module="freestyle.types" names="freestyle.types.Material.ambient"><desc_name xml:space="preserve">ambient</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>RGBA components of the ambient color of the material.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="mathutils.Color" refuri="mathutils#mathutils.Color"><literal classes="xref py py-class">mathutils.Color</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'diffuse\ (freestyle.types.Material\ attribute)',\ u'freestyle.types.Material.diffuse',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Material" first="False" fullname="Material.diffuse" ids="freestyle.types.Material.diffuse" module="freestyle.types" names="freestyle.types.Material.diffuse"><desc_name xml:space="preserve">diffuse</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>RGBA components of the diffuse color of the material.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'emission\ (freestyle.types.Material\ attribute)',\ u'freestyle.types.Material.emission',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Material" first="False" fullname="Material.emission" ids="freestyle.types.Material.emission" module="freestyle.types" names="freestyle.types.Material.emission"><desc_name xml:space="preserve">emission</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>RGBA components of the emissive color of the material.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="mathutils.Color" refuri="mathutils#mathutils.Color"><literal classes="xref py py-class">mathutils.Color</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'line\ (freestyle.types.Material\ attribute)',\ u'freestyle.types.Material.line',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Material" first="False" fullname="Material.line" ids="freestyle.types.Material.line" module="freestyle.types" names="freestyle.types.Material.line"><desc_name xml:space="preserve">line</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>RGBA components of the line color of the material.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'priority\ (freestyle.types.Material\ attribute)',\ u'freestyle.types.Material.priority',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Material" first="False" fullname="Material.priority" ids="freestyle.types.Material.priority" module="freestyle.types" names="freestyle.types.Material.priority"><desc_name xml:space="preserve">priority</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Line color priority of the material.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'shininess\ (freestyle.types.Material\ attribute)',\ u'freestyle.types.Material.shininess',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Material" first="False" fullname="Material.shininess" ids="freestyle.types.Material.shininess" module="freestyle.types" names="freestyle.types.Material.shininess"><desc_name xml:space="preserve">shininess</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Shininess coefficient of the material.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'specular\ (freestyle.types.Material\ attribute)',\ u'freestyle.types.Material.specular',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Material" first="False" fullname="Material.specular" ids="freestyle.types.Material.specular" module="freestyle.types" names="freestyle.types.Material.specular"><desc_name xml:space="preserve">specular</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>RGBA components of the specular color of the material.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'MediumType\ (class\ in\ freestyle.types)',\ u'freestyle.types.MediumType',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="MediumType" ids="freestyle.types.MediumType" module="freestyle.types" names="freestyle.types.MediumType"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">MediumType</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: int &gt; <reference internal="True" refid="freestyle.types.MediumType" reftitle="freestyle.types.MediumType"><literal classes="xref py py-class">MediumType</literal></reference></paragraph>
                <paragraph>The different blending modes available to similate the interaction
                    media-medium:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Stroke.DRY_MEDIUM: To simulate a dry medium such as Pencil or Charcoal.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Stroke.HUMID_MEDIUM: To simulate ink painting (color substraction blending).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Stroke.OPAQUE_MEDIUM: To simulate an opaque medium (oil, spray…).</paragraph>
                    </list_item>
                </bullet_list>
            </desc_content>
        </desc>
        <index entries="['single',\ u'Nature\ (class\ in\ freestyle.types)',\ u'freestyle.types.Nature',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Nature" ids="freestyle.types.Nature" module="freestyle.types" names="freestyle.types.Nature"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">Nature</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: int &gt; <reference internal="True" refid="freestyle.types.Nature" reftitle="freestyle.types.Nature"><literal classes="xref py py-class">Nature</literal></reference></paragraph>
                <paragraph>Different possible natures of 0D and 1D elements of the ViewMap.</paragraph>
                <paragraph>Vertex natures:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Nature.POINT: True for any 0D element.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Nature.S_VERTEX: True for SVertex.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Nature.VIEW_VERTEX: True for ViewVertex.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Nature.NON_T_VERTEX: True for NonTVertex.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Nature.T_VERTEX: True for TVertex.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Nature.CUSP: True for CUSP.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Edge natures:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Nature.NO_FEATURE: True for non feature edges (always false for 1D
                            elements of the ViewMap).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Nature.SILHOUETTE: True for silhouettes.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Nature.BORDER: True for borders.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Nature.CREASE: True for creases.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Nature.RIDGE: True for ridges.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Nature.VALLEY: True for valleys.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Nature.SUGGESTIVE_CONTOUR: True for suggestive contours.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Nature.MATERIAL_BOUNDARY: True for edges at material boundaries.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Nature.EDGE_MARK: True for edges having user-defined edge marks.</paragraph>
                    </list_item>
                </bullet_list>
            </desc_content>
        </desc>
        <index entries="['single',\ u'Noise\ (class\ in\ freestyle.types)',\ u'freestyle.types.Noise',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Noise" ids="freestyle.types.Noise" module="freestyle.types" names="freestyle.types.Noise"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">Noise</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class to provide Perlin noise functionalities.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.Noise\ method)',\ u'freestyle.types.Noise.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Noise" first="False" fullname="Noise.__init__" ids="freestyle.types.Noise.__init__" module="freestyle.types" names="freestyle.types.Noise.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">seed = -1</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a Noise object.  Seed is an optional argument.  The seed value is used
                            as a seed for random number generation if it is equal to or greater than zero;
                            otherwise, time is used as a seed.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">seed</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Seed for random number generation.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <paragraph>Undocumented <title_reference>contribute &lt;https://developer.blender.org/T51061&gt;</title_reference></paragraph>
                <index entries="['single',\ u'smoothNoise1()\ (freestyle.types.Noise\ method)',\ u'freestyle.types.Noise.smoothNoise1',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Noise" first="False" fullname="Noise.smoothNoise1" ids="freestyle.types.Noise.smoothNoise1" module="freestyle.types" names="freestyle.types.Noise.smoothNoise1"><desc_name xml:space="preserve">smoothNoise1</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">v</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns a smooth noise value for a 1D element.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">v</literal_strong> (<literal_emphasis>float</literal_emphasis>) – One-dimensional sample point.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>A smooth noise value.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'smoothNoise2()\ (freestyle.types.Noise\ method)',\ u'freestyle.types.Noise.smoothNoise2',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Noise" first="False" fullname="Noise.smoothNoise2" ids="freestyle.types.Noise.smoothNoise2" module="freestyle.types" names="freestyle.types.Noise.smoothNoise2"><desc_name xml:space="preserve">smoothNoise2</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">v</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns a smooth noise value for a 2D element.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">v</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference>, list or tuple of 2 real numbers) – Two-dimensional sample point.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>A smooth noise value.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'smoothNoise3()\ (freestyle.types.Noise\ method)',\ u'freestyle.types.Noise.smoothNoise3',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Noise" first="False" fullname="Noise.smoothNoise3" ids="freestyle.types.Noise.smoothNoise3" module="freestyle.types" names="freestyle.types.Noise.smoothNoise3"><desc_name xml:space="preserve">smoothNoise3</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">v</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns a smooth noise value for a 3D element.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">v</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference>, list or tuple of 3 real numbers) – Three-dimensional sample point.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>A smooth noise value.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'turbulence1()\ (freestyle.types.Noise\ method)',\ u'freestyle.types.Noise.turbulence1',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Noise" first="False" fullname="Noise.turbulence1" ids="freestyle.types.Noise.turbulence1" module="freestyle.types" names="freestyle.types.Noise.turbulence1"><desc_name xml:space="preserve">turbulence1</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">v</desc_parameter><desc_parameter xml:space="preserve">freq</desc_parameter><desc_parameter xml:space="preserve">amp</desc_parameter><desc_parameter xml:space="preserve">oct=4</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns a noise value for a 1D element.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">v</literal_strong> (<literal_emphasis>float</literal_emphasis>) – One-dimensional sample point.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">freq</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Noise frequency.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">amp</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Amplitude.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">oct</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Number of octaves.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>A noise value.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'turbulence2()\ (freestyle.types.Noise\ method)',\ u'freestyle.types.Noise.turbulence2',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Noise" first="False" fullname="Noise.turbulence2" ids="freestyle.types.Noise.turbulence2" module="freestyle.types" names="freestyle.types.Noise.turbulence2"><desc_name xml:space="preserve">turbulence2</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">v</desc_parameter><desc_parameter xml:space="preserve">freq</desc_parameter><desc_parameter xml:space="preserve">amp</desc_parameter><desc_parameter xml:space="preserve">oct=4</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns a noise value for a 2D element.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">v</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference>, list or tuple of 2 real numbers) – Two-dimensional sample point.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">freq</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Noise frequency.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">amp</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Amplitude.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">oct</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Number of octaves.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>A noise value.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'turbulence3()\ (freestyle.types.Noise\ method)',\ u'freestyle.types.Noise.turbulence3',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Noise" first="False" fullname="Noise.turbulence3" ids="freestyle.types.Noise.turbulence3" module="freestyle.types" names="freestyle.types.Noise.turbulence3"><desc_name xml:space="preserve">turbulence3</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">v</desc_parameter><desc_parameter xml:space="preserve">freq</desc_parameter><desc_parameter xml:space="preserve">amp</desc_parameter><desc_parameter xml:space="preserve">oct=4</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns a noise value for a 3D element.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">v</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference>, list or tuple of 3 real numbers) – Three-dimensional sample point.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">freq</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Noise frequency.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">amp</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Amplitude.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">oct</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Number of octaves.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>A noise value.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <paragraph>Undocumented <title_reference>contribute &lt;https://developer.blender.org/T51061&gt;</title_reference></paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ u'NonTVertex\ (class\ in\ freestyle.types)',\ u'freestyle.types.NonTVertex',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="NonTVertex" ids="freestyle.types.NonTVertex" module="freestyle.types" names="freestyle.types.NonTVertex"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">NonTVertex</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Interface0D" reftitle="freestyle.types.Interface0D"><literal classes="xref py py-class">Interface0D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.ViewVertex" reftitle="freestyle.types.ViewVertex"><literal classes="xref py py-class">ViewVertex</literal></reference> &gt; <reference internal="True" refid="freestyle.types.NonTVertex" reftitle="freestyle.types.NonTVertex"><literal classes="xref py py-class">NonTVertex</literal></reference></paragraph>
                <paragraph>View vertex for corners, cusps, etc. associated to a single SVertex.
                    Can be associated to 2 or more view edges.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.NonTVertex\ method)',\ u'freestyle.types.NonTVertex.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="NonTVertex" first="False" fullname="NonTVertex.__init__" ids="freestyle.types.NonTVertex.__init__" module="freestyle.types" names="freestyle.types.NonTVertex.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.NonTVertex\ method)',\ u'freestyle.types.NonTVertex.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="NonTVertex" first="False" fullname="NonTVertex.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">svertex</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Build a NonTVertex from a SVertex.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">svertex</literal_strong> (<reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference>) – An SVertex object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'svertex\ (freestyle.types.NonTVertex\ attribute)',\ u'freestyle.types.NonTVertex.svertex',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="NonTVertex" first="False" fullname="NonTVertex.svertex" ids="freestyle.types.NonTVertex.svertex" module="freestyle.types" names="freestyle.types.NonTVertex.svertex"><desc_name xml:space="preserve">svertex</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The SVertex on top of which this NonTVertex is built.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'Operators\ (class\ in\ freestyle.types)',\ u'freestyle.types.Operators',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Operators" ids="freestyle.types.Operators" module="freestyle.types" names="freestyle.types.Operators"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">Operators</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class defining the operators used in a style module.  There are five
                    types of operators: Selection, chaining, splitting, sorting and
                    creation.  All these operators are user controlled through functors,
                    predicates and shaders that are taken as arguments.</paragraph>
                <index entries="['single',\ u'bidirectional_chain()\ (freestyle.types.Operators\ static\ method)',\ u'freestyle.types.Operators.bidirectional_chain',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="Operators" first="False" fullname="Operators.bidirectional_chain" ids="freestyle.types.Operators.bidirectional_chain" module="freestyle.types" names="freestyle.types.Operators.bidirectional_chain"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">bidirectional_chain</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">it</desc_parameter><desc_parameter xml:space="preserve">pred</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a set of chains from the current set of ViewEdges.  Each
                            ViewEdge of the current list potentially starts a new chain.  The
                            chaining operator then iterates over the ViewEdges of the ViewMap
                            using the user specified iterator.  This operator iterates both using
                            the increment and decrement operators and is therefore bidirectional.
                            This operator works with a ChainingIterator which contains the
                            chaining rules.  It is this last one which can be told to chain only
                            edges that belong to the selection or not to process twice a ViewEdge
                            during the chaining.  Each time a ViewEdge is added to a chain, its
                            chaining time stamp is incremented.  This allows you to keep track of
                            the number of chains to which a ViewEdge belongs to.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">it</literal_strong> (<reference internal="True" refid="freestyle.types.ChainingIterator" reftitle="freestyle.types.ChainingIterator"><literal classes="xref py py-class">ChainingIterator</literal></reference>) – The ChainingIterator on the ViewEdges of the ViewMap.  It
                                                contains the chaining rule.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">pred</literal_strong> (<reference internal="True" refid="freestyle.types.UnaryPredicate1D" reftitle="freestyle.types.UnaryPredicate1D"><literal classes="xref py py-class">UnaryPredicate1D</literal></reference>) – The predicate on the ViewEdge that expresses the
                                                stopping condition.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'bidirectional_chain()\ (freestyle.types.Operators\ static\ method)',\ u'freestyle.types.Operators.bidirectional_chain',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="Operators" first="False" fullname="Operators.bidirectional_chain" module="freestyle.types"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">bidirectional_chain</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">it</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>The only difference with the above bidirectional chaining algorithm
                            is that we don’t need to pass a stopping criterion.  This might be
                            desirable when the stopping criterion is already contained in the
                            iterator definition.  Builds a set of chains from the current set of
                            ViewEdges.  Each ViewEdge of the current list potentially starts a new
                            chain.  The chaining operator then iterates over the ViewEdges of the
                            ViewMap using the user specified iterator.  This operator iterates
                            both using the increment and decrement operators and is therefore
                            bidirectional.  This operator works with a ChainingIterator which
                            contains the chaining rules.  It is this last one which can be told to
                            chain only edges that belong to the selection or not to process twice
                            a ViewEdge during the chaining.  Each time a ViewEdge is added to a
                            chain, its chaining time stamp is incremented.  This allows you to
                            keep track of the number of chains to which a ViewEdge belongs to.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">it</literal_strong> (<reference internal="True" refid="freestyle.types.ChainingIterator" reftitle="freestyle.types.ChainingIterator"><literal classes="xref py py-class">ChainingIterator</literal></reference>) – The ChainingIterator on the ViewEdges of the ViewMap.  It
                                        contains the chaining rule.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'chain()\ (freestyle.types.Operators\ static\ method)',\ u'freestyle.types.Operators.chain',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="Operators" first="False" fullname="Operators.chain" ids="freestyle.types.Operators.chain" module="freestyle.types" names="freestyle.types.Operators.chain"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">chain</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">it</desc_parameter><desc_parameter xml:space="preserve">pred</desc_parameter><desc_parameter xml:space="preserve">modifier</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a set of chains from the current set of ViewEdges.  Each
                            ViewEdge of the current list starts a new chain.  The chaining
                            operator then iterates over the ViewEdges of the ViewMap using the
                            user specified iterator.  This operator only iterates using the
                            increment operator and is therefore unidirectional.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">it</literal_strong> (<reference internal="True" refid="freestyle.types.ViewEdgeIterator" reftitle="freestyle.types.ViewEdgeIterator"><literal classes="xref py py-class">ViewEdgeIterator</literal></reference>) – The iterator on the ViewEdges of the ViewMap. It contains
                                                the chaining rule.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">pred</literal_strong> (<reference internal="True" refid="freestyle.types.UnaryPredicate1D" reftitle="freestyle.types.UnaryPredicate1D"><literal classes="xref py py-class">UnaryPredicate1D</literal></reference>) – The predicate on the ViewEdge that expresses the
                                                stopping condition.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">modifier</literal_strong> (<reference internal="True" refid="freestyle.types.UnaryFunction1DVoid" reftitle="freestyle.types.UnaryFunction1DVoid"><literal classes="xref py py-class">UnaryFunction1DVoid</literal></reference>) – A function that takes a ViewEdge as argument and
                                                that is used to modify the processed ViewEdge state (the
                                                timestamp incrementation is a typical illustration of such a
                                                modifier).</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'chain()\ (freestyle.types.Operators\ static\ method)',\ u'freestyle.types.Operators.chain',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="Operators" first="False" fullname="Operators.chain" module="freestyle.types"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">chain</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">it</desc_parameter><desc_parameter xml:space="preserve">pred</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a set of chains from the current set of ViewEdges.  Each
                            ViewEdge of the current list starts a new chain.  The chaining
                            operator then iterates over the ViewEdges of the ViewMap using the
                            user specified iterator.  This operator only iterates using the
                            increment operator and is therefore unidirectional.  This chaining
                            operator is different from the previous one because it doesn’t take
                            any modifier as argument.  Indeed, the time stamp (insuring that a
                            ViewEdge is processed one time) is automatically managed in this
                            case.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">it</literal_strong> (<reference internal="True" refid="freestyle.types.ViewEdgeIterator" reftitle="freestyle.types.ViewEdgeIterator"><literal classes="xref py py-class">ViewEdgeIterator</literal></reference>) – The iterator on the ViewEdges of the ViewMap. It contains
                                                the chaining rule.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">pred</literal_strong> (<reference internal="True" refid="freestyle.types.UnaryPredicate1D" reftitle="freestyle.types.UnaryPredicate1D"><literal classes="xref py py-class">UnaryPredicate1D</literal></reference>) – The predicate on the ViewEdge that expresses the
                                                stopping condition.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'create()\ (freestyle.types.Operators\ static\ method)',\ u'freestyle.types.Operators.create',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="Operators" first="False" fullname="Operators.create" ids="freestyle.types.Operators.create" module="freestyle.types" names="freestyle.types.Operators.create"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">pred</desc_parameter><desc_parameter xml:space="preserve">shaders</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Creates and shades the strokes from the current set of chains.  A
                            predicate can be specified to make a selection pass on the chains.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">pred</literal_strong> (<reference internal="True" refid="freestyle.types.UnaryPredicate1D" reftitle="freestyle.types.UnaryPredicate1D"><literal classes="xref py py-class">UnaryPredicate1D</literal></reference>) – The predicate that a chain must verify in order to be
                                                transform as a stroke.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">shaders</literal_strong> (list of <reference internal="True" refid="freestyle.types.StrokeShader" reftitle="freestyle.types.StrokeShader"><literal classes="xref py py-class">StrokeShader</literal></reference> objects) – The list of shaders used to shade the strokes.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'get_chain_from_index()\ (freestyle.types.Operators\ static\ method)',\ u'freestyle.types.Operators.get_chain_from_index',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="Operators" first="False" fullname="Operators.get_chain_from_index" ids="freestyle.types.Operators.get_chain_from_index" module="freestyle.types" names="freestyle.types.Operators.get_chain_from_index"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">get_chain_from_index</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">i</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns the Chain at the index in the current set of Chains.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">i</literal_strong> (<literal_emphasis>int</literal_emphasis>) – index (0 &lt;= i &lt; Operators.get_chains_size()).</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The Chain object.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Chain" reftitle="freestyle.types.Chain"><literal classes="xref py py-class">Chain</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'get_chains_size()\ (freestyle.types.Operators\ static\ method)',\ u'freestyle.types.Operators.get_chains_size',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="Operators" first="False" fullname="Operators.get_chains_size" ids="freestyle.types.Operators.get_chains_size" module="freestyle.types" names="freestyle.types.Operators.get_chains_size"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">get_chains_size</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns the number of Chains.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The number of Chains.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'get_stroke_from_index()\ (freestyle.types.Operators\ static\ method)',\ u'freestyle.types.Operators.get_stroke_from_index',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="Operators" first="False" fullname="Operators.get_stroke_from_index" ids="freestyle.types.Operators.get_stroke_from_index" module="freestyle.types" names="freestyle.types.Operators.get_stroke_from_index"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">get_stroke_from_index</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">i</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns the Stroke at the index in the current set of Strokes.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">i</literal_strong> (<literal_emphasis>int</literal_emphasis>) – index (0 &lt;= i &lt; Operators.get_strokes_size()).</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The Stroke object.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Stroke" reftitle="freestyle.types.Stroke"><literal classes="xref py py-class">Stroke</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'get_strokes_size()\ (freestyle.types.Operators\ static\ method)',\ u'freestyle.types.Operators.get_strokes_size',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="Operators" first="False" fullname="Operators.get_strokes_size" ids="freestyle.types.Operators.get_strokes_size" module="freestyle.types" names="freestyle.types.Operators.get_strokes_size"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">get_strokes_size</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns the number of Strokes.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The number of Strokes.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'get_view_edges_size()\ (freestyle.types.Operators\ static\ method)',\ u'freestyle.types.Operators.get_view_edges_size',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="Operators" first="False" fullname="Operators.get_view_edges_size" ids="freestyle.types.Operators.get_view_edges_size" module="freestyle.types" names="freestyle.types.Operators.get_view_edges_size"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">get_view_edges_size</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns the number of ViewEdges.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The number of ViewEdges.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'get_viewedge_from_index()\ (freestyle.types.Operators\ static\ method)',\ u'freestyle.types.Operators.get_viewedge_from_index',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="Operators" first="False" fullname="Operators.get_viewedge_from_index" ids="freestyle.types.Operators.get_viewedge_from_index" module="freestyle.types" names="freestyle.types.Operators.get_viewedge_from_index"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">get_viewedge_from_index</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">i</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns the ViewEdge at the index in the current set of ViewEdges.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">i</literal_strong> (<literal_emphasis>int</literal_emphasis>) – index (0 &lt;= i &lt; Operators.get_view_edges_size()).</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The ViewEdge object.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'recursive_split()\ (freestyle.types.Operators\ static\ method)',\ u'freestyle.types.Operators.recursive_split',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="Operators" first="False" fullname="Operators.recursive_split" ids="freestyle.types.Operators.recursive_split" module="freestyle.types" names="freestyle.types.Operators.recursive_split"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">recursive_split</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">func</desc_parameter><desc_parameter xml:space="preserve">pred_1d</desc_parameter><desc_parameter xml:space="preserve">sampling=0.0</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Splits the current set of chains in a recursive way.  We process the
                            points of each chain (with a specified sampling) to find the point
                            minimizing a specified function.  The chain is split in two at this
                            point and the two new chains are processed in the same way.  The
                            recursivity level is controlled through a predicate 1D that expresses
                            a stopping condition on the chain that is about to be processed.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">func</literal_strong> (<reference internal="True" refid="freestyle.types.UnaryFunction0DDouble" reftitle="freestyle.types.UnaryFunction0DDouble"><literal classes="xref py py-class">UnaryFunction0DDouble</literal></reference>) – The Unary Function evaluated at each point of the chain.
                                                The splitting point is the point minimizing this function.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">pred_1d</literal_strong> (<reference internal="True" refid="freestyle.types.UnaryPredicate1D" reftitle="freestyle.types.UnaryPredicate1D"><literal classes="xref py py-class">UnaryPredicate1D</literal></reference>) – The Unary Predicate expressing the recursivity stopping
                                                condition.  This predicate is evaluated for each curve before it
                                                actually gets split.  If pred_1d(chain) is true, the curve won’t be
                                                split anymore.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">sampling</literal_strong> (<literal_emphasis>float</literal_emphasis>) – The resolution used to sample the chain for the
                                                predicates evaluation. (The chain is not actually resampled, a
                                                virtual point only progresses along the curve using this
                                                resolution.)</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'recursive_split()\ (freestyle.types.Operators\ static\ method)',\ u'freestyle.types.Operators.recursive_split',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="Operators" first="False" fullname="Operators.recursive_split" module="freestyle.types"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">recursive_split</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">func</desc_parameter><desc_parameter xml:space="preserve">pred_0d</desc_parameter><desc_parameter xml:space="preserve">pred_1d</desc_parameter><desc_parameter xml:space="preserve">sampling=0.0</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Splits the current set of chains in a recursive way.  We process the
                            points of each chain (with a specified sampling) to find the point
                            minimizing a specified function.  The chain is split in two at this
                            point and the two new chains are processed in the same way.  The user
                            can specify a 0D predicate to make a first selection on the points
                            that can potentially be split.  A point that doesn’t verify the 0D
                            predicate won’t be candidate in realizing the min.  The recursivity
                            level is controlled through a predicate 1D that expresses a stopping
                            condition on the chain that is about to be processed.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">func</literal_strong> (<reference internal="True" refid="freestyle.types.UnaryFunction0DDouble" reftitle="freestyle.types.UnaryFunction0DDouble"><literal classes="xref py py-class">UnaryFunction0DDouble</literal></reference>) – The Unary Function evaluated at each point of the chain.
                                                The splitting point is the point minimizing this function.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">pred_0d</literal_strong> (<reference internal="True" refid="freestyle.types.UnaryPredicate0D" reftitle="freestyle.types.UnaryPredicate0D"><literal classes="xref py py-class">UnaryPredicate0D</literal></reference>) – The Unary Predicate 0D used to select the candidate
                                                points where the split can occur.  For example, it is very likely
                                                that would rather have your chain splitting around its middle
                                                point than around one of its extremities.  A 0D predicate working
                                                on the curvilinear abscissa allows to add this kind of constraints.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">pred_1d</literal_strong> (<reference internal="True" refid="freestyle.types.UnaryPredicate1D" reftitle="freestyle.types.UnaryPredicate1D"><literal classes="xref py py-class">UnaryPredicate1D</literal></reference>) – The Unary Predicate expressing the recursivity stopping
                                                condition. This predicate is evaluated for each curve before it
                                                actually gets split.  If pred_1d(chain) is true, the curve won’t be
                                                split anymore.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">sampling</literal_strong> (<literal_emphasis>float</literal_emphasis>) – The resolution used to sample the chain for the
                                                predicates evaluation. (The chain is not actually resampled; a
                                                virtual point only progresses along the curve using this
                                                resolution.)</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'reset()\ (freestyle.types.Operators\ static\ method)',\ u'freestyle.types.Operators.reset',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="Operators" first="False" fullname="Operators.reset" ids="freestyle.types.Operators.reset" module="freestyle.types" names="freestyle.types.Operators.reset"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">reset</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">delete_strokes=True</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Resets the line stylization process to the initial state.  The results of
                            stroke creation are accumulated if <strong>delete_strokes</strong> is set to False.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">delete_strokes</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Delete the strokes that are currently stored.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'select()\ (freestyle.types.Operators\ static\ method)',\ u'freestyle.types.Operators.select',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="Operators" first="False" fullname="Operators.select" ids="freestyle.types.Operators.select" module="freestyle.types" names="freestyle.types.Operators.select"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">select</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">pred</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Selects the ViewEdges of the ViewMap verifying a specified
                            condition.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">pred</literal_strong> (<reference internal="True" refid="freestyle.types.UnaryPredicate1D" reftitle="freestyle.types.UnaryPredicate1D"><literal classes="xref py py-class">UnaryPredicate1D</literal></reference>) – The predicate expressing this condition.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'sequential_split()\ (freestyle.types.Operators\ static\ method)',\ u'freestyle.types.Operators.sequential_split',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="Operators" first="False" fullname="Operators.sequential_split" ids="freestyle.types.Operators.sequential_split" module="freestyle.types" names="freestyle.types.Operators.sequential_split"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">sequential_split</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">starting_pred</desc_parameter><desc_parameter xml:space="preserve">stopping_pred</desc_parameter><desc_parameter xml:space="preserve">sampling=0.0</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Splits each chain of the current set of chains in a sequential way.
                            The points of each chain are processed (with a specified sampling)
                            sequentially. Each time a user specified starting condition is
                            verified, a new chain begins and ends as soon as a user-defined
                            stopping predicate is verified. This allows chains overlapping rather
                            than chains partitioning. The first point of the initial chain is the
                            first point of one of the resulting chains. The splitting ends when
                            no more chain can start.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">starting_pred</literal_strong> (<reference internal="True" refid="freestyle.types.UnaryPredicate0D" reftitle="freestyle.types.UnaryPredicate0D"><literal classes="xref py py-class">UnaryPredicate0D</literal></reference>) – The predicate on a point that expresses the
                                                starting condition.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">stopping_pred</literal_strong> (<reference internal="True" refid="freestyle.types.UnaryPredicate0D" reftitle="freestyle.types.UnaryPredicate0D"><literal classes="xref py py-class">UnaryPredicate0D</literal></reference>) – The predicate on a point that expresses the
                                                stopping condition.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">sampling</literal_strong> (<literal_emphasis>float</literal_emphasis>) – The resolution used to sample the chain for the
                                                predicates evaluation. (The chain is not actually resampled;
                                                a virtual point only progresses along the curve using this
                                                resolution.)</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'sequential_split()\ (freestyle.types.Operators\ static\ method)',\ u'freestyle.types.Operators.sequential_split',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="Operators" first="False" fullname="Operators.sequential_split" module="freestyle.types"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">sequential_split</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">pred</desc_parameter><desc_parameter xml:space="preserve">sampling=0.0</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Splits each chain of the current set of chains in a sequential way.
                            The points of each chain are processed (with a specified sampling)
                            sequentially and each time a user specified condition is verified,
                            the chain is split into two chains.  The resulting set of chains is a
                            partition of the initial chain</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">pred</literal_strong> (<reference internal="True" refid="freestyle.types.UnaryPredicate0D" reftitle="freestyle.types.UnaryPredicate0D"><literal classes="xref py py-class">UnaryPredicate0D</literal></reference>) – The predicate on a point that expresses the splitting
                                                condition.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">sampling</literal_strong> (<literal_emphasis>float</literal_emphasis>) – The resolution used to sample the chain for the
                                                predicate evaluation. (The chain is not actually resampled; a
                                                virtual point only progresses along the curve using this
                                                resolution.)</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'sort()\ (freestyle.types.Operators\ static\ method)',\ u'freestyle.types.Operators.sort',\ '',\ None]"></index>
                <desc desctype="staticmethod" domain="py" noindex="False" objtype="staticmethod">
                    <desc_signature class="Operators" first="False" fullname="Operators.sort" ids="freestyle.types.Operators.sort" module="freestyle.types" names="freestyle.types.Operators.sort"><desc_annotation xml:space="preserve">static </desc_annotation><desc_name xml:space="preserve">sort</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">pred</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Sorts the current set of chains (or viewedges) according to the
                            comparison predicate given as argument.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">pred</literal_strong> (<reference internal="True" refid="freestyle.types.BinaryPredicate1D" reftitle="freestyle.types.BinaryPredicate1D"><literal classes="xref py py-class">BinaryPredicate1D</literal></reference>) – The binary predicate used for the comparison.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'SShape\ (class\ in\ freestyle.types)',\ u'freestyle.types.SShape',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="SShape" ids="freestyle.types.SShape" module="freestyle.types" names="freestyle.types.SShape"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">SShape</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class to define a feature shape.  It is the gathering of feature
                    elements from an identified input shape.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.SShape\ method)',\ u'freestyle.types.SShape.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SShape" first="False" fullname="SShape.__init__" ids="freestyle.types.SShape.__init__" module="freestyle.types" names="freestyle.types.SShape.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.SShape\ method)',\ u'freestyle.types.SShape.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SShape" first="False" fullname="SShape.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<reference internal="True" refid="freestyle.types.SShape" reftitle="freestyle.types.SShape"><literal classes="xref py py-class">SShape</literal></reference>) – An SShape object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'add_edge()\ (freestyle.types.SShape\ method)',\ u'freestyle.types.SShape.add_edge',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SShape" first="False" fullname="SShape.add_edge" ids="freestyle.types.SShape.add_edge" module="freestyle.types" names="freestyle.types.SShape.add_edge"><desc_name xml:space="preserve">add_edge</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">edge</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Adds an FEdge to the list of FEdges.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">edge</literal_strong> (<reference internal="True" refid="freestyle.types.FEdge" reftitle="freestyle.types.FEdge"><literal classes="xref py py-class">FEdge</literal></reference>) – An FEdge object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'add_vertex()\ (freestyle.types.SShape\ method)',\ u'freestyle.types.SShape.add_vertex',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SShape" first="False" fullname="SShape.add_vertex" ids="freestyle.types.SShape.add_vertex" module="freestyle.types" names="freestyle.types.SShape.add_vertex"><desc_name xml:space="preserve">add_vertex</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">vertex</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Adds an SVertex to the list of SVertex of this Shape.  The SShape
                            attribute of the SVertex is also set to this SShape.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">vertex</literal_strong> (<reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference>) – An SVertex object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'compute_bbox()\ (freestyle.types.SShape\ method)',\ u'freestyle.types.SShape.compute_bbox',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SShape" first="False" fullname="SShape.compute_bbox" ids="freestyle.types.SShape.compute_bbox" module="freestyle.types" names="freestyle.types.SShape.compute_bbox"><desc_name xml:space="preserve">compute_bbox</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Compute the bbox of the SShape.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'bbox\ (freestyle.types.SShape\ attribute)',\ u'freestyle.types.SShape.bbox',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SShape" first="False" fullname="SShape.bbox" ids="freestyle.types.SShape.bbox" module="freestyle.types" names="freestyle.types.SShape.bbox"><desc_name xml:space="preserve">bbox</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The bounding box of the SShape.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.BBox" reftitle="freestyle.types.BBox"><literal classes="xref py py-class">BBox</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'edges\ (freestyle.types.SShape\ attribute)',\ u'freestyle.types.SShape.edges',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SShape" first="False" fullname="SShape.edges" ids="freestyle.types.SShape.edges" module="freestyle.types" names="freestyle.types.SShape.edges"><desc_name xml:space="preserve">edges</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The list of edges constituting this SShape.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>List of <reference internal="True" refid="freestyle.types.FEdge" reftitle="freestyle.types.FEdge"><literal classes="xref py py-class">FEdge</literal></reference> objects</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'id\ (freestyle.types.SShape\ attribute)',\ u'freestyle.types.SShape.id',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SShape" first="False" fullname="SShape.id" ids="freestyle.types.SShape.id" module="freestyle.types" names="freestyle.types.SShape.id"><desc_name xml:space="preserve">id</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The Id of this SShape.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Id" reftitle="freestyle.types.Id"><literal classes="xref py py-class">Id</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'name\ (freestyle.types.SShape\ attribute)',\ u'freestyle.types.SShape.name',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SShape" first="False" fullname="SShape.name" ids="freestyle.types.SShape.name" module="freestyle.types" names="freestyle.types.SShape.name"><desc_name xml:space="preserve">name</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The name of the SShape.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>str</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'vertices\ (freestyle.types.SShape\ attribute)',\ u'freestyle.types.SShape.vertices',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SShape" first="False" fullname="SShape.vertices" ids="freestyle.types.SShape.vertices" module="freestyle.types" names="freestyle.types.SShape.vertices"><desc_name xml:space="preserve">vertices</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The list of vertices constituting this SShape.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>List of <reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference> objects</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'SVertex\ (class\ in\ freestyle.types)',\ u'freestyle.types.SVertex',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="SVertex" ids="freestyle.types.SVertex" module="freestyle.types" names="freestyle.types.SVertex"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">SVertex</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Interface0D" reftitle="freestyle.types.Interface0D"><literal classes="xref py py-class">Interface0D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference></paragraph>
                <paragraph>Class to define a vertex of the embedding.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.SVertex\ method)',\ u'freestyle.types.SVertex.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SVertex" first="False" fullname="SVertex.__init__" ids="freestyle.types.SVertex.__init__" module="freestyle.types" names="freestyle.types.SVertex.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.SVertex\ method)',\ u'freestyle.types.SVertex.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SVertex" first="False" fullname="SVertex.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference>) – A SVertex object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.SVertex\ method)',\ u'freestyle.types.SVertex.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SVertex" first="False" fullname="SVertex.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">point_3d</desc_parameter><desc_parameter xml:space="preserve">id</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a SVertex from 3D coordinates and an Id.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">point_3d</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference>) – A three-dimensional vector.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">id</literal_strong> (<reference internal="True" refid="freestyle.types.Id" reftitle="freestyle.types.Id"><literal classes="xref py py-class">Id</literal></reference>) – An Id object.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'add_fedge()\ (freestyle.types.SVertex\ method)',\ u'freestyle.types.SVertex.add_fedge',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SVertex" first="False" fullname="SVertex.add_fedge" ids="freestyle.types.SVertex.add_fedge" module="freestyle.types" names="freestyle.types.SVertex.add_fedge"><desc_name xml:space="preserve">add_fedge</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fedge</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Add an FEdge to the list of edges emanating from this SVertex.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">fedge</literal_strong> (<reference internal="True" refid="freestyle.types.FEdge" reftitle="freestyle.types.FEdge"><literal classes="xref py py-class">FEdge</literal></reference>) – An FEdge.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'add_normal()\ (freestyle.types.SVertex\ method)',\ u'freestyle.types.SVertex.add_normal',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SVertex" first="False" fullname="SVertex.add_normal" ids="freestyle.types.SVertex.add_normal" module="freestyle.types" names="freestyle.types.SVertex.add_normal"><desc_name xml:space="preserve">add_normal</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">normal</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Adds a normal to the SVertex’s set of normals.  If the same normal
                            is already in the set, nothing changes.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">normal</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference>, list or tuple of 3 real numbers) – A three-dimensional vector.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'curvatures\ (freestyle.types.SVertex\ attribute)',\ u'freestyle.types.SVertex.curvatures',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SVertex" first="False" fullname="SVertex.curvatures" ids="freestyle.types.SVertex.curvatures" module="freestyle.types" names="freestyle.types.SVertex.curvatures"><desc_name xml:space="preserve">curvatures</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Curvature information expressed in the form of a seven-element tuple
                            (K1, e1, K2, e2, Kr, er, dKr), where K1 and K2 are scalar values
                            representing the first (maximum) and second (minimum) principal
                            curvatures at this SVertex, respectively; e1 and e2 are
                            three-dimensional vectors representing the first and second principal
                            directions, i.e. the directions of the normal plane where the
                            curvature takes its maximum and minimum values, respectively; and Kr,
                            er and dKr are the radial curvature, radial direction, and the
                            derivative of the radial curvature at this SVertex, respectively.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>tuple</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'id\ (freestyle.types.SVertex\ attribute)',\ u'freestyle.types.SVertex.id',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SVertex" first="False" fullname="SVertex.id" ids="freestyle.types.SVertex.id" module="freestyle.types" names="freestyle.types.SVertex.id"><desc_name xml:space="preserve">id</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The Id of this SVertex.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Id" reftitle="freestyle.types.Id"><literal classes="xref py py-class">Id</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'normals\ (freestyle.types.SVertex\ attribute)',\ u'freestyle.types.SVertex.normals',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SVertex" first="False" fullname="SVertex.normals" ids="freestyle.types.SVertex.normals" module="freestyle.types" names="freestyle.types.SVertex.normals"><desc_name xml:space="preserve">normals</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The normals for this Vertex as a list.  In a sharp surface, an SVertex
                            has exactly one normal.  In a smooth surface, an SVertex can have any
                            number of normals.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>list of <reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference> objects</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'normals_size\ (freestyle.types.SVertex\ attribute)',\ u'freestyle.types.SVertex.normals_size',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SVertex" first="False" fullname="SVertex.normals_size" ids="freestyle.types.SVertex.normals_size" module="freestyle.types" names="freestyle.types.SVertex.normals_size"><desc_name xml:space="preserve">normals_size</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The number of different normals for this SVertex.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'point_2d\ (freestyle.types.SVertex\ attribute)',\ u'freestyle.types.SVertex.point_2d',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SVertex" first="False" fullname="SVertex.point_2d" ids="freestyle.types.SVertex.point_2d" module="freestyle.types" names="freestyle.types.SVertex.point_2d"><desc_name xml:space="preserve">point_2d</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The projected 3D coordinates of the SVertex.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'point_3d\ (freestyle.types.SVertex\ attribute)',\ u'freestyle.types.SVertex.point_3d',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SVertex" first="False" fullname="SVertex.point_3d" ids="freestyle.types.SVertex.point_3d" module="freestyle.types" names="freestyle.types.SVertex.point_3d"><desc_name xml:space="preserve">point_3d</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The 3D coordinates of the SVertex.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'viewvertex\ (freestyle.types.SVertex\ attribute)',\ u'freestyle.types.SVertex.viewvertex',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SVertex" first="False" fullname="SVertex.viewvertex" ids="freestyle.types.SVertex.viewvertex" module="freestyle.types" names="freestyle.types.SVertex.viewvertex"><desc_name xml:space="preserve">viewvertex</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>If this SVertex is also a ViewVertex, this property refers to the
                            ViewVertex, and None otherwise.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.ViewVertex" reftitle="freestyle.types.ViewVertex"><literal classes="xref py py-class">ViewVertex</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'SVertexIterator\ (class\ in\ freestyle.types)',\ u'freestyle.types.SVertexIterator',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="SVertexIterator" ids="freestyle.types.SVertexIterator" module="freestyle.types" names="freestyle.types.SVertexIterator"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">SVertexIterator</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Iterator" reftitle="freestyle.types.Iterator"><literal classes="xref py py-class">Iterator</literal></reference> &gt; <reference internal="True" refid="freestyle.types.SVertexIterator" reftitle="freestyle.types.SVertexIterator"><literal classes="xref py py-class">SVertexIterator</literal></reference></paragraph>
                <paragraph>Class representing an iterator over <reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference> of a
                    <reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference>.  An instance of an SVertexIterator can be obtained
                    from a ViewEdge by calling verticesBegin() or verticesEnd().</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.SVertexIterator\ method)',\ u'freestyle.types.SVertexIterator.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SVertexIterator" first="False" fullname="SVertexIterator.__init__" ids="freestyle.types.SVertexIterator.__init__" module="freestyle.types" names="freestyle.types.SVertexIterator.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.SVertexIterator\ method)',\ u'freestyle.types.SVertexIterator.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SVertexIterator" first="False" fullname="SVertexIterator.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<reference internal="True" refid="freestyle.types.SVertexIterator" reftitle="freestyle.types.SVertexIterator"><literal classes="xref py py-class">SVertexIterator</literal></reference>) – An SVertexIterator object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.SVertexIterator\ method)',\ u'freestyle.types.SVertexIterator.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="SVertexIterator" first="False" fullname="SVertexIterator.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">vertex</desc_parameter><desc_parameter xml:space="preserve">begin</desc_parameter><desc_parameter xml:space="preserve">previous_edge</desc_parameter><desc_parameter xml:space="preserve">next_edge</desc_parameter><desc_parameter xml:space="preserve">t</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Build an SVertexIterator that starts iteration from an SVertex
                            object v.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">vertex</literal_strong> (<reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference>) – The SVertex from which the iterator starts iteration.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">begin</literal_strong> (<reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference>) – The first SVertex of a ViewEdge.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">previous_edge</literal_strong> (<reference internal="True" refid="freestyle.types.FEdge" reftitle="freestyle.types.FEdge"><literal classes="xref py py-class">FEdge</literal></reference>) – The previous FEdge coming to vertex.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">next_edge</literal_strong> (<reference internal="True" refid="freestyle.types.FEdge" reftitle="freestyle.types.FEdge"><literal classes="xref py py-class">FEdge</literal></reference>) – The next FEdge going out from vertex.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">t</literal_strong> (<literal_emphasis>float</literal_emphasis>) – The curvilinear abscissa at vertex.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'object\ (freestyle.types.SVertexIterator\ attribute)',\ u'freestyle.types.SVertexIterator.object',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SVertexIterator" first="False" fullname="SVertexIterator.object" ids="freestyle.types.SVertexIterator.object" module="freestyle.types" names="freestyle.types.SVertexIterator.object"><desc_name xml:space="preserve">object</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The SVertex object currently pointed by this iterator.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u't\ (freestyle.types.SVertexIterator\ attribute)',\ u'freestyle.types.SVertexIterator.t',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SVertexIterator" first="False" fullname="SVertexIterator.t" ids="freestyle.types.SVertexIterator.t" module="freestyle.types" names="freestyle.types.SVertexIterator.t"><desc_name xml:space="preserve">t</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The curvilinear abscissa of the current point.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'u\ (freestyle.types.SVertexIterator\ attribute)',\ u'freestyle.types.SVertexIterator.u',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="SVertexIterator" first="False" fullname="SVertexIterator.u" ids="freestyle.types.SVertexIterator.u" module="freestyle.types" names="freestyle.types.SVertexIterator.u"><desc_name xml:space="preserve">u</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The point parameter at the current point in the 1D element (0 &lt;= u &lt;= 1).</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'Stroke\ (class\ in\ freestyle.types)',\ u'freestyle.types.Stroke',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Stroke" ids="freestyle.types.Stroke" module="freestyle.types" names="freestyle.types.Stroke"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">Stroke</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.Stroke" reftitle="freestyle.types.Stroke"><literal classes="xref py py-class">Stroke</literal></reference></paragraph>
                <paragraph>Class to define a stroke.  A stroke is made of a set of 2D vertices
                    (<reference internal="True" refid="freestyle.types.StrokeVertex" reftitle="freestyle.types.StrokeVertex"><literal classes="xref py py-class">StrokeVertex</literal></reference>), regularly spaced out.  This set of vertices
                    defines the stroke’s backbone geometry.  Each of these stroke vertices
                    defines the stroke’s shape and appearance at this vertex position.</paragraph>
                <index entries="['single',\ u'Stroke()\ (freestyle.types.Stroke\ method)',\ u'freestyle.types.Stroke.Stroke',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Stroke" first="False" fullname="Stroke.Stroke" ids="freestyle.types.Stroke.Stroke" module="freestyle.types" names="freestyle.types.Stroke.Stroke"><desc_name xml:space="preserve">Stroke</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'Stroke()\ (freestyle.types.Stroke\ method)',\ u'freestyle.types.Stroke.Stroke',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Stroke" first="False" fullname="Stroke.Stroke" module="freestyle.types"><desc_name xml:space="preserve">Stroke</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'compute_sampling()\ (freestyle.types.Stroke\ method)',\ u'freestyle.types.Stroke.compute_sampling',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Stroke" first="False" fullname="Stroke.compute_sampling" ids="freestyle.types.Stroke.compute_sampling" module="freestyle.types" names="freestyle.types.Stroke.compute_sampling"><desc_name xml:space="preserve">compute_sampling</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">n</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Compute the sampling needed to get N vertices.  If the
                            specified number of vertices is less than the actual number of
                            vertices, the actual sampling value is returned. (To remove Vertices,
                            use the RemoveVertex() method of this class.)</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">n</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The number of stroke vertices we eventually want
                                        in our Stroke.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The sampling that must be used in the Resample(float)
                                        method.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'insert_vertex()\ (freestyle.types.Stroke\ method)',\ u'freestyle.types.Stroke.insert_vertex',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Stroke" first="False" fullname="Stroke.insert_vertex" ids="freestyle.types.Stroke.insert_vertex" module="freestyle.types" names="freestyle.types.Stroke.insert_vertex"><desc_name xml:space="preserve">insert_vertex</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">vertex</desc_parameter><desc_parameter xml:space="preserve">next</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Inserts the StrokeVertex given as argument into the Stroke before the
                            point specified by next.  The length and curvilinear abscissa are
                            updated consequently.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">vertex</literal_strong> (<reference internal="True" refid="freestyle.types.StrokeVertex" reftitle="freestyle.types.StrokeVertex"><literal classes="xref py py-class">StrokeVertex</literal></reference>) – The StrokeVertex to insert in the Stroke.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">next</literal_strong> (<reference internal="True" refid="freestyle.types.StrokeVertexIterator" reftitle="freestyle.types.StrokeVertexIterator"><literal classes="xref py py-class">StrokeVertexIterator</literal></reference>) – A StrokeVertexIterator pointing to the StrokeVertex
                                                before which vertex must be inserted.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'remove_all_vertices()\ (freestyle.types.Stroke\ method)',\ u'freestyle.types.Stroke.remove_all_vertices',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Stroke" first="False" fullname="Stroke.remove_all_vertices" ids="freestyle.types.Stroke.remove_all_vertices" module="freestyle.types" names="freestyle.types.Stroke.remove_all_vertices"><desc_name xml:space="preserve">remove_all_vertices</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Removes all vertices from the Stroke.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'remove_vertex()\ (freestyle.types.Stroke\ method)',\ u'freestyle.types.Stroke.remove_vertex',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Stroke" first="False" fullname="Stroke.remove_vertex" ids="freestyle.types.Stroke.remove_vertex" module="freestyle.types" names="freestyle.types.Stroke.remove_vertex"><desc_name xml:space="preserve">remove_vertex</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">vertex</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Removes the StrokeVertex given as argument from the Stroke. The length
                            and curvilinear abscissa are updated consequently.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">vertex</literal_strong> (<reference internal="True" refid="freestyle.types.StrokeVertex" reftitle="freestyle.types.StrokeVertex"><literal classes="xref py py-class">StrokeVertex</literal></reference>) – the StrokeVertex to remove from the Stroke.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'resample()\ (freestyle.types.Stroke\ method)',\ u'freestyle.types.Stroke.resample',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Stroke" first="False" fullname="Stroke.resample" ids="freestyle.types.Stroke.resample" module="freestyle.types" names="freestyle.types.Stroke.resample"><desc_name xml:space="preserve">resample</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">n</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Resamples the stroke so that it eventually has N points.  That means
                            it is going to add N-vertices_size, where vertices_size is the
                            number of points we already have.  If vertices_size &gt;= N, no
                            resampling is done.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">n</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The number of vertices we eventually want in our stroke.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'resample()\ (freestyle.types.Stroke\ method)',\ u'freestyle.types.Stroke.resample',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Stroke" first="False" fullname="Stroke.resample" module="freestyle.types"><desc_name xml:space="preserve">resample</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">sampling</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Resamples the stroke with a given sampling.  If the sampling is
                            smaller than the actual sampling value, no resampling is done.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">sampling</literal_strong> (<literal_emphasis>float</literal_emphasis>) – The new sampling value.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'stroke_vertices_begin()\ (freestyle.types.Stroke\ method)',\ u'freestyle.types.Stroke.stroke_vertices_begin',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Stroke" first="False" fullname="Stroke.stroke_vertices_begin" ids="freestyle.types.Stroke.stroke_vertices_begin" module="freestyle.types" names="freestyle.types.Stroke.stroke_vertices_begin"><desc_name xml:space="preserve">stroke_vertices_begin</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">t=0.0</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns a StrokeVertexIterator pointing on the first StrokeVertex of
                            the Stroke. One can specify a sampling value to resample the Stroke
                            on the fly if needed.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">t</literal_strong> (<literal_emphasis>float</literal_emphasis>) – The resampling value with which we want our Stroke to be
                                        resampled.  If 0 is specified, no resampling is done.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>A StrokeVertexIterator pointing on the first StrokeVertex.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.StrokeVertexIterator" reftitle="freestyle.types.StrokeVertexIterator"><literal classes="xref py py-class">StrokeVertexIterator</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'stroke_vertices_end()\ (freestyle.types.Stroke\ method)',\ u'freestyle.types.Stroke.stroke_vertices_end',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Stroke" first="False" fullname="Stroke.stroke_vertices_end" ids="freestyle.types.Stroke.stroke_vertices_end" module="freestyle.types" names="freestyle.types.Stroke.stroke_vertices_end"><desc_name xml:space="preserve">stroke_vertices_end</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns a StrokeVertexIterator pointing after the last StrokeVertex
                            of the Stroke.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>A StrokeVertexIterator pointing after the last StrokeVertex.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.StrokeVertexIterator" reftitle="freestyle.types.StrokeVertexIterator"><literal classes="xref py py-class">StrokeVertexIterator</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'stroke_vertices_size()\ (freestyle.types.Stroke\ method)',\ u'freestyle.types.Stroke.stroke_vertices_size',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Stroke" first="False" fullname="Stroke.stroke_vertices_size" ids="freestyle.types.Stroke.stroke_vertices_size" module="freestyle.types" names="freestyle.types.Stroke.stroke_vertices_size"><desc_name xml:space="preserve">stroke_vertices_size</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns the number of StrokeVertex constituting the Stroke.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The number of stroke vertices.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'update_length()\ (freestyle.types.Stroke\ method)',\ u'freestyle.types.Stroke.update_length',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Stroke" first="False" fullname="Stroke.update_length" ids="freestyle.types.Stroke.update_length" module="freestyle.types" names="freestyle.types.Stroke.update_length"><desc_name xml:space="preserve">update_length</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Updates the 2D length of the Stroke.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'id\ (freestyle.types.Stroke\ attribute)',\ u'freestyle.types.Stroke.id',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Stroke" first="False" fullname="Stroke.id" ids="freestyle.types.Stroke.id" module="freestyle.types" names="freestyle.types.Stroke.id"><desc_name xml:space="preserve">id</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The Id of this Stroke.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Id" reftitle="freestyle.types.Id"><literal classes="xref py py-class">Id</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'length_2d\ (freestyle.types.Stroke\ attribute)',\ u'freestyle.types.Stroke.length_2d',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Stroke" first="False" fullname="Stroke.length_2d" ids="freestyle.types.Stroke.length_2d" module="freestyle.types" names="freestyle.types.Stroke.length_2d"><desc_name xml:space="preserve">length_2d</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The 2D length of the Stroke.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'medium_type\ (freestyle.types.Stroke\ attribute)',\ u'freestyle.types.Stroke.medium_type',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Stroke" first="False" fullname="Stroke.medium_type" ids="freestyle.types.Stroke.medium_type" module="freestyle.types" names="freestyle.types.Stroke.medium_type"><desc_name xml:space="preserve">medium_type</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The MediumType used for this Stroke.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.MediumType" reftitle="freestyle.types.MediumType"><literal classes="xref py py-class">MediumType</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'texture_id\ (freestyle.types.Stroke\ attribute)',\ u'freestyle.types.Stroke.texture_id',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Stroke" first="False" fullname="Stroke.texture_id" ids="freestyle.types.Stroke.texture_id" module="freestyle.types" names="freestyle.types.Stroke.texture_id"><desc_name xml:space="preserve">texture_id</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The ID of the texture used to simulate th marks system for this Stroke.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'tips\ (freestyle.types.Stroke\ attribute)',\ u'freestyle.types.Stroke.tips',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Stroke" first="False" fullname="Stroke.tips" ids="freestyle.types.Stroke.tips" module="freestyle.types" names="freestyle.types.Stroke.tips"><desc_name xml:space="preserve">tips</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>True if this Stroke uses a texture with tips, and false otherwise.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'StrokeAttribute\ (class\ in\ freestyle.types)',\ u'freestyle.types.StrokeAttribute',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="StrokeAttribute" ids="freestyle.types.StrokeAttribute" module="freestyle.types" names="freestyle.types.StrokeAttribute"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">StrokeAttribute</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class to define a set of attributes associated with a <reference internal="True" refid="freestyle.types.StrokeVertex" reftitle="freestyle.types.StrokeVertex"><literal classes="xref py py-class">StrokeVertex</literal></reference>.
                    The attribute set stores the color, alpha and thickness values for a Stroke
                    Vertex.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.StrokeAttribute\ method)',\ u'freestyle.types.StrokeAttribute.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeAttribute" first="False" fullname="StrokeAttribute.__init__" ids="freestyle.types.StrokeAttribute.__init__" module="freestyle.types" names="freestyle.types.StrokeAttribute.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.StrokeAttribute\ method)',\ u'freestyle.types.StrokeAttribute.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeAttribute" first="False" fullname="StrokeAttribute.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<reference internal="True" refid="freestyle.types.StrokeAttribute" reftitle="freestyle.types.StrokeAttribute"><literal classes="xref py py-class">StrokeAttribute</literal></reference>) – A StrokeAttribute object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.StrokeAttribute\ method)',\ u'freestyle.types.StrokeAttribute.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeAttribute" first="False" fullname="StrokeAttribute.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">red</desc_parameter><desc_parameter xml:space="preserve">green</desc_parameter><desc_parameter xml:space="preserve">blue</desc_parameter><desc_parameter xml:space="preserve">alpha</desc_parameter><desc_parameter xml:space="preserve">thickness_right</desc_parameter><desc_parameter xml:space="preserve">thickness_left</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Build a stroke vertex attribute from a set of parameters.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">red</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Red component of a stroke color.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">green</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Green component of a stroke color.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">blue</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Blue component of a stroke color.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">alpha</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Alpha component of a stroke color.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">thickness_right</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Stroke thickness on the right.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">thickness_left</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Stroke thickness on the left.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.StrokeAttribute\ method)',\ u'freestyle.types.StrokeAttribute.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeAttribute" first="False" fullname="StrokeAttribute.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">attribute1</desc_parameter><desc_parameter xml:space="preserve">attribute2</desc_parameter><desc_parameter xml:space="preserve">t</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Interpolation constructor. Build a StrokeAttribute from two
                            StrokeAttribute objects and an interpolation parameter.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">attribute1</literal_strong> (<reference internal="True" refid="freestyle.types.StrokeAttribute" reftitle="freestyle.types.StrokeAttribute"><literal classes="xref py py-class">StrokeAttribute</literal></reference>) – The first StrokeAttribute object.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">attribute2</literal_strong> (<reference internal="True" refid="freestyle.types.StrokeAttribute" reftitle="freestyle.types.StrokeAttribute"><literal classes="xref py py-class">StrokeAttribute</literal></reference>) – The second StrokeAttribute object.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">t</literal_strong> (<literal_emphasis>float</literal_emphasis>) – The interpolation parameter (0 &lt;= t &lt;= 1).</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'get_attribute_real()\ (freestyle.types.StrokeAttribute\ method)',\ u'freestyle.types.StrokeAttribute.get_attribute_real',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeAttribute" first="False" fullname="StrokeAttribute.get_attribute_real" ids="freestyle.types.StrokeAttribute.get_attribute_real" module="freestyle.types" names="freestyle.types.StrokeAttribute.get_attribute_real"><desc_name xml:space="preserve">get_attribute_real</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns an attribute of float type.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>str</literal_emphasis>) – The name of the attribute.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The attribute value.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'get_attribute_vec2()\ (freestyle.types.StrokeAttribute\ method)',\ u'freestyle.types.StrokeAttribute.get_attribute_vec2',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeAttribute" first="False" fullname="StrokeAttribute.get_attribute_vec2" ids="freestyle.types.StrokeAttribute.get_attribute_vec2" module="freestyle.types" names="freestyle.types.StrokeAttribute.get_attribute_vec2"><desc_name xml:space="preserve">get_attribute_vec2</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns an attribute of two-dimensional vector type.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>str</literal_emphasis>) – The name of the attribute.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The attribute value.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'get_attribute_vec3()\ (freestyle.types.StrokeAttribute\ method)',\ u'freestyle.types.StrokeAttribute.get_attribute_vec3',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeAttribute" first="False" fullname="StrokeAttribute.get_attribute_vec3" ids="freestyle.types.StrokeAttribute.get_attribute_vec3" module="freestyle.types" names="freestyle.types.StrokeAttribute.get_attribute_vec3"><desc_name xml:space="preserve">get_attribute_vec3</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns an attribute of three-dimensional vector type.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>str</literal_emphasis>) – The name of the attribute.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The attribute value.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'has_attribute_real()\ (freestyle.types.StrokeAttribute\ method)',\ u'freestyle.types.StrokeAttribute.has_attribute_real',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeAttribute" first="False" fullname="StrokeAttribute.has_attribute_real" ids="freestyle.types.StrokeAttribute.has_attribute_real" module="freestyle.types" names="freestyle.types.StrokeAttribute.has_attribute_real"><desc_name xml:space="preserve">has_attribute_real</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Checks whether the attribute name of float type is available.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>str</literal_emphasis>) – The name of the attribute.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>True if the attribute is availbale.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'has_attribute_vec2()\ (freestyle.types.StrokeAttribute\ method)',\ u'freestyle.types.StrokeAttribute.has_attribute_vec2',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeAttribute" first="False" fullname="StrokeAttribute.has_attribute_vec2" ids="freestyle.types.StrokeAttribute.has_attribute_vec2" module="freestyle.types" names="freestyle.types.StrokeAttribute.has_attribute_vec2"><desc_name xml:space="preserve">has_attribute_vec2</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Checks whether the attribute name of two-dimensional vector type
                            is available.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>str</literal_emphasis>) – The name of the attribute.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>True if the attribute is availbale.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'has_attribute_vec3()\ (freestyle.types.StrokeAttribute\ method)',\ u'freestyle.types.StrokeAttribute.has_attribute_vec3',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeAttribute" first="False" fullname="StrokeAttribute.has_attribute_vec3" ids="freestyle.types.StrokeAttribute.has_attribute_vec3" module="freestyle.types" names="freestyle.types.StrokeAttribute.has_attribute_vec3"><desc_name xml:space="preserve">has_attribute_vec3</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Checks whether the attribute name of three-dimensional vector
                            type is available.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>str</literal_emphasis>) – The name of the attribute.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>True if the attribute is availbale.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'set_attribute_real()\ (freestyle.types.StrokeAttribute\ method)',\ u'freestyle.types.StrokeAttribute.set_attribute_real',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeAttribute" first="False" fullname="StrokeAttribute.set_attribute_real" ids="freestyle.types.StrokeAttribute.set_attribute_real" module="freestyle.types" names="freestyle.types.StrokeAttribute.set_attribute_real"><desc_name xml:space="preserve">set_attribute_real</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">value</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Adds a user-defined attribute of float type.  If there is no
                            attribute of the given name, it is added.  Otherwise, the new value
                            replaces the old one.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>str</literal_emphasis>) – The name of the attribute.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">value</literal_strong> (<literal_emphasis>float</literal_emphasis>) – The attribute value.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'set_attribute_vec2()\ (freestyle.types.StrokeAttribute\ method)',\ u'freestyle.types.StrokeAttribute.set_attribute_vec2',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeAttribute" first="False" fullname="StrokeAttribute.set_attribute_vec2" ids="freestyle.types.StrokeAttribute.set_attribute_vec2" module="freestyle.types" names="freestyle.types.StrokeAttribute.set_attribute_vec2"><desc_name xml:space="preserve">set_attribute_vec2</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">value</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Adds a user-defined attribute of two-dimensional vector type.  If
                            there is no attribute of the given name, it is added.  Otherwise,
                            the new value replaces the old one.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>str</literal_emphasis>) – The name of the attribute.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">value</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference>, list or tuple of 2 real numbers) – The attribute value.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'set_attribute_vec3()\ (freestyle.types.StrokeAttribute\ method)',\ u'freestyle.types.StrokeAttribute.set_attribute_vec3',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeAttribute" first="False" fullname="StrokeAttribute.set_attribute_vec3" ids="freestyle.types.StrokeAttribute.set_attribute_vec3" module="freestyle.types" names="freestyle.types.StrokeAttribute.set_attribute_vec3"><desc_name xml:space="preserve">set_attribute_vec3</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">value</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Adds a user-defined attribute of three-dimensional vector type.
                            If there is no attribute of the given name, it is added.
                            Otherwise, the new value replaces the old one.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>str</literal_emphasis>) – The name of the attribute.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">value</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference>, list or tuple of 3 real numbers) – The attribute value.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'alpha\ (freestyle.types.StrokeAttribute\ attribute)',\ u'freestyle.types.StrokeAttribute.alpha',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="StrokeAttribute" first="False" fullname="StrokeAttribute.alpha" ids="freestyle.types.StrokeAttribute.alpha" module="freestyle.types" names="freestyle.types.StrokeAttribute.alpha"><desc_name xml:space="preserve">alpha</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Alpha component of the stroke color.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'color\ (freestyle.types.StrokeAttribute\ attribute)',\ u'freestyle.types.StrokeAttribute.color',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="StrokeAttribute" first="False" fullname="StrokeAttribute.color" ids="freestyle.types.StrokeAttribute.color" module="freestyle.types" names="freestyle.types.StrokeAttribute.color"><desc_name xml:space="preserve">color</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>RGB components of the stroke color.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="mathutils.Color" refuri="mathutils#mathutils.Color"><literal classes="xref py py-class">mathutils.Color</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'thickness\ (freestyle.types.StrokeAttribute\ attribute)',\ u'freestyle.types.StrokeAttribute.thickness',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="StrokeAttribute" first="False" fullname="StrokeAttribute.thickness" ids="freestyle.types.StrokeAttribute.thickness" module="freestyle.types" names="freestyle.types.StrokeAttribute.thickness"><desc_name xml:space="preserve">thickness</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Right and left components of the stroke thickness.
                            The right (left) component is the thickness on the right (left) of the vertex
                            when following the stroke.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'visible\ (freestyle.types.StrokeAttribute\ attribute)',\ u'freestyle.types.StrokeAttribute.visible',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="StrokeAttribute" first="False" fullname="StrokeAttribute.visible" ids="freestyle.types.StrokeAttribute.visible" module="freestyle.types" names="freestyle.types.StrokeAttribute.visible"><desc_name xml:space="preserve">visible</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The visibility flag.  True if the StrokeVertex is visible.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'StrokeShader\ (class\ in\ freestyle.types)',\ u'freestyle.types.StrokeShader',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="StrokeShader" ids="freestyle.types.StrokeShader" module="freestyle.types" names="freestyle.types.StrokeShader"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">StrokeShader</desc_name></desc_signature>
            <desc_content>
                <paragraph>Base class for stroke shaders.  Any stroke shader must inherit from
                    this class and overload the shade() method.  A StrokeShader is
                    designed to modify stroke attributes such as thickness, color,
                    geometry, texture, blending mode, and so on.  The basic way for this
                    operation is to iterate over the stroke vertices of the <reference internal="True" refid="freestyle.types.Stroke" reftitle="freestyle.types.Stroke"><literal classes="xref py py-class">Stroke</literal></reference>
                    and to modify the <reference internal="True" refid="freestyle.types.StrokeAttribute" reftitle="freestyle.types.StrokeAttribute"><literal classes="xref py py-class">StrokeAttribute</literal></reference> of each vertex.  Here is a
                    code example of such an iteration:</paragraph>
                <literal_block force_highlighting="False" language="default" linenos="False" xml:space="preserve">it = ioStroke.strokeVerticesBegin()
while not it.is_end:
    att = it.object.attribute
    ## perform here any attribute modification
    it.increment()</literal_block>
                <index entries="['single',\ u'__init__()\ (freestyle.types.StrokeShader\ method)',\ u'freestyle.types.StrokeShader.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeShader" first="False" fullname="StrokeShader.__init__" ids="freestyle.types.StrokeShader.__init__" module="freestyle.types" names="freestyle.types.StrokeShader.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'shade()\ (freestyle.types.StrokeShader\ method)',\ u'freestyle.types.StrokeShader.shade',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeShader" first="False" fullname="StrokeShader.shade" ids="freestyle.types.StrokeShader.shade" module="freestyle.types" names="freestyle.types.StrokeShader.shade"><desc_name xml:space="preserve">shade</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">stroke</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>The shading method.  Must be overloaded by inherited classes.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">stroke</literal_strong> (<reference internal="True" refid="freestyle.types.Stroke" reftitle="freestyle.types.Stroke"><literal classes="xref py py-class">Stroke</literal></reference>) – A Stroke object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'name\ (freestyle.types.StrokeShader\ attribute)',\ u'freestyle.types.StrokeShader.name',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="StrokeShader" first="False" fullname="StrokeShader.name" ids="freestyle.types.StrokeShader.name" module="freestyle.types" names="freestyle.types.StrokeShader.name"><desc_name xml:space="preserve">name</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The name of the stroke shader.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>str</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'StrokeVertex\ (class\ in\ freestyle.types)',\ u'freestyle.types.StrokeVertex',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="StrokeVertex" ids="freestyle.types.StrokeVertex" module="freestyle.types" names="freestyle.types.StrokeVertex"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">StrokeVertex</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Interface0D" reftitle="freestyle.types.Interface0D"><literal classes="xref py py-class">Interface0D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.CurvePoint" reftitle="freestyle.types.CurvePoint"><literal classes="xref py py-class">CurvePoint</literal></reference> &gt; <reference internal="True" refid="freestyle.types.StrokeVertex" reftitle="freestyle.types.StrokeVertex"><literal classes="xref py py-class">StrokeVertex</literal></reference></paragraph>
                <paragraph>Class to define a stroke vertex.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.StrokeVertex\ method)',\ u'freestyle.types.StrokeVertex.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeVertex" first="False" fullname="StrokeVertex.__init__" ids="freestyle.types.StrokeVertex.__init__" module="freestyle.types" names="freestyle.types.StrokeVertex.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.StrokeVertex\ method)',\ u'freestyle.types.StrokeVertex.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeVertex" first="False" fullname="StrokeVertex.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<reference internal="True" refid="freestyle.types.StrokeVertex" reftitle="freestyle.types.StrokeVertex"><literal classes="xref py py-class">StrokeVertex</literal></reference>) – A StrokeVertex object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.StrokeVertex\ method)',\ u'freestyle.types.StrokeVertex.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeVertex" first="False" fullname="StrokeVertex.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">first_vertex</desc_parameter><desc_parameter xml:space="preserve">second_vertex</desc_parameter><desc_parameter xml:space="preserve">t3d</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Build a stroke vertex from 2 stroke vertices and an interpolation
                            parameter.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">first_vertex</literal_strong> (<reference internal="True" refid="freestyle.types.StrokeVertex" reftitle="freestyle.types.StrokeVertex"><literal classes="xref py py-class">StrokeVertex</literal></reference>) – The first StrokeVertex.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">second_vertex</literal_strong> (<reference internal="True" refid="freestyle.types.StrokeVertex" reftitle="freestyle.types.StrokeVertex"><literal classes="xref py py-class">StrokeVertex</literal></reference>) – The second StrokeVertex.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">t3d</literal_strong> (<literal_emphasis>float</literal_emphasis>) – An interpolation parameter.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.StrokeVertex\ method)',\ u'freestyle.types.StrokeVertex.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeVertex" first="False" fullname="StrokeVertex.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">point</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Build a stroke vertex from a CurvePoint</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">point</literal_strong> (<reference internal="True" refid="freestyle.types.CurvePoint" reftitle="freestyle.types.CurvePoint"><literal classes="xref py py-class">CurvePoint</literal></reference>) – A CurvePoint object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.StrokeVertex\ method)',\ u'freestyle.types.StrokeVertex.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeVertex" first="False" fullname="StrokeVertex.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">svertex</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Build a stroke vertex from a SVertex</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">svertex</literal_strong> (<reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference>) – An SVertex object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.StrokeVertex\ method)',\ u'freestyle.types.StrokeVertex.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeVertex" first="False" fullname="StrokeVertex.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">svertex</desc_parameter><desc_parameter xml:space="preserve">attribute</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Build a stroke vertex from an SVertex and a StrokeAttribute object.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">svertex</literal_strong> (<reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference>) – An SVertex object.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">attribute</literal_strong> (<reference internal="True" refid="freestyle.types.StrokeAttribute" reftitle="freestyle.types.StrokeAttribute"><literal classes="xref py py-class">StrokeAttribute</literal></reference>) – A StrokeAttribute object.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'attribute\ (freestyle.types.StrokeVertex\ attribute)',\ u'freestyle.types.StrokeVertex.attribute',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="StrokeVertex" first="False" fullname="StrokeVertex.attribute" ids="freestyle.types.StrokeVertex.attribute" module="freestyle.types" names="freestyle.types.StrokeVertex.attribute"><desc_name xml:space="preserve">attribute</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>StrokeAttribute for this StrokeVertex.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.StrokeAttribute" reftitle="freestyle.types.StrokeAttribute"><literal classes="xref py py-class">StrokeAttribute</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'curvilinear_abscissa\ (freestyle.types.StrokeVertex\ attribute)',\ u'freestyle.types.StrokeVertex.curvilinear_abscissa',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="StrokeVertex" first="False" fullname="StrokeVertex.curvilinear_abscissa" ids="freestyle.types.StrokeVertex.curvilinear_abscissa" module="freestyle.types" names="freestyle.types.StrokeVertex.curvilinear_abscissa"><desc_name xml:space="preserve">curvilinear_abscissa</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Curvilinear abscissa of this StrokeVertex in the Stroke.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'point\ (freestyle.types.StrokeVertex\ attribute)',\ u'freestyle.types.StrokeVertex.point',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="StrokeVertex" first="False" fullname="StrokeVertex.point" ids="freestyle.types.StrokeVertex.point" module="freestyle.types" names="freestyle.types.StrokeVertex.point"><desc_name xml:space="preserve">point</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>2D point coordinates.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'stroke_length\ (freestyle.types.StrokeVertex\ attribute)',\ u'freestyle.types.StrokeVertex.stroke_length',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="StrokeVertex" first="False" fullname="StrokeVertex.stroke_length" ids="freestyle.types.StrokeVertex.stroke_length" module="freestyle.types" names="freestyle.types.StrokeVertex.stroke_length"><desc_name xml:space="preserve">stroke_length</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Stroke length (it is only a value retained by the StrokeVertex,
                            and it won’t change the real stroke length).</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'u\ (freestyle.types.StrokeVertex\ attribute)',\ u'freestyle.types.StrokeVertex.u',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="StrokeVertex" first="False" fullname="StrokeVertex.u" ids="freestyle.types.StrokeVertex.u" module="freestyle.types" names="freestyle.types.StrokeVertex.u"><desc_name xml:space="preserve">u</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Curvilinear abscissa of this StrokeVertex in the Stroke.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'StrokeVertexIterator\ (class\ in\ freestyle.types)',\ u'freestyle.types.StrokeVertexIterator',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="StrokeVertexIterator" ids="freestyle.types.StrokeVertexIterator" module="freestyle.types" names="freestyle.types.StrokeVertexIterator"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">StrokeVertexIterator</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Iterator" reftitle="freestyle.types.Iterator"><literal classes="xref py py-class">Iterator</literal></reference> &gt; <reference internal="True" refid="freestyle.types.StrokeVertexIterator" reftitle="freestyle.types.StrokeVertexIterator"><literal classes="xref py py-class">StrokeVertexIterator</literal></reference></paragraph>
                <paragraph>Class defining an iterator designed to iterate over the
                    <reference internal="True" refid="freestyle.types.StrokeVertex" reftitle="freestyle.types.StrokeVertex"><literal classes="xref py py-class">StrokeVertex</literal></reference> of a <reference internal="True" refid="freestyle.types.Stroke" reftitle="freestyle.types.Stroke"><literal classes="xref py py-class">Stroke</literal></reference>.  An instance of a
                    StrokeVertexIterator can be obtained from a Stroke by calling
                    iter(), stroke_vertices_begin() or stroke_vertices_begin().  It is iterating
                    over the same vertices as an <reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference>.  The difference
                    resides in the object access: an Interface0DIterator only allows
                    access to an Interface0D while one might need to access the
                    specialized StrokeVertex type.  In this case, one should use a
                    StrokeVertexIterator.  To call functions of the UnaryFuntion0D type,
                    a StrokeVertexIterator can be converted to an Interface0DIterator by
                    by calling Interface0DIterator(it).</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.StrokeVertexIterator\ method)',\ u'freestyle.types.StrokeVertexIterator.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeVertexIterator" first="False" fullname="StrokeVertexIterator.__init__" ids="freestyle.types.StrokeVertexIterator.__init__" module="freestyle.types" names="freestyle.types.StrokeVertexIterator.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.StrokeVertexIterator\ method)',\ u'freestyle.types.StrokeVertexIterator.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeVertexIterator" first="False" fullname="StrokeVertexIterator.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<reference internal="True" refid="freestyle.types.StrokeVertexIterator" reftitle="freestyle.types.StrokeVertexIterator"><literal classes="xref py py-class">StrokeVertexIterator</literal></reference>) – A StrokeVertexIterator object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'decremented()\ (freestyle.types.StrokeVertexIterator\ method)',\ u'freestyle.types.StrokeVertexIterator.decremented',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeVertexIterator" first="False" fullname="StrokeVertexIterator.decremented" ids="freestyle.types.StrokeVertexIterator.decremented" module="freestyle.types" names="freestyle.types.StrokeVertexIterator.decremented"><desc_name xml:space="preserve">decremented</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns a copy of a decremented StrokeVertexIterator.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>A StrokeVertexIterator pointing the previous StrokeVertex.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.StrokeVertexIterator" reftitle="freestyle.types.StrokeVertexIterator"><literal classes="xref py py-class">StrokeVertexIterator</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'incremented()\ (freestyle.types.StrokeVertexIterator\ method)',\ u'freestyle.types.StrokeVertexIterator.incremented',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeVertexIterator" first="False" fullname="StrokeVertexIterator.incremented" ids="freestyle.types.StrokeVertexIterator.incremented" module="freestyle.types" names="freestyle.types.StrokeVertexIterator.incremented"><desc_name xml:space="preserve">incremented</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns a copy of an incremented StrokeVertexIterator.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>A StrokeVertexIterator pointing the next StrokeVertex.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.StrokeVertexIterator" reftitle="freestyle.types.StrokeVertexIterator"><literal classes="xref py py-class">StrokeVertexIterator</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'reversed()\ (freestyle.types.StrokeVertexIterator\ method)',\ u'freestyle.types.StrokeVertexIterator.reversed',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="StrokeVertexIterator" first="False" fullname="StrokeVertexIterator.reversed" ids="freestyle.types.StrokeVertexIterator.reversed" module="freestyle.types" names="freestyle.types.StrokeVertexIterator.reversed"><desc_name xml:space="preserve">reversed</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns a StrokeVertexIterator that traverses stroke vertices in the
                            reversed order.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>A StrokeVertexIterator traversing stroke vertices backward.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.StrokeVertexIterator" reftitle="freestyle.types.StrokeVertexIterator"><literal classes="xref py py-class">StrokeVertexIterator</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'at_last\ (freestyle.types.StrokeVertexIterator\ attribute)',\ u'freestyle.types.StrokeVertexIterator.at_last',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="StrokeVertexIterator" first="False" fullname="StrokeVertexIterator.at_last" ids="freestyle.types.StrokeVertexIterator.at_last" module="freestyle.types" names="freestyle.types.StrokeVertexIterator.at_last"><desc_name xml:space="preserve">at_last</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>True if the interator points to the last valid element.
                            For its counterpart (pointing to the first valid element), use it.is_begin.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'object\ (freestyle.types.StrokeVertexIterator\ attribute)',\ u'freestyle.types.StrokeVertexIterator.object',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="StrokeVertexIterator" first="False" fullname="StrokeVertexIterator.object" ids="freestyle.types.StrokeVertexIterator.object" module="freestyle.types" names="freestyle.types.StrokeVertexIterator.object"><desc_name xml:space="preserve">object</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The StrokeVertex object currently pointed to by this iterator.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.StrokeVertex" reftitle="freestyle.types.StrokeVertex"><literal classes="xref py py-class">StrokeVertex</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u't\ (freestyle.types.StrokeVertexIterator\ attribute)',\ u'freestyle.types.StrokeVertexIterator.t',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="StrokeVertexIterator" first="False" fullname="StrokeVertexIterator.t" ids="freestyle.types.StrokeVertexIterator.t" module="freestyle.types" names="freestyle.types.StrokeVertexIterator.t"><desc_name xml:space="preserve">t</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The curvilinear abscissa of the current point.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'u\ (freestyle.types.StrokeVertexIterator\ attribute)',\ u'freestyle.types.StrokeVertexIterator.u',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="StrokeVertexIterator" first="False" fullname="StrokeVertexIterator.u" ids="freestyle.types.StrokeVertexIterator.u" module="freestyle.types" names="freestyle.types.StrokeVertexIterator.u"><desc_name xml:space="preserve">u</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The point parameter at the current point in the stroke (0 &lt;= u &lt;= 1).</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'TVertex\ (class\ in\ freestyle.types)',\ u'freestyle.types.TVertex',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="TVertex" ids="freestyle.types.TVertex" module="freestyle.types" names="freestyle.types.TVertex"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">TVertex</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Interface0D" reftitle="freestyle.types.Interface0D"><literal classes="xref py py-class">Interface0D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.ViewVertex" reftitle="freestyle.types.ViewVertex"><literal classes="xref py py-class">ViewVertex</literal></reference> &gt; <reference internal="True" refid="freestyle.types.TVertex" reftitle="freestyle.types.TVertex"><literal classes="xref py py-class">TVertex</literal></reference></paragraph>
                <paragraph>Class to define a T vertex, i.e. an intersection between two edges.
                    It points towards two SVertex and four ViewEdges.  Among the
                    ViewEdges, two are front and the other two are back.  Basically a
                    front edge hides part of a back edge.  So, among the back edges, one
                    is of invisibility N and the other of invisibility N+1.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.TVertex\ method)',\ u'freestyle.types.TVertex.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TVertex" first="False" fullname="TVertex.__init__" ids="freestyle.types.TVertex.__init__" module="freestyle.types" names="freestyle.types.TVertex.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'get_mate()\ (freestyle.types.TVertex\ method)',\ u'freestyle.types.TVertex.get_mate',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TVertex" first="False" fullname="TVertex.get_mate" ids="freestyle.types.TVertex.get_mate" module="freestyle.types" names="freestyle.types.TVertex.get_mate"><desc_name xml:space="preserve">get_mate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">viewedge</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns the mate edge of the ViewEdge given as argument.  If the
                            ViewEdge is frontEdgeA, frontEdgeB is returned.  If the ViewEdge is
                            frontEdgeB, frontEdgeA is returned.  Same for back edges.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">viewedge</literal_strong> (<reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference>) – A ViewEdge object.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The mate edge of the given ViewEdge.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'get_svertex()\ (freestyle.types.TVertex\ method)',\ u'freestyle.types.TVertex.get_svertex',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="TVertex" first="False" fullname="TVertex.get_svertex" ids="freestyle.types.TVertex.get_svertex" module="freestyle.types" names="freestyle.types.TVertex.get_svertex"><desc_name xml:space="preserve">get_svertex</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fedge</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns the SVertex (among the 2) belonging to the given FEdge.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">fedge</literal_strong> (<reference internal="True" refid="freestyle.types.FEdge" reftitle="freestyle.types.FEdge"><literal classes="xref py py-class">FEdge</literal></reference>) – An FEdge object.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The SVertex belonging to the given FEdge.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'back_svertex\ (freestyle.types.TVertex\ attribute)',\ u'freestyle.types.TVertex.back_svertex',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="TVertex" first="False" fullname="TVertex.back_svertex" ids="freestyle.types.TVertex.back_svertex" module="freestyle.types" names="freestyle.types.TVertex.back_svertex"><desc_name xml:space="preserve">back_svertex</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The SVertex that is further away from the viewpoint.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'front_svertex\ (freestyle.types.TVertex\ attribute)',\ u'freestyle.types.TVertex.front_svertex',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="TVertex" first="False" fullname="TVertex.front_svertex" ids="freestyle.types.TVertex.front_svertex" module="freestyle.types" names="freestyle.types.TVertex.front_svertex"><desc_name xml:space="preserve">front_svertex</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The SVertex that is closer to the viewpoint.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.SVertex" reftitle="freestyle.types.SVertex"><literal classes="xref py py-class">SVertex</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'id\ (freestyle.types.TVertex\ attribute)',\ u'freestyle.types.TVertex.id',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="TVertex" first="False" fullname="TVertex.id" ids="freestyle.types.TVertex.id" module="freestyle.types" names="freestyle.types.TVertex.id"><desc_name xml:space="preserve">id</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The Id of this TVertex.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Id" reftitle="freestyle.types.Id"><literal classes="xref py py-class">Id</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryFunction0D\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryFunction0D',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryFunction0D" ids="freestyle.types.UnaryFunction0D" module="freestyle.types" names="freestyle.types.UnaryFunction0D"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryFunction0D</desc_name></desc_signature>
            <desc_content>
                <paragraph>Base class for Unary Functions (functors) working on
                    <reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference>.  A unary function will be used by
                    invoking __call__() on an Interface0DIterator.  In Python, several
                    different subclasses of UnaryFunction0D are used depending on the
                    types of functors’ return values.  For example, you would inherit from
                    a <reference internal="True" refid="freestyle.types.UnaryFunction0DDouble" reftitle="freestyle.types.UnaryFunction0DDouble"><literal classes="xref py py-class">UnaryFunction0DDouble</literal></reference> if you wish to define a function that
                    returns a double value.  Available UnaryFunction0D subclasses are:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0DDouble" reftitle="freestyle.types.UnaryFunction0DDouble"><literal classes="xref py py-class">UnaryFunction0DDouble</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0DEdgeNature" reftitle="freestyle.types.UnaryFunction0DEdgeNature"><literal classes="xref py py-class">UnaryFunction0DEdgeNature</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0DFloat" reftitle="freestyle.types.UnaryFunction0DFloat"><literal classes="xref py py-class">UnaryFunction0DFloat</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0DId" reftitle="freestyle.types.UnaryFunction0DId"><literal classes="xref py py-class">UnaryFunction0DId</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0DMaterial" reftitle="freestyle.types.UnaryFunction0DMaterial"><literal classes="xref py py-class">UnaryFunction0DMaterial</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0DUnsigned" reftitle="freestyle.types.UnaryFunction0DUnsigned"><literal classes="xref py py-class">UnaryFunction0DUnsigned</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0DVec2f" reftitle="freestyle.types.UnaryFunction0DVec2f"><literal classes="xref py py-class">UnaryFunction0DVec2f</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0DVec3f" reftitle="freestyle.types.UnaryFunction0DVec3f"><literal classes="xref py py-class">UnaryFunction0DVec3f</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0DVectorViewShape" reftitle="freestyle.types.UnaryFunction0DVectorViewShape"><literal classes="xref py py-class">UnaryFunction0DVectorViewShape</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction0DViewShape" reftitle="freestyle.types.UnaryFunction0DViewShape"><literal classes="xref py py-class">UnaryFunction0DViewShape</literal></reference></paragraph>
                    </list_item>
                </bullet_list>
                <index entries="['single',\ u'name\ (freestyle.types.UnaryFunction0D\ attribute)',\ u'freestyle.types.UnaryFunction0D.name',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="UnaryFunction0D" first="False" fullname="UnaryFunction0D.name" ids="freestyle.types.UnaryFunction0D.name" module="freestyle.types" names="freestyle.types.UnaryFunction0D.name"><desc_name xml:space="preserve">name</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The name of the unary 0D function.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>str</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryFunction0DDouble\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryFunction0DDouble',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryFunction0DDouble" ids="freestyle.types.UnaryFunction0DDouble" module="freestyle.types" names="freestyle.types.UnaryFunction0DDouble"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryFunction0DDouble</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.UnaryFunction0D" reftitle="freestyle.types.UnaryFunction0D"><literal classes="xref py py-class">UnaryFunction0D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.UnaryFunction0DDouble" reftitle="freestyle.types.UnaryFunction0DDouble"><literal classes="xref py py-class">UnaryFunction0DDouble</literal></reference></paragraph>
                <paragraph>Base class for unary functions (functors) that work on
                    <reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference> and return a float value.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction0DDouble\ method)',\ u'freestyle.types.UnaryFunction0DDouble.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction0DDouble" first="False" fullname="UnaryFunction0DDouble.__init__" ids="freestyle.types.UnaryFunction0DDouble.__init__" module="freestyle.types" names="freestyle.types.UnaryFunction0DDouble.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryFunction0DEdgeNature\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryFunction0DEdgeNature',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryFunction0DEdgeNature" ids="freestyle.types.UnaryFunction0DEdgeNature" module="freestyle.types" names="freestyle.types.UnaryFunction0DEdgeNature"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryFunction0DEdgeNature</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.UnaryFunction0D" reftitle="freestyle.types.UnaryFunction0D"><literal classes="xref py py-class">UnaryFunction0D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.UnaryFunction0DEdgeNature" reftitle="freestyle.types.UnaryFunction0DEdgeNature"><literal classes="xref py py-class">UnaryFunction0DEdgeNature</literal></reference></paragraph>
                <paragraph>Base class for unary functions (functors) that work on
                    <reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference> and return a <reference internal="True" refid="freestyle.types.Nature" reftitle="freestyle.types.Nature"><literal classes="xref py py-class">Nature</literal></reference> object.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction0DEdgeNature\ method)',\ u'freestyle.types.UnaryFunction0DEdgeNature.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction0DEdgeNature" first="False" fullname="UnaryFunction0DEdgeNature.__init__" ids="freestyle.types.UnaryFunction0DEdgeNature.__init__" module="freestyle.types" names="freestyle.types.UnaryFunction0DEdgeNature.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryFunction0DFloat\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryFunction0DFloat',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryFunction0DFloat" ids="freestyle.types.UnaryFunction0DFloat" module="freestyle.types" names="freestyle.types.UnaryFunction0DFloat"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryFunction0DFloat</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.UnaryFunction0D" reftitle="freestyle.types.UnaryFunction0D"><literal classes="xref py py-class">UnaryFunction0D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.UnaryFunction0DFloat" reftitle="freestyle.types.UnaryFunction0DFloat"><literal classes="xref py py-class">UnaryFunction0DFloat</literal></reference></paragraph>
                <paragraph>Base class for unary functions (functors) that work on
                    <reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference> and return a float value.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction0DFloat\ method)',\ u'freestyle.types.UnaryFunction0DFloat.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction0DFloat" first="False" fullname="UnaryFunction0DFloat.__init__" ids="freestyle.types.UnaryFunction0DFloat.__init__" module="freestyle.types" names="freestyle.types.UnaryFunction0DFloat.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryFunction0DId\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryFunction0DId',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryFunction0DId" ids="freestyle.types.UnaryFunction0DId" module="freestyle.types" names="freestyle.types.UnaryFunction0DId"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryFunction0DId</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.UnaryFunction0D" reftitle="freestyle.types.UnaryFunction0D"><literal classes="xref py py-class">UnaryFunction0D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.UnaryFunction0DId" reftitle="freestyle.types.UnaryFunction0DId"><literal classes="xref py py-class">UnaryFunction0DId</literal></reference></paragraph>
                <paragraph>Base class for unary functions (functors) that work on
                    <reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference> and return an <reference internal="True" refid="freestyle.types.Id" reftitle="freestyle.types.Id"><literal classes="xref py py-class">Id</literal></reference> object.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction0DId\ method)',\ u'freestyle.types.UnaryFunction0DId.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction0DId" first="False" fullname="UnaryFunction0DId.__init__" ids="freestyle.types.UnaryFunction0DId.__init__" module="freestyle.types" names="freestyle.types.UnaryFunction0DId.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryFunction0DMaterial\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryFunction0DMaterial',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryFunction0DMaterial" ids="freestyle.types.UnaryFunction0DMaterial" module="freestyle.types" names="freestyle.types.UnaryFunction0DMaterial"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryFunction0DMaterial</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.UnaryFunction0D" reftitle="freestyle.types.UnaryFunction0D"><literal classes="xref py py-class">UnaryFunction0D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.UnaryFunction0DMaterial" reftitle="freestyle.types.UnaryFunction0DMaterial"><literal classes="xref py py-class">UnaryFunction0DMaterial</literal></reference></paragraph>
                <paragraph>Base class for unary functions (functors) that work on
                    <reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference> and return a <reference internal="True" refid="freestyle.types.Material" reftitle="freestyle.types.Material"><literal classes="xref py py-class">Material</literal></reference> object.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction0DMaterial\ method)',\ u'freestyle.types.UnaryFunction0DMaterial.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction0DMaterial" first="False" fullname="UnaryFunction0DMaterial.__init__" ids="freestyle.types.UnaryFunction0DMaterial.__init__" module="freestyle.types" names="freestyle.types.UnaryFunction0DMaterial.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryFunction0DUnsigned\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryFunction0DUnsigned',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryFunction0DUnsigned" ids="freestyle.types.UnaryFunction0DUnsigned" module="freestyle.types" names="freestyle.types.UnaryFunction0DUnsigned"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryFunction0DUnsigned</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.UnaryFunction0D" reftitle="freestyle.types.UnaryFunction0D"><literal classes="xref py py-class">UnaryFunction0D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.UnaryFunction0DUnsigned" reftitle="freestyle.types.UnaryFunction0DUnsigned"><literal classes="xref py py-class">UnaryFunction0DUnsigned</literal></reference></paragraph>
                <paragraph>Base class for unary functions (functors) that work on
                    <reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference> and return an int value.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction0DUnsigned\ method)',\ u'freestyle.types.UnaryFunction0DUnsigned.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction0DUnsigned" first="False" fullname="UnaryFunction0DUnsigned.__init__" ids="freestyle.types.UnaryFunction0DUnsigned.__init__" module="freestyle.types" names="freestyle.types.UnaryFunction0DUnsigned.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryFunction0DVec2f\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryFunction0DVec2f',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryFunction0DVec2f" ids="freestyle.types.UnaryFunction0DVec2f" module="freestyle.types" names="freestyle.types.UnaryFunction0DVec2f"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryFunction0DVec2f</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.UnaryFunction0D" reftitle="freestyle.types.UnaryFunction0D"><literal classes="xref py py-class">UnaryFunction0D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.UnaryFunction0DVec2f" reftitle="freestyle.types.UnaryFunction0DVec2f"><literal classes="xref py py-class">UnaryFunction0DVec2f</literal></reference></paragraph>
                <paragraph>Base class for unary functions (functors) that work on
                    <reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference> and return a 2D vector.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction0DVec2f\ method)',\ u'freestyle.types.UnaryFunction0DVec2f.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction0DVec2f" first="False" fullname="UnaryFunction0DVec2f.__init__" ids="freestyle.types.UnaryFunction0DVec2f.__init__" module="freestyle.types" names="freestyle.types.UnaryFunction0DVec2f.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryFunction0DVec3f\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryFunction0DVec3f',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryFunction0DVec3f" ids="freestyle.types.UnaryFunction0DVec3f" module="freestyle.types" names="freestyle.types.UnaryFunction0DVec3f"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryFunction0DVec3f</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.UnaryFunction0D" reftitle="freestyle.types.UnaryFunction0D"><literal classes="xref py py-class">UnaryFunction0D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.UnaryFunction0DVec3f" reftitle="freestyle.types.UnaryFunction0DVec3f"><literal classes="xref py py-class">UnaryFunction0DVec3f</literal></reference></paragraph>
                <paragraph>Base class for unary functions (functors) that work on
                    <reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference> and return a 3D vector.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction0DVec3f\ method)',\ u'freestyle.types.UnaryFunction0DVec3f.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction0DVec3f" first="False" fullname="UnaryFunction0DVec3f.__init__" ids="freestyle.types.UnaryFunction0DVec3f.__init__" module="freestyle.types" names="freestyle.types.UnaryFunction0DVec3f.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryFunction0DVectorViewShape\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryFunction0DVectorViewShape',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryFunction0DVectorViewShape" ids="freestyle.types.UnaryFunction0DVectorViewShape" module="freestyle.types" names="freestyle.types.UnaryFunction0DVectorViewShape"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryFunction0DVectorViewShape</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.UnaryFunction0D" reftitle="freestyle.types.UnaryFunction0D"><literal classes="xref py py-class">UnaryFunction0D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.UnaryFunction0DVectorViewShape" reftitle="freestyle.types.UnaryFunction0DVectorViewShape"><literal classes="xref py py-class">UnaryFunction0DVectorViewShape</literal></reference></paragraph>
                <paragraph>Base class for unary functions (functors) that work on
                    <reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference> and return a list of <reference internal="True" refid="freestyle.types.ViewShape" reftitle="freestyle.types.ViewShape"><literal classes="xref py py-class">ViewShape</literal></reference>
                    objects.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction0DVectorViewShape\ method)',\ u'freestyle.types.UnaryFunction0DVectorViewShape.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction0DVectorViewShape" first="False" fullname="UnaryFunction0DVectorViewShape.__init__" ids="freestyle.types.UnaryFunction0DVectorViewShape.__init__" module="freestyle.types" names="freestyle.types.UnaryFunction0DVectorViewShape.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryFunction0DViewShape\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryFunction0DViewShape',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryFunction0DViewShape" ids="freestyle.types.UnaryFunction0DViewShape" module="freestyle.types" names="freestyle.types.UnaryFunction0DViewShape"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryFunction0DViewShape</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.UnaryFunction0D" reftitle="freestyle.types.UnaryFunction0D"><literal classes="xref py py-class">UnaryFunction0D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.UnaryFunction0DViewShape" reftitle="freestyle.types.UnaryFunction0DViewShape"><literal classes="xref py py-class">UnaryFunction0DViewShape</literal></reference></paragraph>
                <paragraph>Base class for unary functions (functors) that work on
                    <reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference> and return a <reference internal="True" refid="freestyle.types.ViewShape" reftitle="freestyle.types.ViewShape"><literal classes="xref py py-class">ViewShape</literal></reference> object.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction0DViewShape\ method)',\ u'freestyle.types.UnaryFunction0DViewShape.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction0DViewShape" first="False" fullname="UnaryFunction0DViewShape.__init__" ids="freestyle.types.UnaryFunction0DViewShape.__init__" module="freestyle.types" names="freestyle.types.UnaryFunction0DViewShape.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryFunction1D\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryFunction1D',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryFunction1D" ids="freestyle.types.UnaryFunction1D" module="freestyle.types" names="freestyle.types.UnaryFunction1D"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryFunction1D</desc_name></desc_signature>
            <desc_content>
                <paragraph>Base class for Unary Functions (functors) working on
                    <reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference>.  A unary function will be used by invoking
                    __call__() on an Interface1D.  In Python, several different subclasses
                    of UnaryFunction1D are used depending on the types of functors’ return
                    values.  For example, you would inherit from a
                    <reference internal="True" refid="freestyle.types.UnaryFunction1DDouble" reftitle="freestyle.types.UnaryFunction1DDouble"><literal classes="xref py py-class">UnaryFunction1DDouble</literal></reference> if you wish to define a function that
                    returns a double value.  Available UnaryFunction1D subclasses are:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction1DDouble" reftitle="freestyle.types.UnaryFunction1DDouble"><literal classes="xref py py-class">UnaryFunction1DDouble</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction1DEdgeNature" reftitle="freestyle.types.UnaryFunction1DEdgeNature"><literal classes="xref py py-class">UnaryFunction1DEdgeNature</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction1DFloat" reftitle="freestyle.types.UnaryFunction1DFloat"><literal classes="xref py py-class">UnaryFunction1DFloat</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction1DUnsigned" reftitle="freestyle.types.UnaryFunction1DUnsigned"><literal classes="xref py py-class">UnaryFunction1DUnsigned</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction1DVec2f" reftitle="freestyle.types.UnaryFunction1DVec2f"><literal classes="xref py py-class">UnaryFunction1DVec2f</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction1DVec3f" reftitle="freestyle.types.UnaryFunction1DVec3f"><literal classes="xref py py-class">UnaryFunction1DVec3f</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction1DVectorViewShape" reftitle="freestyle.types.UnaryFunction1DVectorViewShape"><literal classes="xref py py-class">UnaryFunction1DVectorViewShape</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" refid="freestyle.types.UnaryFunction1DVoid" reftitle="freestyle.types.UnaryFunction1DVoid"><literal classes="xref py py-class">UnaryFunction1DVoid</literal></reference></paragraph>
                    </list_item>
                </bullet_list>
                <index entries="['single',\ u'name\ (freestyle.types.UnaryFunction1D\ attribute)',\ u'freestyle.types.UnaryFunction1D.name',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="UnaryFunction1D" first="False" fullname="UnaryFunction1D.name" ids="freestyle.types.UnaryFunction1D.name" module="freestyle.types" names="freestyle.types.UnaryFunction1D.name"><desc_name xml:space="preserve">name</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The name of the unary 1D function.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>str</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryFunction1DDouble\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryFunction1DDouble',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryFunction1DDouble" ids="freestyle.types.UnaryFunction1DDouble" module="freestyle.types" names="freestyle.types.UnaryFunction1DDouble"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryFunction1DDouble</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.UnaryFunction1D" reftitle="freestyle.types.UnaryFunction1D"><literal classes="xref py py-class">UnaryFunction1D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.UnaryFunction1DDouble" reftitle="freestyle.types.UnaryFunction1DDouble"><literal classes="xref py py-class">UnaryFunction1DDouble</literal></reference></paragraph>
                <paragraph>Base class for unary functions (functors) that work on
                    <reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference> and return a float value.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction1DDouble\ method)',\ u'freestyle.types.UnaryFunction1DDouble.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction1DDouble" first="False" fullname="UnaryFunction1DDouble.__init__" ids="freestyle.types.UnaryFunction1DDouble.__init__" module="freestyle.types" names="freestyle.types.UnaryFunction1DDouble.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction1DDouble\ method)',\ u'freestyle.types.UnaryFunction1DDouble.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction1DDouble" first="False" fullname="UnaryFunction1DDouble.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">integration_type</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a unary 1D function using the integration method given as
                            argument.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">integration_type</literal_strong> (<reference internal="True" refid="freestyle.types.IntegrationType" reftitle="freestyle.types.IntegrationType"><literal classes="xref py py-class">IntegrationType</literal></reference>) – An integration method.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'integration_type\ (freestyle.types.UnaryFunction1DDouble\ attribute)',\ u'freestyle.types.UnaryFunction1DDouble.integration_type',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="UnaryFunction1DDouble" first="False" fullname="UnaryFunction1DDouble.integration_type" ids="freestyle.types.UnaryFunction1DDouble.integration_type" module="freestyle.types" names="freestyle.types.UnaryFunction1DDouble.integration_type"><desc_name xml:space="preserve">integration_type</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The integration method.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.IntegrationType" reftitle="freestyle.types.IntegrationType"><literal classes="xref py py-class">IntegrationType</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryFunction1DEdgeNature\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryFunction1DEdgeNature',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryFunction1DEdgeNature" ids="freestyle.types.UnaryFunction1DEdgeNature" module="freestyle.types" names="freestyle.types.UnaryFunction1DEdgeNature"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryFunction1DEdgeNature</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.UnaryFunction1D" reftitle="freestyle.types.UnaryFunction1D"><literal classes="xref py py-class">UnaryFunction1D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.UnaryFunction1DEdgeNature" reftitle="freestyle.types.UnaryFunction1DEdgeNature"><literal classes="xref py py-class">UnaryFunction1DEdgeNature</literal></reference></paragraph>
                <paragraph>Base class for unary functions (functors) that work on
                    <reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference> and return a <reference internal="True" refid="freestyle.types.Nature" reftitle="freestyle.types.Nature"><literal classes="xref py py-class">Nature</literal></reference> object.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction1DEdgeNature\ method)',\ u'freestyle.types.UnaryFunction1DEdgeNature.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction1DEdgeNature" first="False" fullname="UnaryFunction1DEdgeNature.__init__" ids="freestyle.types.UnaryFunction1DEdgeNature.__init__" module="freestyle.types" names="freestyle.types.UnaryFunction1DEdgeNature.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction1DEdgeNature\ method)',\ u'freestyle.types.UnaryFunction1DEdgeNature.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction1DEdgeNature" first="False" fullname="UnaryFunction1DEdgeNature.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">integration_type</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a unary 1D function using the integration method given as
                            argument.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">integration_type</literal_strong> (<reference internal="True" refid="freestyle.types.IntegrationType" reftitle="freestyle.types.IntegrationType"><literal classes="xref py py-class">IntegrationType</literal></reference>) – An integration method.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'integration_type\ (freestyle.types.UnaryFunction1DEdgeNature\ attribute)',\ u'freestyle.types.UnaryFunction1DEdgeNature.integration_type',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="UnaryFunction1DEdgeNature" first="False" fullname="UnaryFunction1DEdgeNature.integration_type" ids="freestyle.types.UnaryFunction1DEdgeNature.integration_type" module="freestyle.types" names="freestyle.types.UnaryFunction1DEdgeNature.integration_type"><desc_name xml:space="preserve">integration_type</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The integration method.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.IntegrationType" reftitle="freestyle.types.IntegrationType"><literal classes="xref py py-class">IntegrationType</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryFunction1DFloat\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryFunction1DFloat',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryFunction1DFloat" ids="freestyle.types.UnaryFunction1DFloat" module="freestyle.types" names="freestyle.types.UnaryFunction1DFloat"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryFunction1DFloat</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.UnaryFunction1D" reftitle="freestyle.types.UnaryFunction1D"><literal classes="xref py py-class">UnaryFunction1D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.UnaryFunction1DFloat" reftitle="freestyle.types.UnaryFunction1DFloat"><literal classes="xref py py-class">UnaryFunction1DFloat</literal></reference></paragraph>
                <paragraph>Base class for unary functions (functors) that work on
                    <reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference> and return a float value.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction1DFloat\ method)',\ u'freestyle.types.UnaryFunction1DFloat.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction1DFloat" first="False" fullname="UnaryFunction1DFloat.__init__" ids="freestyle.types.UnaryFunction1DFloat.__init__" module="freestyle.types" names="freestyle.types.UnaryFunction1DFloat.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction1DFloat\ method)',\ u'freestyle.types.UnaryFunction1DFloat.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction1DFloat" first="False" fullname="UnaryFunction1DFloat.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">integration_type</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a unary 1D function using the integration method given as
                            argument.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">integration_type</literal_strong> (<reference internal="True" refid="freestyle.types.IntegrationType" reftitle="freestyle.types.IntegrationType"><literal classes="xref py py-class">IntegrationType</literal></reference>) – An integration method.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'integration_type\ (freestyle.types.UnaryFunction1DFloat\ attribute)',\ u'freestyle.types.UnaryFunction1DFloat.integration_type',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="UnaryFunction1DFloat" first="False" fullname="UnaryFunction1DFloat.integration_type" ids="freestyle.types.UnaryFunction1DFloat.integration_type" module="freestyle.types" names="freestyle.types.UnaryFunction1DFloat.integration_type"><desc_name xml:space="preserve">integration_type</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The integration method.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.IntegrationType" reftitle="freestyle.types.IntegrationType"><literal classes="xref py py-class">IntegrationType</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryFunction1DUnsigned\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryFunction1DUnsigned',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryFunction1DUnsigned" ids="freestyle.types.UnaryFunction1DUnsigned" module="freestyle.types" names="freestyle.types.UnaryFunction1DUnsigned"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryFunction1DUnsigned</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.UnaryFunction1D" reftitle="freestyle.types.UnaryFunction1D"><literal classes="xref py py-class">UnaryFunction1D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.UnaryFunction1DUnsigned" reftitle="freestyle.types.UnaryFunction1DUnsigned"><literal classes="xref py py-class">UnaryFunction1DUnsigned</literal></reference></paragraph>
                <paragraph>Base class for unary functions (functors) that work on
                    <reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference> and return an int value.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction1DUnsigned\ method)',\ u'freestyle.types.UnaryFunction1DUnsigned.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction1DUnsigned" first="False" fullname="UnaryFunction1DUnsigned.__init__" ids="freestyle.types.UnaryFunction1DUnsigned.__init__" module="freestyle.types" names="freestyle.types.UnaryFunction1DUnsigned.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction1DUnsigned\ method)',\ u'freestyle.types.UnaryFunction1DUnsigned.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction1DUnsigned" first="False" fullname="UnaryFunction1DUnsigned.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">integration_type</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a unary 1D function using the integration method given as
                            argument.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">integration_type</literal_strong> (<reference internal="True" refid="freestyle.types.IntegrationType" reftitle="freestyle.types.IntegrationType"><literal classes="xref py py-class">IntegrationType</literal></reference>) – An integration method.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'integration_type\ (freestyle.types.UnaryFunction1DUnsigned\ attribute)',\ u'freestyle.types.UnaryFunction1DUnsigned.integration_type',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="UnaryFunction1DUnsigned" first="False" fullname="UnaryFunction1DUnsigned.integration_type" ids="freestyle.types.UnaryFunction1DUnsigned.integration_type" module="freestyle.types" names="freestyle.types.UnaryFunction1DUnsigned.integration_type"><desc_name xml:space="preserve">integration_type</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The integration method.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.IntegrationType" reftitle="freestyle.types.IntegrationType"><literal classes="xref py py-class">IntegrationType</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryFunction1DVec2f\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryFunction1DVec2f',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryFunction1DVec2f" ids="freestyle.types.UnaryFunction1DVec2f" module="freestyle.types" names="freestyle.types.UnaryFunction1DVec2f"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryFunction1DVec2f</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.UnaryFunction1D" reftitle="freestyle.types.UnaryFunction1D"><literal classes="xref py py-class">UnaryFunction1D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.UnaryFunction1DVec2f" reftitle="freestyle.types.UnaryFunction1DVec2f"><literal classes="xref py py-class">UnaryFunction1DVec2f</literal></reference></paragraph>
                <paragraph>Base class for unary functions (functors) that work on
                    <reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference> and return a 2D vector.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction1DVec2f\ method)',\ u'freestyle.types.UnaryFunction1DVec2f.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction1DVec2f" first="False" fullname="UnaryFunction1DVec2f.__init__" ids="freestyle.types.UnaryFunction1DVec2f.__init__" module="freestyle.types" names="freestyle.types.UnaryFunction1DVec2f.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction1DVec2f\ method)',\ u'freestyle.types.UnaryFunction1DVec2f.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction1DVec2f" first="False" fullname="UnaryFunction1DVec2f.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">integration_type</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a unary 1D function using the integration method given as
                            argument.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">integration_type</literal_strong> (<reference internal="True" refid="freestyle.types.IntegrationType" reftitle="freestyle.types.IntegrationType"><literal classes="xref py py-class">IntegrationType</literal></reference>) – An integration method.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'integration_type\ (freestyle.types.UnaryFunction1DVec2f\ attribute)',\ u'freestyle.types.UnaryFunction1DVec2f.integration_type',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="UnaryFunction1DVec2f" first="False" fullname="UnaryFunction1DVec2f.integration_type" ids="freestyle.types.UnaryFunction1DVec2f.integration_type" module="freestyle.types" names="freestyle.types.UnaryFunction1DVec2f.integration_type"><desc_name xml:space="preserve">integration_type</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The integration method.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.IntegrationType" reftitle="freestyle.types.IntegrationType"><literal classes="xref py py-class">IntegrationType</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryFunction1DVec3f\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryFunction1DVec3f',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryFunction1DVec3f" ids="freestyle.types.UnaryFunction1DVec3f" module="freestyle.types" names="freestyle.types.UnaryFunction1DVec3f"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryFunction1DVec3f</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.UnaryFunction1D" reftitle="freestyle.types.UnaryFunction1D"><literal classes="xref py py-class">UnaryFunction1D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.UnaryFunction1DVec3f" reftitle="freestyle.types.UnaryFunction1DVec3f"><literal classes="xref py py-class">UnaryFunction1DVec3f</literal></reference></paragraph>
                <paragraph>Base class for unary functions (functors) that work on
                    <reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference> and return a 3D vector.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction1DVec3f\ method)',\ u'freestyle.types.UnaryFunction1DVec3f.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction1DVec3f" first="False" fullname="UnaryFunction1DVec3f.__init__" ids="freestyle.types.UnaryFunction1DVec3f.__init__" module="freestyle.types" names="freestyle.types.UnaryFunction1DVec3f.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction1DVec3f\ method)',\ u'freestyle.types.UnaryFunction1DVec3f.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction1DVec3f" first="False" fullname="UnaryFunction1DVec3f.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">integration_type</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a unary 1D function using the integration method given as
                            argument.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">integration_type</literal_strong> (<reference internal="True" refid="freestyle.types.IntegrationType" reftitle="freestyle.types.IntegrationType"><literal classes="xref py py-class">IntegrationType</literal></reference>) – An integration method.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'integration_type\ (freestyle.types.UnaryFunction1DVec3f\ attribute)',\ u'freestyle.types.UnaryFunction1DVec3f.integration_type',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="UnaryFunction1DVec3f" first="False" fullname="UnaryFunction1DVec3f.integration_type" ids="freestyle.types.UnaryFunction1DVec3f.integration_type" module="freestyle.types" names="freestyle.types.UnaryFunction1DVec3f.integration_type"><desc_name xml:space="preserve">integration_type</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The integration method.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.IntegrationType" reftitle="freestyle.types.IntegrationType"><literal classes="xref py py-class">IntegrationType</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryFunction1DVectorViewShape\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryFunction1DVectorViewShape',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryFunction1DVectorViewShape" ids="freestyle.types.UnaryFunction1DVectorViewShape" module="freestyle.types" names="freestyle.types.UnaryFunction1DVectorViewShape"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryFunction1DVectorViewShape</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.UnaryFunction1D" reftitle="freestyle.types.UnaryFunction1D"><literal classes="xref py py-class">UnaryFunction1D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.UnaryFunction1DVectorViewShape" reftitle="freestyle.types.UnaryFunction1DVectorViewShape"><literal classes="xref py py-class">UnaryFunction1DVectorViewShape</literal></reference></paragraph>
                <paragraph>Base class for unary functions (functors) that work on
                    <reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference> and return a list of <reference internal="True" refid="freestyle.types.ViewShape" reftitle="freestyle.types.ViewShape"><literal classes="xref py py-class">ViewShape</literal></reference>
                    objects.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction1DVectorViewShape\ method)',\ u'freestyle.types.UnaryFunction1DVectorViewShape.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction1DVectorViewShape" first="False" fullname="UnaryFunction1DVectorViewShape.__init__" ids="freestyle.types.UnaryFunction1DVectorViewShape.__init__" module="freestyle.types" names="freestyle.types.UnaryFunction1DVectorViewShape.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction1DVectorViewShape\ method)',\ u'freestyle.types.UnaryFunction1DVectorViewShape.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction1DVectorViewShape" first="False" fullname="UnaryFunction1DVectorViewShape.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">integration_type</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a unary 1D function using the integration method given as
                            argument.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">integration_type</literal_strong> (<reference internal="True" refid="freestyle.types.IntegrationType" reftitle="freestyle.types.IntegrationType"><literal classes="xref py py-class">IntegrationType</literal></reference>) – An integration method.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'integration_type\ (freestyle.types.UnaryFunction1DVectorViewShape\ attribute)',\ u'freestyle.types.UnaryFunction1DVectorViewShape.integration_type',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="UnaryFunction1DVectorViewShape" first="False" fullname="UnaryFunction1DVectorViewShape.integration_type" ids="freestyle.types.UnaryFunction1DVectorViewShape.integration_type" module="freestyle.types" names="freestyle.types.UnaryFunction1DVectorViewShape.integration_type"><desc_name xml:space="preserve">integration_type</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The integration method.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.IntegrationType" reftitle="freestyle.types.IntegrationType"><literal classes="xref py py-class">IntegrationType</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryFunction1DVoid\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryFunction1DVoid',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryFunction1DVoid" ids="freestyle.types.UnaryFunction1DVoid" module="freestyle.types" names="freestyle.types.UnaryFunction1DVoid"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryFunction1DVoid</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.UnaryFunction1D" reftitle="freestyle.types.UnaryFunction1D"><literal classes="xref py py-class">UnaryFunction1D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.UnaryFunction1DVoid" reftitle="freestyle.types.UnaryFunction1DVoid"><literal classes="xref py py-class">UnaryFunction1DVoid</literal></reference></paragraph>
                <paragraph>Base class for unary functions (functors) working on
                    <reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference>.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction1DVoid\ method)',\ u'freestyle.types.UnaryFunction1DVoid.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction1DVoid" first="False" fullname="UnaryFunction1DVoid.__init__" ids="freestyle.types.UnaryFunction1DVoid.__init__" module="freestyle.types" names="freestyle.types.UnaryFunction1DVoid.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryFunction1DVoid\ method)',\ u'freestyle.types.UnaryFunction1DVoid.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryFunction1DVoid" first="False" fullname="UnaryFunction1DVoid.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">integration_type</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a unary 1D function using the integration method given as
                            argument.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">integration_type</literal_strong> (<reference internal="True" refid="freestyle.types.IntegrationType" reftitle="freestyle.types.IntegrationType"><literal classes="xref py py-class">IntegrationType</literal></reference>) – An integration method.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'integration_type\ (freestyle.types.UnaryFunction1DVoid\ attribute)',\ u'freestyle.types.UnaryFunction1DVoid.integration_type',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="UnaryFunction1DVoid" first="False" fullname="UnaryFunction1DVoid.integration_type" ids="freestyle.types.UnaryFunction1DVoid.integration_type" module="freestyle.types" names="freestyle.types.UnaryFunction1DVoid.integration_type"><desc_name xml:space="preserve">integration_type</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The integration method.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.IntegrationType" reftitle="freestyle.types.IntegrationType"><literal classes="xref py py-class">IntegrationType</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryPredicate0D\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryPredicate0D',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryPredicate0D" ids="freestyle.types.UnaryPredicate0D" module="freestyle.types" names="freestyle.types.UnaryPredicate0D"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryPredicate0D</desc_name></desc_signature>
            <desc_content>
                <paragraph>Base class for unary predicates that work on
                    <reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference>.  A UnaryPredicate0D is a functor that
                    evaluates a condition on an Interface0DIterator and returns true or
                    false depending on whether this condition is satisfied or not.  The
                    UnaryPredicate0D is used by invoking its __call__() method.  Any
                    inherited class must overload the __call__() method.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryPredicate0D\ method)',\ u'freestyle.types.UnaryPredicate0D.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryPredicate0D" first="False" fullname="UnaryPredicate0D.__init__" ids="freestyle.types.UnaryPredicate0D.__init__" module="freestyle.types" names="freestyle.types.UnaryPredicate0D.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__call__()\ (freestyle.types.UnaryPredicate0D\ method)',\ u'freestyle.types.UnaryPredicate0D.__call__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryPredicate0D" first="False" fullname="UnaryPredicate0D.__call__" ids="freestyle.types.UnaryPredicate0D.__call__" module="freestyle.types" names="freestyle.types.UnaryPredicate0D.__call__"><desc_name xml:space="preserve">__call__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">it</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Must be overload by inherited classes.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">it</literal_strong> (<reference internal="True" refid="freestyle.types.Interface0DIterator" reftitle="freestyle.types.Interface0DIterator"><literal classes="xref py py-class">Interface0DIterator</literal></reference>) – The Interface0DIterator pointing onto the Interface0D at
                                        which we wish to evaluate the predicate.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>True if the condition is satisfied, false otherwise.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'name\ (freestyle.types.UnaryPredicate0D\ attribute)',\ u'freestyle.types.UnaryPredicate0D.name',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="UnaryPredicate0D" first="False" fullname="UnaryPredicate0D.name" ids="freestyle.types.UnaryPredicate0D.name" module="freestyle.types" names="freestyle.types.UnaryPredicate0D.name"><desc_name xml:space="preserve">name</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The name of the unary 0D predicate.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>str</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'UnaryPredicate1D\ (class\ in\ freestyle.types)',\ u'freestyle.types.UnaryPredicate1D',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="UnaryPredicate1D" ids="freestyle.types.UnaryPredicate1D" module="freestyle.types" names="freestyle.types.UnaryPredicate1D"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">UnaryPredicate1D</desc_name></desc_signature>
            <desc_content>
                <paragraph>Base class for unary predicates that work on <reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference>.  A
                    UnaryPredicate1D is a functor that evaluates a condition on a
                    Interface1D and returns true or false depending on whether this
                    condition is satisfied or not.  The UnaryPredicate1D is used by
                    invoking its __call__() method.  Any inherited class must overload the
                    __call__() method.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.UnaryPredicate1D\ method)',\ u'freestyle.types.UnaryPredicate1D.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryPredicate1D" first="False" fullname="UnaryPredicate1D.__init__" ids="freestyle.types.UnaryPredicate1D.__init__" module="freestyle.types" names="freestyle.types.UnaryPredicate1D.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__call__()\ (freestyle.types.UnaryPredicate1D\ method)',\ u'freestyle.types.UnaryPredicate1D.__call__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="UnaryPredicate1D" first="False" fullname="UnaryPredicate1D.__call__" ids="freestyle.types.UnaryPredicate1D.__call__" module="freestyle.types" names="freestyle.types.UnaryPredicate1D.__call__"><desc_name xml:space="preserve">__call__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">inter</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Must be overload by inherited classes.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">inter</literal_strong> (<reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference>) – The Interface1D on which we wish to evaluate the predicate.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>True if the condition is satisfied, false otherwise.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'name\ (freestyle.types.UnaryPredicate1D\ attribute)',\ u'freestyle.types.UnaryPredicate1D.name',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="UnaryPredicate1D" first="False" fullname="UnaryPredicate1D.name" ids="freestyle.types.UnaryPredicate1D.name" module="freestyle.types" names="freestyle.types.UnaryPredicate1D.name"><desc_name xml:space="preserve">name</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The name of the unary 1D predicate.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>str</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'ViewEdge\ (class\ in\ freestyle.types)',\ u'freestyle.types.ViewEdge',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ViewEdge" ids="freestyle.types.ViewEdge" module="freestyle.types" names="freestyle.types.ViewEdge"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">ViewEdge</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Interface1D" reftitle="freestyle.types.Interface1D"><literal classes="xref py py-class">Interface1D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference></paragraph>
                <paragraph>Class defining a ViewEdge.  A ViewEdge in an edge of the image graph.
                    it connects two <reference internal="True" refid="freestyle.types.ViewVertex" reftitle="freestyle.types.ViewVertex"><literal classes="xref py py-class">ViewVertex</literal></reference> objects.  It is made by connecting
                    a set of FEdges.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.ViewEdge\ method)',\ u'freestyle.types.ViewEdge.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ViewEdge" first="False" fullname="ViewEdge.__init__" ids="freestyle.types.ViewEdge.__init__" module="freestyle.types" names="freestyle.types.ViewEdge.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.ViewEdge\ method)',\ u'freestyle.types.ViewEdge.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ViewEdge" first="False" fullname="ViewEdge.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference>) – A ViewEdge object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'update_fedges()\ (freestyle.types.ViewEdge\ method)',\ u'freestyle.types.ViewEdge.update_fedges',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ViewEdge" first="False" fullname="ViewEdge.update_fedges" ids="freestyle.types.ViewEdge.update_fedges" module="freestyle.types" names="freestyle.types.ViewEdge.update_fedges"><desc_name xml:space="preserve">update_fedges</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Sets Viewedge to this for all embedded fedges.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'chaining_time_stamp\ (freestyle.types.ViewEdge\ attribute)',\ u'freestyle.types.ViewEdge.chaining_time_stamp',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewEdge" first="False" fullname="ViewEdge.chaining_time_stamp" ids="freestyle.types.ViewEdge.chaining_time_stamp" module="freestyle.types" names="freestyle.types.ViewEdge.chaining_time_stamp"><desc_name xml:space="preserve">chaining_time_stamp</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The time stamp of this ViewEdge.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'first_fedge\ (freestyle.types.ViewEdge\ attribute)',\ u'freestyle.types.ViewEdge.first_fedge',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewEdge" first="False" fullname="ViewEdge.first_fedge" ids="freestyle.types.ViewEdge.first_fedge" module="freestyle.types" names="freestyle.types.ViewEdge.first_fedge"><desc_name xml:space="preserve">first_fedge</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The first FEdge that constitutes this ViewEdge.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.FEdge" reftitle="freestyle.types.FEdge"><literal classes="xref py py-class">FEdge</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'first_viewvertex\ (freestyle.types.ViewEdge\ attribute)',\ u'freestyle.types.ViewEdge.first_viewvertex',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewEdge" first="False" fullname="ViewEdge.first_viewvertex" ids="freestyle.types.ViewEdge.first_viewvertex" module="freestyle.types" names="freestyle.types.ViewEdge.first_viewvertex"><desc_name xml:space="preserve">first_viewvertex</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The first ViewVertex.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.ViewVertex" reftitle="freestyle.types.ViewVertex"><literal classes="xref py py-class">ViewVertex</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'id\ (freestyle.types.ViewEdge\ attribute)',\ u'freestyle.types.ViewEdge.id',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewEdge" first="False" fullname="ViewEdge.id" ids="freestyle.types.ViewEdge.id" module="freestyle.types" names="freestyle.types.ViewEdge.id"><desc_name xml:space="preserve">id</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The Id of this ViewEdge.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Id" reftitle="freestyle.types.Id"><literal classes="xref py py-class">Id</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'is_closed\ (freestyle.types.ViewEdge\ attribute)',\ u'freestyle.types.ViewEdge.is_closed',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewEdge" first="False" fullname="ViewEdge.is_closed" ids="freestyle.types.ViewEdge.is_closed" module="freestyle.types" names="freestyle.types.ViewEdge.is_closed"><desc_name xml:space="preserve">is_closed</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>True if this ViewEdge forms a closed loop.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'last_fedge\ (freestyle.types.ViewEdge\ attribute)',\ u'freestyle.types.ViewEdge.last_fedge',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewEdge" first="False" fullname="ViewEdge.last_fedge" ids="freestyle.types.ViewEdge.last_fedge" module="freestyle.types" names="freestyle.types.ViewEdge.last_fedge"><desc_name xml:space="preserve">last_fedge</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The last FEdge that constitutes this ViewEdge.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.FEdge" reftitle="freestyle.types.FEdge"><literal classes="xref py py-class">FEdge</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'last_viewvertex\ (freestyle.types.ViewEdge\ attribute)',\ u'freestyle.types.ViewEdge.last_viewvertex',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewEdge" first="False" fullname="ViewEdge.last_viewvertex" ids="freestyle.types.ViewEdge.last_viewvertex" module="freestyle.types" names="freestyle.types.ViewEdge.last_viewvertex"><desc_name xml:space="preserve">last_viewvertex</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The second ViewVertex.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.ViewVertex" reftitle="freestyle.types.ViewVertex"><literal classes="xref py py-class">ViewVertex</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'nature\ (freestyle.types.ViewEdge\ attribute)',\ u'freestyle.types.ViewEdge.nature',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewEdge" first="False" fullname="ViewEdge.nature" ids="freestyle.types.ViewEdge.nature" module="freestyle.types" names="freestyle.types.ViewEdge.nature"><desc_name xml:space="preserve">nature</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The nature of this ViewEdge.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Nature" reftitle="freestyle.types.Nature"><literal classes="xref py py-class">Nature</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'occludee\ (freestyle.types.ViewEdge\ attribute)',\ u'freestyle.types.ViewEdge.occludee',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewEdge" first="False" fullname="ViewEdge.occludee" ids="freestyle.types.ViewEdge.occludee" module="freestyle.types" names="freestyle.types.ViewEdge.occludee"><desc_name xml:space="preserve">occludee</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The shape that is occluded by the ViewShape to which this ViewEdge
                            belongs to.  If no object is occluded, this property is set to None.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.ViewShape" reftitle="freestyle.types.ViewShape"><literal classes="xref py py-class">ViewShape</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'qi\ (freestyle.types.ViewEdge\ attribute)',\ u'freestyle.types.ViewEdge.qi',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewEdge" first="False" fullname="ViewEdge.qi" ids="freestyle.types.ViewEdge.qi" module="freestyle.types" names="freestyle.types.ViewEdge.qi"><desc_name xml:space="preserve">qi</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The quantitative invisibility.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'viewshape\ (freestyle.types.ViewEdge\ attribute)',\ u'freestyle.types.ViewEdge.viewshape',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewEdge" first="False" fullname="ViewEdge.viewshape" ids="freestyle.types.ViewEdge.viewshape" module="freestyle.types" names="freestyle.types.ViewEdge.viewshape"><desc_name xml:space="preserve">viewshape</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The ViewShape to which this ViewEdge belongs to.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.ViewShape" reftitle="freestyle.types.ViewShape"><literal classes="xref py py-class">ViewShape</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'ViewEdgeIterator\ (class\ in\ freestyle.types)',\ u'freestyle.types.ViewEdgeIterator',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ViewEdgeIterator" ids="freestyle.types.ViewEdgeIterator" module="freestyle.types" names="freestyle.types.ViewEdgeIterator"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">ViewEdgeIterator</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Iterator" reftitle="freestyle.types.Iterator"><literal classes="xref py py-class">Iterator</literal></reference> &gt; <reference internal="True" refid="freestyle.types.ViewEdgeIterator" reftitle="freestyle.types.ViewEdgeIterator"><literal classes="xref py py-class">ViewEdgeIterator</literal></reference></paragraph>
                <paragraph>Base class for iterators over ViewEdges of the <reference internal="True" refid="freestyle.types.ViewMap" reftitle="freestyle.types.ViewMap"><literal classes="xref py py-class">ViewMap</literal></reference> Graph.
                    Basically the increment() operator of this class should be able to
                    take the decision of “where” (on which ViewEdge) to go when pointing
                    on a given ViewEdge.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.ViewEdgeIterator\ method)',\ u'freestyle.types.ViewEdgeIterator.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ViewEdgeIterator" first="False" fullname="ViewEdgeIterator.__init__" ids="freestyle.types.ViewEdgeIterator.__init__" module="freestyle.types" names="freestyle.types.ViewEdgeIterator.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">begin=None</desc_parameter><desc_parameter xml:space="preserve">orientation=True</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a ViewEdgeIterator from a starting ViewEdge and its
                            orientation.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">begin</literal_strong> (<reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference> or None) – The ViewEdge from where to start the iteration.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">orientation</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – If true, we’ll look for the next ViewEdge among
                                                the ViewEdges that surround the ending ViewVertex of begin.  If
                                                false, we’ll search over the ViewEdges surrounding the ending
                                                ViewVertex of begin.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.ViewEdgeIterator\ method)',\ u'freestyle.types.ViewEdgeIterator.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ViewEdgeIterator" first="False" fullname="ViewEdgeIterator.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<reference internal="True" refid="freestyle.types.ViewEdgeIterator" reftitle="freestyle.types.ViewEdgeIterator"><literal classes="xref py py-class">ViewEdgeIterator</literal></reference>) – A ViewEdgeIterator object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'change_orientation()\ (freestyle.types.ViewEdgeIterator\ method)',\ u'freestyle.types.ViewEdgeIterator.change_orientation',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ViewEdgeIterator" first="False" fullname="ViewEdgeIterator.change_orientation" ids="freestyle.types.ViewEdgeIterator.change_orientation" module="freestyle.types" names="freestyle.types.ViewEdgeIterator.change_orientation"><desc_name xml:space="preserve">change_orientation</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Changes the current orientation.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'begin\ (freestyle.types.ViewEdgeIterator\ attribute)',\ u'freestyle.types.ViewEdgeIterator.begin',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewEdgeIterator" first="False" fullname="ViewEdgeIterator.begin" ids="freestyle.types.ViewEdgeIterator.begin" module="freestyle.types" names="freestyle.types.ViewEdgeIterator.begin"><desc_name xml:space="preserve">begin</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The first ViewEdge used for the iteration.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'current_edge\ (freestyle.types.ViewEdgeIterator\ attribute)',\ u'freestyle.types.ViewEdgeIterator.current_edge',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewEdgeIterator" first="False" fullname="ViewEdgeIterator.current_edge" ids="freestyle.types.ViewEdgeIterator.current_edge" module="freestyle.types" names="freestyle.types.ViewEdgeIterator.current_edge"><desc_name xml:space="preserve">current_edge</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The ViewEdge object currently pointed by this iterator.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'object\ (freestyle.types.ViewEdgeIterator\ attribute)',\ u'freestyle.types.ViewEdgeIterator.object',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewEdgeIterator" first="False" fullname="ViewEdgeIterator.object" ids="freestyle.types.ViewEdgeIterator.object" module="freestyle.types" names="freestyle.types.ViewEdgeIterator.object"><desc_name xml:space="preserve">object</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The ViewEdge object currently pointed by this iterator.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'orientation\ (freestyle.types.ViewEdgeIterator\ attribute)',\ u'freestyle.types.ViewEdgeIterator.orientation',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewEdgeIterator" first="False" fullname="ViewEdgeIterator.orientation" ids="freestyle.types.ViewEdgeIterator.orientation" module="freestyle.types" names="freestyle.types.ViewEdgeIterator.orientation"><desc_name xml:space="preserve">orientation</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The orientation of the pointed ViewEdge in the iteration.
                            If true, the iterator looks for the next ViewEdge among those ViewEdges
                            that surround the ending ViewVertex of the “begin” ViewEdge.  If false,
                            the iterator searches over the ViewEdges surrounding the ending ViewVertex
                            of the “begin” ViewEdge.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'ViewMap\ (class\ in\ freestyle.types)',\ u'freestyle.types.ViewMap',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ViewMap" ids="freestyle.types.ViewMap" module="freestyle.types" names="freestyle.types.ViewMap"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">ViewMap</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class defining the ViewMap.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.ViewMap\ method)',\ u'freestyle.types.ViewMap.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ViewMap" first="False" fullname="ViewMap.__init__" ids="freestyle.types.ViewMap.__init__" module="freestyle.types" names="freestyle.types.ViewMap.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'get_closest_fedge()\ (freestyle.types.ViewMap\ method)',\ u'freestyle.types.ViewMap.get_closest_fedge',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ViewMap" first="False" fullname="ViewMap.get_closest_fedge" ids="freestyle.types.ViewMap.get_closest_fedge" module="freestyle.types" names="freestyle.types.ViewMap.get_closest_fedge"><desc_name xml:space="preserve">get_closest_fedge</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">x</desc_parameter><desc_parameter xml:space="preserve">y</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Gets the FEdge nearest to the 2D point specified as arguments.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">x</literal_strong> (<literal_emphasis>float</literal_emphasis>) – X coordinate of a 2D point.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">y</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Y coordinate of a 2D point.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The FEdge nearest to the specified 2D point.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.FEdge" reftitle="freestyle.types.FEdge"><literal classes="xref py py-class">FEdge</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'get_closest_viewedge()\ (freestyle.types.ViewMap\ method)',\ u'freestyle.types.ViewMap.get_closest_viewedge',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ViewMap" first="False" fullname="ViewMap.get_closest_viewedge" ids="freestyle.types.ViewMap.get_closest_viewedge" module="freestyle.types" names="freestyle.types.ViewMap.get_closest_viewedge"><desc_name xml:space="preserve">get_closest_viewedge</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">x</desc_parameter><desc_parameter xml:space="preserve">y</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Gets the ViewEdge nearest to the 2D point specified as arguments.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">x</literal_strong> (<literal_emphasis>float</literal_emphasis>) – X coordinate of a 2D point.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">y</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Y coordinate of a 2D point.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The ViewEdge nearest to the specified 2D point.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'scene_bbox\ (freestyle.types.ViewMap\ attribute)',\ u'freestyle.types.ViewMap.scene_bbox',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewMap" first="False" fullname="ViewMap.scene_bbox" ids="freestyle.types.ViewMap.scene_bbox" module="freestyle.types" names="freestyle.types.ViewMap.scene_bbox"><desc_name xml:space="preserve">scene_bbox</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The 3D bounding box of the scene.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.BBox" reftitle="freestyle.types.BBox"><literal classes="xref py py-class">BBox</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'ViewShape\ (class\ in\ freestyle.types)',\ u'freestyle.types.ViewShape',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ViewShape" ids="freestyle.types.ViewShape" module="freestyle.types" names="freestyle.types.ViewShape"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">ViewShape</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class gathering the elements of the ViewMap (i.e., <reference internal="True" refid="freestyle.types.ViewVertex" reftitle="freestyle.types.ViewVertex"><literal classes="xref py py-class">ViewVertex</literal></reference>
                    and <reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference>) that are issued from the same input shape.</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.ViewShape\ method)',\ u'freestyle.types.ViewShape.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ViewShape" first="False" fullname="ViewShape.__init__" ids="freestyle.types.ViewShape.__init__" module="freestyle.types" names="freestyle.types.ViewShape.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.ViewShape\ method)',\ u'freestyle.types.ViewShape.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ViewShape" first="False" fullname="ViewShape.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">brother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">brother</literal_strong> (<reference internal="True" refid="freestyle.types.ViewShape" reftitle="freestyle.types.ViewShape"><literal classes="xref py py-class">ViewShape</literal></reference>) – A ViewShape object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.ViewShape\ method)',\ u'freestyle.types.ViewShape.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ViewShape" first="False" fullname="ViewShape.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">sshape</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Builds a ViewShape from an SShape.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">sshape</literal_strong> (<reference internal="True" refid="freestyle.types.SShape" reftitle="freestyle.types.SShape"><literal classes="xref py py-class">SShape</literal></reference>) – An SShape object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'add_edge()\ (freestyle.types.ViewShape\ method)',\ u'freestyle.types.ViewShape.add_edge',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ViewShape" first="False" fullname="ViewShape.add_edge" ids="freestyle.types.ViewShape.add_edge" module="freestyle.types" names="freestyle.types.ViewShape.add_edge"><desc_name xml:space="preserve">add_edge</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">edge</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Adds a ViewEdge to the list of ViewEdge objects.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">edge</literal_strong> (<reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference>) – A ViewEdge object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'add_vertex()\ (freestyle.types.ViewShape\ method)',\ u'freestyle.types.ViewShape.add_vertex',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ViewShape" first="False" fullname="ViewShape.add_vertex" ids="freestyle.types.ViewShape.add_vertex" module="freestyle.types" names="freestyle.types.ViewShape.add_vertex"><desc_name xml:space="preserve">add_vertex</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">vertex</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Adds a ViewVertex to the list of the ViewVertex objects.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">vertex</literal_strong> (<reference internal="True" refid="freestyle.types.ViewVertex" reftitle="freestyle.types.ViewVertex"><literal classes="xref py py-class">ViewVertex</literal></reference>) – A ViewVertex object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'edges\ (freestyle.types.ViewShape\ attribute)',\ u'freestyle.types.ViewShape.edges',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewShape" first="False" fullname="ViewShape.edges" ids="freestyle.types.ViewShape.edges" module="freestyle.types" names="freestyle.types.ViewShape.edges"><desc_name xml:space="preserve">edges</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The list of ViewEdge objects contained in this ViewShape.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>List of <reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference> objects</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'id\ (freestyle.types.ViewShape\ attribute)',\ u'freestyle.types.ViewShape.id',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewShape" first="False" fullname="ViewShape.id" ids="freestyle.types.ViewShape.id" module="freestyle.types" names="freestyle.types.ViewShape.id"><desc_name xml:space="preserve">id</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The Id of this ViewShape.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Id" reftitle="freestyle.types.Id"><literal classes="xref py py-class">Id</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'library_path\ (freestyle.types.ViewShape\ attribute)',\ u'freestyle.types.ViewShape.library_path',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewShape" first="False" fullname="ViewShape.library_path" ids="freestyle.types.ViewShape.library_path" module="freestyle.types" names="freestyle.types.ViewShape.library_path"><desc_name xml:space="preserve">library_path</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The library path of the ViewShape.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>str, or None if the ViewShape is not part of a library</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'name\ (freestyle.types.ViewShape\ attribute)',\ u'freestyle.types.ViewShape.name',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewShape" first="False" fullname="ViewShape.name" ids="freestyle.types.ViewShape.name" module="freestyle.types" names="freestyle.types.ViewShape.name"><desc_name xml:space="preserve">name</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The name of the ViewShape.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>str</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'sshape\ (freestyle.types.ViewShape\ attribute)',\ u'freestyle.types.ViewShape.sshape',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewShape" first="False" fullname="ViewShape.sshape" ids="freestyle.types.ViewShape.sshape" module="freestyle.types" names="freestyle.types.ViewShape.sshape"><desc_name xml:space="preserve">sshape</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The SShape on top of which this ViewShape is built.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.SShape" reftitle="freestyle.types.SShape"><literal classes="xref py py-class">SShape</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'vertices\ (freestyle.types.ViewShape\ attribute)',\ u'freestyle.types.ViewShape.vertices',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewShape" first="False" fullname="ViewShape.vertices" ids="freestyle.types.ViewShape.vertices" module="freestyle.types" names="freestyle.types.ViewShape.vertices"><desc_name xml:space="preserve">vertices</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The list of ViewVertex objects contained in this ViewShape.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>List of <reference internal="True" refid="freestyle.types.ViewVertex" reftitle="freestyle.types.ViewVertex"><literal classes="xref py py-class">ViewVertex</literal></reference> objects</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'ViewVertex\ (class\ in\ freestyle.types)',\ u'freestyle.types.ViewVertex',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="ViewVertex" ids="freestyle.types.ViewVertex" module="freestyle.types" names="freestyle.types.ViewVertex"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">ViewVertex</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Interface0D" reftitle="freestyle.types.Interface0D"><literal classes="xref py py-class">Interface0D</literal></reference> &gt; <reference internal="True" refid="freestyle.types.ViewVertex" reftitle="freestyle.types.ViewVertex"><literal classes="xref py py-class">ViewVertex</literal></reference></paragraph>
                <paragraph>Class to define a view vertex.  A view vertex is a feature vertex
                    corresponding to a point of the image graph, where the characteristics
                    of an edge (e.g., nature and visibility) might change.  A
                    <reference internal="True" refid="freestyle.types.ViewVertex" reftitle="freestyle.types.ViewVertex"><literal classes="xref py py-class">ViewVertex</literal></reference> can be of two kinds: A <reference internal="True" refid="freestyle.types.TVertex" reftitle="freestyle.types.TVertex"><literal classes="xref py py-class">TVertex</literal></reference> when it
                    corresponds to the intersection between two ViewEdges or a
                    <reference internal="True" refid="freestyle.types.NonTVertex" reftitle="freestyle.types.NonTVertex"><literal classes="xref py py-class">NonTVertex</literal></reference> when it corresponds to a vertex of the initial
                    input mesh (it is the case for vertices such as corners for example).
                    Thus, this class can be specialized into two classes, the
                    <reference internal="True" refid="freestyle.types.TVertex" reftitle="freestyle.types.TVertex"><literal classes="xref py py-class">TVertex</literal></reference> class and the <reference internal="True" refid="freestyle.types.NonTVertex" reftitle="freestyle.types.NonTVertex"><literal classes="xref py py-class">NonTVertex</literal></reference> class.</paragraph>
                <index entries="['single',\ u'edges_begin()\ (freestyle.types.ViewVertex\ method)',\ u'freestyle.types.ViewVertex.edges_begin',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ViewVertex" first="False" fullname="ViewVertex.edges_begin" ids="freestyle.types.ViewVertex.edges_begin" module="freestyle.types" names="freestyle.types.ViewVertex.edges_begin"><desc_name xml:space="preserve">edges_begin</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns an iterator over the ViewEdges that goes to or comes from
                            this ViewVertex pointing to the first ViewEdge of the list. The
                            orientedViewEdgeIterator allows to iterate in CCW order over these
                            ViewEdges and to get the orientation for each ViewEdge
                            (incoming/outgoing).</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>An orientedViewEdgeIterator pointing to the first ViewEdge.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.orientedViewEdgeIterator" reftitle="freestyle.types.orientedViewEdgeIterator"><literal classes="xref py py-class">orientedViewEdgeIterator</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'edges_end()\ (freestyle.types.ViewVertex\ method)',\ u'freestyle.types.ViewVertex.edges_end',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ViewVertex" first="False" fullname="ViewVertex.edges_end" ids="freestyle.types.ViewVertex.edges_end" module="freestyle.types" names="freestyle.types.ViewVertex.edges_end"><desc_name xml:space="preserve">edges_end</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns an orientedViewEdgeIterator over the ViewEdges around this
                            ViewVertex, pointing after the last ViewEdge.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>An orientedViewEdgeIterator pointing after the last ViewEdge.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.orientedViewEdgeIterator" reftitle="freestyle.types.orientedViewEdgeIterator"><literal classes="xref py py-class">orientedViewEdgeIterator</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'edges_iterator()\ (freestyle.types.ViewVertex\ method)',\ u'freestyle.types.ViewVertex.edges_iterator',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="ViewVertex" first="False" fullname="ViewVertex.edges_iterator" ids="freestyle.types.ViewVertex.edges_iterator" module="freestyle.types" names="freestyle.types.ViewVertex.edges_iterator"><desc_name xml:space="preserve">edges_iterator</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">edge</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Returns an orientedViewEdgeIterator pointing to the ViewEdge given
                            as argument.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">edge</literal_strong> (<reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference>) – A ViewEdge object.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>An orientedViewEdgeIterator pointing to the given ViewEdge.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.orientedViewEdgeIterator" reftitle="freestyle.types.orientedViewEdgeIterator"><literal classes="xref py py-class">orientedViewEdgeIterator</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'nature\ (freestyle.types.ViewVertex\ attribute)',\ u'freestyle.types.ViewVertex.nature',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="ViewVertex" first="False" fullname="ViewVertex.nature" ids="freestyle.types.ViewVertex.nature" module="freestyle.types" names="freestyle.types.ViewVertex.nature"><desc_name xml:space="preserve">nature</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The nature of this ViewVertex.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" refid="freestyle.types.Nature" reftitle="freestyle.types.Nature"><literal classes="xref py py-class">Nature</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'orientedViewEdgeIterator\ (class\ in\ freestyle.types)',\ u'freestyle.types.orientedViewEdgeIterator',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="orientedViewEdgeIterator" ids="freestyle.types.orientedViewEdgeIterator" module="freestyle.types" names="freestyle.types.orientedViewEdgeIterator"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">freestyle.types.</desc_addname><desc_name xml:space="preserve">orientedViewEdgeIterator</desc_name></desc_signature>
            <desc_content>
                <paragraph>Class hierarchy: <reference internal="True" refid="freestyle.types.Iterator" reftitle="freestyle.types.Iterator"><literal classes="xref py py-class">Iterator</literal></reference> &gt; <reference internal="True" refid="freestyle.types.orientedViewEdgeIterator" reftitle="freestyle.types.orientedViewEdgeIterator"><literal classes="xref py py-class">orientedViewEdgeIterator</literal></reference></paragraph>
                <paragraph>Class representing an iterator over oriented ViewEdges around a
                    <reference internal="True" refid="freestyle.types.ViewVertex" reftitle="freestyle.types.ViewVertex"><literal classes="xref py py-class">ViewVertex</literal></reference>.  This iterator allows a CCW iteration (in the image
                    plane).  An instance of an orientedViewEdgeIterator can only be
                    obtained from a ViewVertex by calling edges_begin() or edges_end().</paragraph>
                <index entries="['single',\ u'__init__()\ (freestyle.types.orientedViewEdgeIterator\ method)',\ u'freestyle.types.orientedViewEdgeIterator.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="orientedViewEdgeIterator" first="False" fullname="orientedViewEdgeIterator.__init__" ids="freestyle.types.orientedViewEdgeIterator.__init__" module="freestyle.types" names="freestyle.types.orientedViewEdgeIterator.__init__"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Default constructor.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'__init__()\ (freestyle.types.orientedViewEdgeIterator\ method)',\ u'freestyle.types.orientedViewEdgeIterator.__init__',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="orientedViewEdgeIterator" first="False" fullname="orientedViewEdgeIterator.__init__" module="freestyle.types"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">iBrother</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Copy constructor.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">iBrother</literal_strong> (<reference internal="True" refid="freestyle.types.orientedViewEdgeIterator" reftitle="freestyle.types.orientedViewEdgeIterator"><literal classes="xref py py-class">orientedViewEdgeIterator</literal></reference>) – An orientedViewEdgeIterator object.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'object\ (freestyle.types.orientedViewEdgeIterator\ attribute)',\ u'freestyle.types.orientedViewEdgeIterator.object',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="orientedViewEdgeIterator" first="False" fullname="orientedViewEdgeIterator.object" ids="freestyle.types.orientedViewEdgeIterator.object" module="freestyle.types" names="freestyle.types.orientedViewEdgeIterator.object"><desc_name xml:space="preserve">object</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The oriented ViewEdge (i.e., a tuple of the pointed ViewEdge and a boolean
                            value) currently pointed to by this iterator. If the boolean value is true,
                            the ViewEdge is incoming.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>(<reference internal="True" refid="freestyle.types.ViewEdge" reftitle="freestyle.types.ViewEdge"><literal classes="xref py py-class">ViewEdge</literal></reference>, bool)</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
    </section>
</document>
