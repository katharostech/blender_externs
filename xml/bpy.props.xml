<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/bpy.props.rst">
    <section ids="module-bpy.props property-definitions-bpy-props" names="property\ definitions\ (bpy.props)">
        <title>Property Definitions (bpy.props)</title>
        <index entries="['single',\ u'bpy.props\ (module)',\ u'module-bpy.props',\ '',\ None]"></index>
        <paragraph>This module defines properties to extend Blender’s internal data. The result of these functions is used to assign properties to classes registered with Blender and can’t be used directly.</paragraph>
        <note>
            <paragraph>All parameters to these functions must be passed as keywords.</paragraph>
        </note>
        <section ids="assigning-to-existing-classes" names="assigning\ to\ existing\ classes">
            <title>Assigning to Existing Classes</title>
            <paragraph>Custom properties can be added to any subclass of an <literal classes="xref py py-class">ID</literal>,
                <literal classes="xref py py-class">Bone</literal> and <literal classes="xref py py-class">PoseBone</literal>.</paragraph>
            <paragraph>These properties can be animated, accessed by the user interface and python
                like Blender’s existing properties.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.props.py" xml:space="preserve">
import bpy

# Assign a custom property to an existing type.
bpy.types.Material.custom_float = bpy.props.FloatProperty(name="Test Prob")

# Test the property is there.
bpy.data.materials[0].custom_float = 5.0
</literal_block>
        </section>
        <section ids="operator-example" names="operator\ example">
            <title>Operator Example</title>
            <paragraph>A common use of custom properties is for python based <literal classes="xref py py-class">Operator</literal>
                classes. Test this code by running it in the text editor, or by clicking the
                button in the 3D Viewport’s Tools panel. The latter will show the properties
                in the Redo panel and allow you to change them.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.props.1.py" xml:space="preserve">import bpy


class OBJECT_OT_property_example(bpy.types.Operator):
    bl_idname = "object.property_example"
    bl_label = "Property Example"
    bl_options = {'REGISTER', 'UNDO'}

    my_float = bpy.props.FloatProperty(name="Some Floating Point")
    my_bool = bpy.props.BoolProperty(name="Toggle Option")
    my_string = bpy.props.StringProperty(name="String Value")

    def execute(self, context):
        self.report({'INFO'}, 'F: %.2f  B: %s  S: %r' %
                    (self.my_float, self.my_bool, self.my_string))
        print('My float:', self.my_float)
        print('My bool:', self.my_bool)
        print('My string:', self.my_string)
        return {'FINISHED'}


class OBJECT_PT_property_example(bpy.types.Panel):
    bl_idname = "object_PT_property_example"
    bl_label = "Property Example"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'TOOLS'
    bl_category = "Tools"

    def draw(self, context):
        # You can set the property values that should be used when the user
        # presses the button in the UI.
        props = self.layout.operator('object.property_example')
        props.my_bool = True
        props.my_string = "Shouldn't that be 47?"

        # You can set properties dynamically:
        if context.object:
            props.my_float = context.object.location.x
        else:
            props.my_float = 327


bpy.utils.register_class(OBJECT_OT_property_example)
bpy.utils.register_class(OBJECT_PT_property_example)

# Demo call. Be sure to also test in the 3D Viewport.
bpy.ops.object.property_example(my_float=47, my_bool=True,
                                my_string="Shouldn't that be 327?")
</literal_block>
        </section>
        <section ids="propertygroup-example" names="propertygroup\ example">
            <title>PropertyGroup Example</title>
            <paragraph>PropertyGroups can be used for collecting custom settings into one value
                to avoid many individual settings mixed in together.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.props.2.py" xml:space="preserve">
import bpy


class MaterialSettings(bpy.types.PropertyGroup):
    my_int = bpy.props.IntProperty()
    my_float = bpy.props.FloatProperty()
    my_string = bpy.props.StringProperty()


bpy.utils.register_class(MaterialSettings)

bpy.types.Material.my_settings = \
    bpy.props.PointerProperty(type=MaterialSettings)

# test the new settings work
material = bpy.data.materials[0]

material.my_settings.my_int = 5
material.my_settings.my_float = 3.0
material.my_settings.my_string = "Foo"
</literal_block>
        </section>
        <section ids="collection-example" names="collection\ example">
            <title>Collection Example</title>
            <paragraph>Custom properties can be added to any subclass of an <literal classes="xref py py-class">ID</literal>,
                <literal classes="xref py py-class">Bone</literal> and <literal classes="xref py py-class">PoseBone</literal>.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.props.3.py" xml:space="preserve">
import bpy


# Assign a collection
class SceneSettingItem(bpy.types.PropertyGroup):
    name = bpy.props.StringProperty(name="Test Prop", default="Unknown")
    value = bpy.props.IntProperty(name="Test Prop", default=22)


bpy.utils.register_class(SceneSettingItem)

bpy.types.Scene.my_settings = \
    bpy.props.CollectionProperty(type=SceneSettingItem)

# Assume an armature object selected
print("Adding 2 values!")

my_item = bpy.context.scene.my_settings.add()
my_item.name = "Spam"
my_item.value = 1000

my_item = bpy.context.scene.my_settings.add()
my_item.name = "Eggs"
my_item.value = 30

for my_item in bpy.context.scene.my_settings:
    print(my_item.name, my_item.value)
</literal_block>
        </section>
        <section ids="update-example" names="update\ example">
            <title>Update Example</title>
            <paragraph>It can be useful to perform an action when a property is changed and can be
                used to update other properties or synchronize with external data.</paragraph>
            <paragraph>All properties define update functions except for CollectionProperty.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.props.4.py" xml:space="preserve">
import bpy


def update_func(self, context):
    print("my test function", self)


bpy.types.Scene.testprop = bpy.props.FloatProperty(update=update_func)

bpy.context.scene.testprop = 11.0

# &gt;&gt;&gt; my test function &lt;bpy_struct, Scene("Scene")&gt;
</literal_block>
        </section>
        <section ids="getter-setter-example" names="getter/setter\ example">
            <title>Getter/Setter Example</title>
            <paragraph>Getter/setter functions can be used for boolean, int, float, string and enum properties.
                If these callbacks are defined the property will not be stored in the ID properties
                automatically. Instead, the <title_reference>get</title_reference> and <title_reference>set</title_reference> functions will be called when the property
                is respectively read or written from the API.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.props.5.py" xml:space="preserve">import bpy


# Simple property reading/writing from ID properties.
# This is what the RNA would do internally.
def get_float(self):
    return self["testprop"]


def set_float(self, value):
    self["testprop"] = value


bpy.types.Scene.test_float = bpy.props.FloatProperty(get=get_float, set=set_float)


# Read-only string property, returns the current date
def get_date(self):
    import datetime
    return str(datetime.datetime.now())


bpy.types.Scene.test_date = bpy.props.StringProperty(get=get_date)


# Boolean array. Set function stores a single boolean value, returned as the second component.
# Array getters must return a list or tuple
# Array size must match the property vector size exactly
def get_array(self):
    return (True, self["somebool"])


def set_array(self, values):
    self["somebool"] = values[0] and values[1]


bpy.types.Scene.test_array = bpy.props.BoolVectorProperty(size=2, get=get_array, set=set_array)


# Enum property.
# Note: the getter/setter callback must use integer identifiers!
test_items = [
    ("RED", "Red", "", 1),
    ("GREEN", "Green", "", 2),
    ("BLUE", "Blue", "", 3),
    ("YELLOW", "Yellow", "", 4),
]


def get_enum(self):
    import random
    return random.randint(1, 4)


def set_enum(self, value):
    print("setting value", value)


bpy.types.Scene.test_enum = bpy.props.EnumProperty(items=test_items, get=get_enum, set=set_enum)


# Testing the properties:
scene = bpy.context.scene

scene.test_float = 12.34
print('test_float:', scene.test_float)

scene.test_array = (True, False)
print('test_array:', tuple(scene.test_array))

# scene.test_date = "blah"   # this would fail, property is read-only
print('test_date:', scene.test_date)

scene.test_enum = 'BLUE'
print('test_enum:', scene.test_enum)

# The above outputs:
# test_float: 12.34000015258789
# test_array: (True, False)
# test_date: 2018-03-14 11:36:53.158653
# setting value 3
# test_enum: GREEN
</literal_block>
            <index entries="['single',\ u'BoolProperty()\ (in\ module\ bpy.props)',\ u'bpy.props.BoolProperty',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="BoolProperty" ids="bpy.props.BoolProperty" module="bpy.props" names="bpy.props.BoolProperty"><desc_addname xml:space="preserve">bpy.props.</desc_addname><desc_name xml:space="preserve">BoolProperty</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name=""</desc_parameter><desc_parameter xml:space="preserve">description=""</desc_parameter><desc_parameter xml:space="preserve">default=False</desc_parameter><desc_parameter xml:space="preserve">options={'ANIMATABLE'}</desc_parameter><desc_parameter xml:space="preserve">tags={}</desc_parameter><desc_parameter xml:space="preserve">subtype='NONE'</desc_parameter><desc_parameter xml:space="preserve">update=None</desc_parameter><desc_parameter xml:space="preserve">get=None</desc_parameter><desc_parameter xml:space="preserve">set=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns a new boolean property definition.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Name used in the user interface.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">description</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Text used for the tooltip and api documentation.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">options</literal_strong> (<literal_emphasis>set</literal_emphasis>) – Enumerator in [‘HIDDEN’, ‘SKIP_SAVE’, ‘ANIMATABLE’, ‘LIBRARY_EDITABLE’, ‘PROPORTIONAL’,’TEXTEDIT_UPDATE’].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">tags</literal_strong> (<literal_emphasis>set</literal_emphasis>) – Enumerator of tags that are defined by parent class.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">subtype</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Enumerator in [‘PIXEL’, ‘UNSIGNED’, ‘PERCENTAGE’, ‘FACTOR’, ‘ANGLE’, ‘TIME’, ‘DISTANCE’, ‘NONE’].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">update</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is modified,
                                            This function must take 2 values (self, context) and return None.
                                            <emphasis>Warning</emphasis> there are no safety checks to avoid infinite recursion.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">get</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is ‘read’,
                                            This function must take 1 value (self) and return the value of the property.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">set</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is ‘written’,
                                            This function must take 2 values (self, value) and return None.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BoolVectorProperty()\ (in\ module\ bpy.props)',\ u'bpy.props.BoolVectorProperty',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="BoolVectorProperty" ids="bpy.props.BoolVectorProperty" module="bpy.props" names="bpy.props.BoolVectorProperty"><desc_addname xml:space="preserve">bpy.props.</desc_addname><desc_name xml:space="preserve">BoolVectorProperty</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name=""</desc_parameter><desc_parameter xml:space="preserve">description=""</desc_parameter><desc_parameter xml:space="preserve">default=(False</desc_parameter><desc_parameter xml:space="preserve">False</desc_parameter><desc_parameter xml:space="preserve">False)</desc_parameter><desc_parameter xml:space="preserve">options={'ANIMATABLE'}</desc_parameter><desc_parameter xml:space="preserve">tags={}</desc_parameter><desc_parameter xml:space="preserve">subtype='NONE'</desc_parameter><desc_parameter xml:space="preserve">size=3</desc_parameter><desc_parameter xml:space="preserve">update=None</desc_parameter><desc_parameter xml:space="preserve">get=None</desc_parameter><desc_parameter xml:space="preserve">set=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns a new vector boolean property definition.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Name used in the user interface.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">description</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Text used for the tooltip and api documentation.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">default</literal_strong> (<literal_emphasis>sequence</literal_emphasis>) – sequence of booleans the length of <emphasis>size</emphasis>.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">options</literal_strong> (<literal_emphasis>set</literal_emphasis>) – Enumerator in [‘HIDDEN’, ‘SKIP_SAVE’, ‘ANIMATABLE’, ‘LIBRARY_EDITABLE’, ‘PROPORTIONAL’,’TEXTEDIT_UPDATE’].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">tags</literal_strong> (<literal_emphasis>set</literal_emphasis>) – Enumerator of tags that are defined by parent class.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">subtype</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Enumerator in [‘COLOR’, ‘TRANSLATION’, ‘DIRECTION’, ‘VELOCITY’, ‘ACCELERATION’, ‘MATRIX’, ‘EULER’, ‘QUATERNION’, ‘AXISANGLE’, ‘XYZ’, ‘COLOR_GAMMA’, ‘LAYER’, ‘LAYER_MEMBER’, ‘NONE’].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">size</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Vector dimensions in [1, 32].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">update</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is modified,
                                            This function must take 2 values (self, context) and return None.
                                            <emphasis>Warning</emphasis> there are no safety checks to avoid infinite recursion.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">get</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is ‘read’,
                                            This function must take 1 value (self) and return the value of the property.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">set</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is ‘written’,
                                            This function must take 2 values (self, value) and return None.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'CollectionProperty()\ (in\ module\ bpy.props)',\ u'bpy.props.CollectionProperty',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="CollectionProperty" ids="bpy.props.CollectionProperty" module="bpy.props" names="bpy.props.CollectionProperty"><desc_addname xml:space="preserve">bpy.props.</desc_addname><desc_name xml:space="preserve">CollectionProperty</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">type=None</desc_parameter><desc_parameter xml:space="preserve">name=""</desc_parameter><desc_parameter xml:space="preserve">description=""</desc_parameter><desc_parameter xml:space="preserve">options={'ANIMATABLE'}</desc_parameter><desc_parameter xml:space="preserve">tags={}</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns a new collection property definition.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">type</literal_strong> (<literal_emphasis>class</literal_emphasis>) – A subclass of <reference internal="True" reftitle="bpy.types.PropertyGroup" refuri="bpy.types.PropertyGroup#bpy.types.PropertyGroup"><literal classes="xref py py-class">bpy.types.PropertyGroup</literal></reference> or <reference internal="True" reftitle="bpy.types.ID" refuri="bpy.types.ID#bpy.types.ID"><literal classes="xref py py-class">bpy.types.ID</literal></reference>.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Name used in the user interface.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">description</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Text used for the tooltip and api documentation.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">options</literal_strong> (<literal_emphasis>set</literal_emphasis>) – Enumerator in [‘HIDDEN’, ‘SKIP_SAVE’, ‘ANIMATABLE’, ‘LIBRARY_EDITABLE’, ‘PROPORTIONAL’,’TEXTEDIT_UPDATE’].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">tags</literal_strong> (<literal_emphasis>set</literal_emphasis>) – Enumerator of tags that are defined by parent class.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'EnumProperty()\ (in\ module\ bpy.props)',\ u'bpy.props.EnumProperty',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="EnumProperty" ids="bpy.props.EnumProperty" module="bpy.props" names="bpy.props.EnumProperty"><desc_addname xml:space="preserve">bpy.props.</desc_addname><desc_name xml:space="preserve">EnumProperty</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">items</desc_parameter><desc_parameter xml:space="preserve">name=""</desc_parameter><desc_parameter xml:space="preserve">description=""</desc_parameter><desc_parameter xml:space="preserve">default=None</desc_parameter><desc_parameter xml:space="preserve">options={'ANIMATABLE'}</desc_parameter><desc_parameter xml:space="preserve">tags={}</desc_parameter><desc_parameter xml:space="preserve">update=None</desc_parameter><desc_parameter xml:space="preserve">get=None</desc_parameter><desc_parameter xml:space="preserve">set=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns a new enumerator property definition.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">items</literal_strong> (<literal_emphasis>sequence of string tuples</literal_emphasis><literal_emphasis> or </literal_emphasis><literal_emphasis>a function</literal_emphasis>) – <paragraph>sequence of enum items formatted:
                                                <literal>[(identifier, name, description, icon, number), ...]</literal>.</paragraph><paragraph>The first three elements of the tuples are mandatory.</paragraph><field_list><field><field_name>identifier</field_name><field_body><paragraph>The identifier is used for Python access.</paragraph></field_body></field><field><field_name>name</field_name><field_body><paragraph>Name for the interace.</paragraph></field_body></field><field><field_name>description</field_name><field_body><paragraph>Used for documentation and tooltips.</paragraph></field_body></field><field><field_name>icon</field_name><field_body><paragraph>An icon string identifier or integer icon value
                                                            (e.g. returned by <reference internal="True" reftitle="bpy.types.UILayout.icon" refuri="bpy.types.UILayout#bpy.types.UILayout.icon"><literal classes="xref py py-class">bpy.types.UILayout.icon</literal></reference>)</paragraph></field_body></field><field><field_name>number</field_name><field_body><paragraph>Unique value used as the identifier for this item (stored in file data).
                                                            Use when the identifier may need to change. If the <emphasis>ENUM_FLAG</emphasis> option is used,
                                                            the values are bitmasks and should be powers of two.</paragraph></field_body></field></field_list><paragraph>When an item only contains 4 items they define <literal>(identifier, name, description, number)</literal>.</paragraph><paragraph>For dynamic values a callback can be passed which returns a list in
                                                the same format as the static list.
                                                This function must take 2 arguments <literal>(self, context)</literal>, <strong>context may be None</strong>.</paragraph><warning><paragraph>There is a known bug with using a callback,
                                                    Python must keep a reference to the strings returned or Blender will misbehave
                                                    or even crash.</paragraph></warning></paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Name used in the user interface.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">description</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Text used for the tooltip and api documentation.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">default</literal_strong> (<literal_emphasis>string</literal_emphasis><literal_emphasis> or </literal_emphasis><literal_emphasis>set</literal_emphasis>) – The default value for this enum, a string from the identifiers used in <emphasis>items</emphasis>.
                                            If the <emphasis>ENUM_FLAG</emphasis> option is used this must be a set of such string identifiers instead.
                                            WARNING: It shall not be specified (or specified to its default <emphasis>None</emphasis> value) for dynamic enums
                                            (i.e. if a callback function is given as <emphasis>items</emphasis> parameter).</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">options</literal_strong> (<literal_emphasis>set</literal_emphasis>) – Enumerator in [‘HIDDEN’, ‘SKIP_SAVE’, ‘ANIMATABLE’, ‘ENUM_FLAG’, ‘LIBRARY_EDITABLE’].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">tags</literal_strong> (<literal_emphasis>set</literal_emphasis>) – Enumerator of tags that are defined by parent class.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">update</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is modified,
                                            This function must take 2 values (self, context) and return None.
                                            <emphasis>Warning</emphasis> there are no safety checks to avoid infinite recursion.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">get</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is ‘read’,
                                            This function must take 1 value (self) and return the value of the property.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">set</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is ‘written’,
                                            This function must take 2 values (self, value) and return None.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'FloatProperty()\ (in\ module\ bpy.props)',\ u'bpy.props.FloatProperty',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="FloatProperty" ids="bpy.props.FloatProperty" module="bpy.props" names="bpy.props.FloatProperty"><desc_addname xml:space="preserve">bpy.props.</desc_addname><desc_name xml:space="preserve">FloatProperty</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name=""</desc_parameter><desc_parameter xml:space="preserve">description=""</desc_parameter><desc_parameter xml:space="preserve">default=0.0</desc_parameter><desc_parameter xml:space="preserve">min=sys.float_info.min</desc_parameter><desc_parameter xml:space="preserve">max=sys.float_info.max</desc_parameter><desc_parameter xml:space="preserve">soft_min=sys.float_info.min</desc_parameter><desc_parameter xml:space="preserve">soft_max=sys.float_info.max</desc_parameter><desc_parameter xml:space="preserve">step=3</desc_parameter><desc_parameter xml:space="preserve">precision=2</desc_parameter><desc_parameter xml:space="preserve">options={'ANIMATABLE'}</desc_parameter><desc_parameter xml:space="preserve">tags={}</desc_parameter><desc_parameter xml:space="preserve">subtype='NONE'</desc_parameter><desc_parameter xml:space="preserve">unit='NONE'</desc_parameter><desc_parameter xml:space="preserve">update=None</desc_parameter><desc_parameter xml:space="preserve">get=None</desc_parameter><desc_parameter xml:space="preserve">set=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns a new float property definition.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Name used in the user interface.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">description</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Text used for the tooltip and api documentation.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">min</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Hard minimum, trying to assign a value below will silently assign this minimum instead.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">max</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Hard maximum, trying to assign a value above will silently assign this maximum instead.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">soft_min</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Soft minimum (&gt;= <emphasis>min</emphasis>), user won’t be able to drag the widget below this value in the UI.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">soft_max</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Soft maximum (&lt;= <emphasis>max</emphasis>), user won’t be able to drag the widget above this value in the UI.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">step</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Step of increment/decrement in UI, in [1, 100], defaults to 3 (WARNING: actual value is /100).</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">precision</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Maximum number of decimal digits to display, in [0, 6].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">options</literal_strong> (<literal_emphasis>set</literal_emphasis>) – Enumerator in [‘HIDDEN’, ‘SKIP_SAVE’, ‘ANIMATABLE’, ‘LIBRARY_EDITABLE’, ‘PROPORTIONAL’,’TEXTEDIT_UPDATE’].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">tags</literal_strong> (<literal_emphasis>set</literal_emphasis>) – Enumerator of tags that are defined by parent class.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">subtype</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Enumerator in [‘PIXEL’, ‘UNSIGNED’, ‘PERCENTAGE’, ‘FACTOR’, ‘ANGLE’, ‘TIME’, ‘DISTANCE’, ‘NONE’].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">unit</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Enumerator in [‘NONE’, ‘LENGTH’, ‘AREA’, ‘VOLUME’, ‘ROTATION’, ‘TIME’, ‘VELOCITY’, ‘ACCELERATION’, ‘MASS’, ‘CAMERA’].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">update</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is modified,
                                            This function must take 2 values (self, context) and return None.
                                            <emphasis>Warning</emphasis> there are no safety checks to avoid infinite recursion.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">get</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is ‘read’,
                                            This function must take 1 value (self) and return the value of the property.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">set</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is ‘written’,
                                            This function must take 2 values (self, value) and return None.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'FloatVectorProperty()\ (in\ module\ bpy.props)',\ u'bpy.props.FloatVectorProperty',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="FloatVectorProperty" ids="bpy.props.FloatVectorProperty" module="bpy.props" names="bpy.props.FloatVectorProperty"><desc_addname xml:space="preserve">bpy.props.</desc_addname><desc_name xml:space="preserve">FloatVectorProperty</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name=""</desc_parameter><desc_parameter xml:space="preserve">description=""</desc_parameter><desc_parameter xml:space="preserve">default=(0.0</desc_parameter><desc_parameter xml:space="preserve">0.0</desc_parameter><desc_parameter xml:space="preserve">0.0)</desc_parameter><desc_parameter xml:space="preserve">min=sys.float_info.min</desc_parameter><desc_parameter xml:space="preserve">max=sys.float_info.max</desc_parameter><desc_parameter xml:space="preserve">soft_min=sys.float_info.min</desc_parameter><desc_parameter xml:space="preserve">soft_max=sys.float_info.max</desc_parameter><desc_parameter xml:space="preserve">step=3</desc_parameter><desc_parameter xml:space="preserve">precision=2</desc_parameter><desc_parameter xml:space="preserve">options={'ANIMATABLE'}</desc_parameter><desc_parameter xml:space="preserve">tags={}</desc_parameter><desc_parameter xml:space="preserve">subtype='NONE'</desc_parameter><desc_parameter xml:space="preserve">unit='NONE'</desc_parameter><desc_parameter xml:space="preserve">size=3</desc_parameter><desc_parameter xml:space="preserve">update=None</desc_parameter><desc_parameter xml:space="preserve">get=None</desc_parameter><desc_parameter xml:space="preserve">set=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns a new vector float property definition.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Name used in the user interface.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">description</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Text used for the tooltip and api documentation.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">default</literal_strong> (<literal_emphasis>sequence</literal_emphasis>) – sequence of floats the length of <emphasis>size</emphasis>.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">min</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Hard minimum, trying to assign a value below will silently assign this minimum instead.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">max</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Hard maximum, trying to assign a value above will silently assign this maximum instead.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">soft_min</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Soft minimum (&gt;= <emphasis>min</emphasis>), user won’t be able to drag the widget below this value in the UI.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">soft_max</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Soft maximum (&lt;= <emphasis>max</emphasis>), user won’t be able to drag the widget above this value in the UI.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">options</literal_strong> (<literal_emphasis>set</literal_emphasis>) – Enumerator in [‘HIDDEN’, ‘SKIP_SAVE’, ‘ANIMATABLE’, ‘LIBRARY_EDITABLE’, ‘PROPORTIONAL’,’TEXTEDIT_UPDATE’].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">tags</literal_strong> (<literal_emphasis>set</literal_emphasis>) – Enumerator of tags that are defined by parent class.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">step</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Step of increment/decrement in UI, in [1, 100], defaults to 3 (WARNING: actual value is /100).</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">precision</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Maximum number of decimal digits to display, in [0, 6].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">subtype</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Enumerator in [‘COLOR’, ‘TRANSLATION’, ‘DIRECTION’, ‘VELOCITY’, ‘ACCELERATION’, ‘MATRIX’, ‘EULER’, ‘QUATERNION’, ‘AXISANGLE’, ‘XYZ’, ‘COLOR_GAMMA’, ‘LAYER’, ‘LAYER_MEMBER’, ‘NONE’].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">unit</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Enumerator in [‘NONE’, ‘LENGTH’, ‘AREA’, ‘VOLUME’, ‘ROTATION’, ‘TIME’, ‘VELOCITY’, ‘ACCELERATION’, ‘MASS’, ‘CAMERA’].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">size</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Vector dimensions in [1, 32].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">update</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is modified,
                                            This function must take 2 values (self, context) and return None.
                                            <emphasis>Warning</emphasis> there are no safety checks to avoid infinite recursion.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">get</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is ‘read’,
                                            This function must take 1 value (self) and return the value of the property.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">set</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is ‘written’,
                                            This function must take 2 values (self, value) and return None.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'IntProperty()\ (in\ module\ bpy.props)',\ u'bpy.props.IntProperty',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="IntProperty" ids="bpy.props.IntProperty" module="bpy.props" names="bpy.props.IntProperty"><desc_addname xml:space="preserve">bpy.props.</desc_addname><desc_name xml:space="preserve">IntProperty</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name=""</desc_parameter><desc_parameter xml:space="preserve">description=""</desc_parameter><desc_parameter xml:space="preserve">default=0</desc_parameter><desc_parameter xml:space="preserve">min=-2**31</desc_parameter><desc_parameter xml:space="preserve">max=2**31-1</desc_parameter><desc_parameter xml:space="preserve">soft_min=-2**31</desc_parameter><desc_parameter xml:space="preserve">soft_max=2**31-1</desc_parameter><desc_parameter xml:space="preserve">step=1</desc_parameter><desc_parameter xml:space="preserve">options={'ANIMATABLE'}</desc_parameter><desc_parameter xml:space="preserve">tags={}</desc_parameter><desc_parameter xml:space="preserve">subtype='NONE'</desc_parameter><desc_parameter xml:space="preserve">update=None</desc_parameter><desc_parameter xml:space="preserve">get=None</desc_parameter><desc_parameter xml:space="preserve">set=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns a new int property definition.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Name used in the user interface.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">description</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Text used for the tooltip and api documentation.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">min</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Hard minimum, trying to assign a value below will silently assign this minimum instead.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">max</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Hard maximum, trying to assign a value above will silently assign this maximum instead.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">soft_max</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Soft maximum (&lt;= <emphasis>max</emphasis>), user won’t be able to drag the widget above this value in the UI.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">soft_min</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Soft minimum (&gt;= <emphasis>min</emphasis>), user won’t be able to drag the widget below this value in the UI.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">step</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Step of increment/decrement in UI, in [1, 100], defaults to 1 (WARNING: unused currently!).</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">options</literal_strong> (<literal_emphasis>set</literal_emphasis>) – Enumerator in [‘HIDDEN’, ‘SKIP_SAVE’, ‘ANIMATABLE’, ‘LIBRARY_EDITABLE’, ‘PROPORTIONAL’,’TEXTEDIT_UPDATE’].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">tags</literal_strong> (<literal_emphasis>set</literal_emphasis>) – Enumerator of tags that are defined by parent class.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">subtype</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Enumerator in [‘PIXEL’, ‘UNSIGNED’, ‘PERCENTAGE’, ‘FACTOR’, ‘ANGLE’, ‘TIME’, ‘DISTANCE’, ‘NONE’].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">update</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is modified,
                                            This function must take 2 values (self, context) and return None.
                                            <emphasis>Warning</emphasis> there are no safety checks to avoid infinite recursion.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">get</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is ‘read’,
                                            This function must take 1 value (self) and return the value of the property.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">set</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is ‘written’,
                                            This function must take 2 values (self, value) and return None.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'IntVectorProperty()\ (in\ module\ bpy.props)',\ u'bpy.props.IntVectorProperty',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="IntVectorProperty" ids="bpy.props.IntVectorProperty" module="bpy.props" names="bpy.props.IntVectorProperty"><desc_addname xml:space="preserve">bpy.props.</desc_addname><desc_name xml:space="preserve">IntVectorProperty</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name=""</desc_parameter><desc_parameter xml:space="preserve">description=""</desc_parameter><desc_parameter xml:space="preserve">default=(0</desc_parameter><desc_parameter xml:space="preserve">0</desc_parameter><desc_parameter xml:space="preserve">0)</desc_parameter><desc_parameter xml:space="preserve">min=-2**31</desc_parameter><desc_parameter xml:space="preserve">max=2**31-1</desc_parameter><desc_parameter xml:space="preserve">soft_min=-2**31</desc_parameter><desc_parameter xml:space="preserve">soft_max=2**31-1</desc_parameter><desc_parameter xml:space="preserve">step=1</desc_parameter><desc_parameter xml:space="preserve">options={'ANIMATABLE'}</desc_parameter><desc_parameter xml:space="preserve">tags={}</desc_parameter><desc_parameter xml:space="preserve">subtype='NONE'</desc_parameter><desc_parameter xml:space="preserve">size=3</desc_parameter><desc_parameter xml:space="preserve">update=None</desc_parameter><desc_parameter xml:space="preserve">get=None</desc_parameter><desc_parameter xml:space="preserve">set=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns a new vector int property definition.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Name used in the user interface.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">description</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Text used for the tooltip and api documentation.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">default</literal_strong> (<literal_emphasis>sequence</literal_emphasis>) – sequence of ints the length of <emphasis>size</emphasis>.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">min</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Hard minimum, trying to assign a value below will silently assign this minimum instead.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">max</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Hard maximum, trying to assign a value above will silently assign this maximum instead.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">soft_min</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Soft minimum (&gt;= <emphasis>min</emphasis>), user won’t be able to drag the widget below this value in the UI.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">soft_max</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Soft maximum (&lt;= <emphasis>max</emphasis>), user won’t be able to drag the widget above this value in the UI.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">step</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Step of increment/decrement in UI, in [1, 100], defaults to 1 (WARNING: unused currently!).</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">options</literal_strong> (<literal_emphasis>set</literal_emphasis>) – Enumerator in [‘HIDDEN’, ‘SKIP_SAVE’, ‘ANIMATABLE’, ‘LIBRARY_EDITABLE’, ‘PROPORTIONAL’,’TEXTEDIT_UPDATE’].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">tags</literal_strong> (<literal_emphasis>set</literal_emphasis>) – Enumerator of tags that are defined by parent class.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">subtype</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Enumerator in [‘COLOR’, ‘TRANSLATION’, ‘DIRECTION’, ‘VELOCITY’, ‘ACCELERATION’, ‘MATRIX’, ‘EULER’, ‘QUATERNION’, ‘AXISANGLE’, ‘XYZ’, ‘COLOR_GAMMA’, ‘LAYER’, ‘LAYER_MEMBER’, ‘NONE’].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">size</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Vector dimensions in [1, 32].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">update</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is modified,
                                            This function must take 2 values (self, context) and return None.
                                            <emphasis>Warning</emphasis> there are no safety checks to avoid infinite recursion.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">get</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is ‘read’,
                                            This function must take 1 value (self) and return the value of the property.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">set</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is ‘written’,
                                            This function must take 2 values (self, value) and return None.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'PointerProperty()\ (in\ module\ bpy.props)',\ u'bpy.props.PointerProperty',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="PointerProperty" ids="bpy.props.PointerProperty" module="bpy.props" names="bpy.props.PointerProperty"><desc_addname xml:space="preserve">bpy.props.</desc_addname><desc_name xml:space="preserve">PointerProperty</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">type=None</desc_parameter><desc_parameter xml:space="preserve">name=""</desc_parameter><desc_parameter xml:space="preserve">description=""</desc_parameter><desc_parameter xml:space="preserve">options={'ANIMATABLE'}</desc_parameter><desc_parameter xml:space="preserve">tags={}</desc_parameter><desc_parameter xml:space="preserve">poll=None</desc_parameter><desc_parameter xml:space="preserve">update=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns a new pointer property definition.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">type</literal_strong> (<literal_emphasis>class</literal_emphasis>) – A subclass of <reference internal="True" reftitle="bpy.types.PropertyGroup" refuri="bpy.types.PropertyGroup#bpy.types.PropertyGroup"><literal classes="xref py py-class">bpy.types.PropertyGroup</literal></reference> or <reference internal="True" reftitle="bpy.types.ID" refuri="bpy.types.ID#bpy.types.ID"><literal classes="xref py py-class">bpy.types.ID</literal></reference>.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Name used in the user interface.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">description</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Text used for the tooltip and api documentation.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">options</literal_strong> (<literal_emphasis>set</literal_emphasis>) – Enumerator in [‘HIDDEN’, ‘SKIP_SAVE’, ‘ANIMATABLE’, ‘LIBRARY_EDITABLE’, ‘PROPORTIONAL’,’TEXTEDIT_UPDATE’].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">tags</literal_strong> (<literal_emphasis>set</literal_emphasis>) – Enumerator of tags that are defined by parent class.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">poll</literal_strong> (<literal_emphasis>function</literal_emphasis>) – function to be called to determine whether an item is valid for this property.
                                            The function must take 2 values (self, object) and return Bool.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">update</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is modified,
                                            This function must take 2 values (self, context) and return None.
                                            <emphasis>Warning</emphasis> there are no safety checks to avoid infinite recursion.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'RemoveProperty()\ (in\ module\ bpy.props)',\ u'bpy.props.RemoveProperty',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="RemoveProperty" ids="bpy.props.RemoveProperty" module="bpy.props" names="bpy.props.RemoveProperty"><desc_addname xml:space="preserve">bpy.props.</desc_addname><desc_name xml:space="preserve">RemoveProperty</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">cls</desc_parameter><desc_parameter xml:space="preserve">attr</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Removes a dynamically defined property.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">cls</literal_strong> (<literal_emphasis>type</literal_emphasis>) – The class containing the property (must be a positional argument).</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">attr</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Property name (must be passed as a keyword).</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <note>
                <paragraph>Typically this function doesn’t need to be accessed directly.
                    Instead use <literal>del cls.attr</literal></paragraph>
            </note>
            <index entries="['single',\ u'StringProperty()\ (in\ module\ bpy.props)',\ u'bpy.props.StringProperty',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="StringProperty" ids="bpy.props.StringProperty" module="bpy.props" names="bpy.props.StringProperty"><desc_addname xml:space="preserve">bpy.props.</desc_addname><desc_name xml:space="preserve">StringProperty</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name=""</desc_parameter><desc_parameter xml:space="preserve">description=""</desc_parameter><desc_parameter xml:space="preserve">default=""</desc_parameter><desc_parameter xml:space="preserve">maxlen=0</desc_parameter><desc_parameter xml:space="preserve">options={'ANIMATABLE'}</desc_parameter><desc_parameter xml:space="preserve">tags={}</desc_parameter><desc_parameter xml:space="preserve">subtype='NONE'</desc_parameter><desc_parameter xml:space="preserve">update=None</desc_parameter><desc_parameter xml:space="preserve">get=None</desc_parameter><desc_parameter xml:space="preserve">set=None</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Returns a new string property definition.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Name used in the user interface.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">description</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Text used for the tooltip and api documentation.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">default</literal_strong> (<literal_emphasis>string</literal_emphasis>) – initializer string.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">maxlen</literal_strong> (<literal_emphasis>int</literal_emphasis>) – maximum length of the string.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">options</literal_strong> (<literal_emphasis>set</literal_emphasis>) – Enumerator in [‘HIDDEN’, ‘SKIP_SAVE’, ‘ANIMATABLE’, ‘LIBRARY_EDITABLE’, ‘PROPORTIONAL’,’TEXTEDIT_UPDATE’].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">tags</literal_strong> (<literal_emphasis>set</literal_emphasis>) – Enumerator of tags that are defined by parent class.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">subtype</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Enumerator in [‘FILE_PATH’, ‘DIR_PATH’, ‘FILE_NAME’, ‘BYTE_STRING’, ‘PASSWORD’, ‘NONE’].</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">update</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is modified,
                                            This function must take 2 values (self, context) and return None.
                                            <emphasis>Warning</emphasis> there are no safety checks to avoid infinite recursion.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">get</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is ‘read’,
                                            This function must take 1 value (self) and return the value of the property.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">set</literal_strong> (<literal_emphasis>function</literal_emphasis>) – Function to be called when this value is ‘written’,
                                            This function must take 2 values (self, value) and return None.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
        </section>
    </section>
</document>
