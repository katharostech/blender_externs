<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/bpy.types.UIList.rst">
    <section ids="module-bpy.types uilist-bpy-struct" names="uilist(bpy_struct)">
        <title>UIList(bpy_struct)</title>
        <index entries="['single',\ u'bpy.types\ (module)',\ u'module-bpy.types',\ '',\ None]"></index>
        <section ids="basic-uilist-example" names="basic\ uilist\ example">
            <title>Basic UIList Example</title>
            <paragraph>This script is the UIList subclass used to show material slots, with a bunch of additional commentaries.</paragraph>
            <paragraph>Notice the name of the class, this naming convention is similar as the one for panels or menus.</paragraph>
            <note>
                <paragraph>UIList subclasses must be registered for blender to use them.</paragraph>
            </note>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.types.UIList.1.py" xml:space="preserve">import bpy


class MATERIAL_UL_matslots_example(bpy.types.UIList):
    # The draw_item function is called for each item of the collection that is visible in the list.
    #   data is the RNA object containing the collection,
    #   item is the current drawn item of the collection,
    #   icon is the "computed" icon for the item (as an integer, because some objects like materials or textures
    #   have custom icons ID, which are not available as enum items).
    #   active_data is the RNA object containing the active property for the collection (i.e. integer pointing to the
    #   active item of the collection).
    #   active_propname is the name of the active property (use 'getattr(active_data, active_propname)').
    #   index is index of the current item in the collection.
    #   flt_flag is the result of the filtering process for this item.
    #   Note: as index and flt_flag are optional arguments, you do not have to use/declare them here if you don't
    #         need them.
    def draw_item(self, context, layout, data, item, icon, active_data, active_propname):
        ob = data
        slot = item
        ma = slot.material
        # draw_item must handle the three layout types... Usually 'DEFAULT' and 'COMPACT' can share the same code.
        if self.layout_type in {'DEFAULT', 'COMPACT'}:
            # You should always start your row layout by a label (icon + text), or a non-embossed text field,
            # this will also make the row easily selectable in the list! The later also enables ctrl-click rename.
            # We use icon_value of label, as our given icon is an integer value, not an enum ID.
            # Note "data" names should never be translated!
            if ma:
                layout.prop(ma, "name", text="", emboss=False, icon_value=icon)
            else:
                layout.label(text="", translate=False, icon_value=icon)
            # And now we can add other UI stuff...
            # Here, we add nodes info if this material uses (old!) shading nodes.
            if ma and not context.scene.render.use_shading_nodes:
                manode = ma.active_node_material
                if manode:
                    # The static method UILayout.icon returns the integer value of the icon ID "computed" for the given
                    # RNA object.
                    layout.label(text="Node %s" % manode.name, translate=False, icon_value=layout.icon(manode))
                elif ma.use_nodes:
                    layout.label(text="Node &lt;none&gt;", translate=False)
                else:
                    layout.label(text="")
        # 'GRID' layout type should be as compact as possible (typically a single icon!).
        elif self.layout_type in {'GRID'}:
            layout.alignment = 'CENTER'
            layout.label(text="", icon_value=icon)


# And now we can use this list everywhere in Blender. Here is a small example panel.
class UIListPanelExample(bpy.types.Panel):
    """Creates a Panel in the Object properties window"""
    bl_label = "UIList Panel"
    bl_idname = "OBJECT_PT_ui_list_example"
    bl_space_type = 'PROPERTIES'
    bl_region_type = 'WINDOW'
    bl_context = "object"

    def draw(self, context):
        layout = self.layout

        obj = context.object

        # template_list now takes two new args.
        # The first one is the identifier of the registered UIList to use (if you want only the default list,
        # with no custom draw code, use "UI_UL_list").
        layout.template_list("MATERIAL_UL_matslots_example", "", obj, "material_slots", obj, "active_material_index")

        # The second one can usually be left as an empty string.
        # It's an additional ID used to distinguish lists in case you use the same list several times in a given area.
        layout.template_list("MATERIAL_UL_matslots_example", "compact", obj, "material_slots",
                             obj, "active_material_index", type='COMPACT')


def register():
    bpy.utils.register_class(MATERIAL_UL_matslots_example)
    bpy.utils.register_class(UIListPanelExample)


def unregister():
    bpy.utils.unregister_class(MATERIAL_UL_matslots_example)
    bpy.utils.unregister_class(UIListPanelExample)


if __name__ == "__main__":
    register()
</literal_block>
        </section>
        <section ids="advanced-uilist-example-filtering-and-reordering" names="advanced\ uilist\ example\ -\ filtering\ and\ reordering">
            <title>Advanced UIList Example - Filtering and Reordering</title>
            <paragraph>This script is an extended version of the <literal>UIList</literal> subclass used to show vertex groups. It is not used ‘as is’,
                because iterating over all vertices in a ‘draw’ function is a very bad idea for UI performances! However, it’s a good
                example of how to create/use filtering/reordering callbacks.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.types.UIList.2.py" xml:space="preserve">import bpy


class MESH_UL_vgroups_slow(bpy.types.UIList):
    # Constants (flags)
    # Be careful not to shadow FILTER_ITEM!
    VGROUP_EMPTY = 1 &lt;&lt; 0

    # Custom properties, saved with .blend file.
    use_filter_empty = bpy.props.BoolProperty(name="Filter Empty", default=False, options=set(),
                                              description="Whether to filter empty vertex groups")
    use_filter_empty_reverse = bpy.props.BoolProperty(name="Reverse Empty", default=False, options=set(),
                                                      description="Reverse empty filtering")
    use_filter_name_reverse = bpy.props.BoolProperty(name="Reverse Name", default=False, options=set(),
                                                     description="Reverse name filtering")

    # This allows us to have mutually exclusive options, which are also all disable-able!
    def _gen_order_update(name1, name2):
        def _u(self, ctxt):
            if (getattr(self, name1)):
                setattr(self, name2, False)
        return _u
    use_order_name = bpy.props.BoolProperty(name="Name", default=False, options=set(),
                                            description="Sort groups by their name (case-insensitive)",
                                            update=_gen_order_update("use_order_name", "use_order_importance"))
    use_order_importance = bpy.props.BoolProperty(name="Importance", default=False, options=set(),
                                                  description="Sort groups by their average weight in the mesh",
                                                  update=_gen_order_update("use_order_importance", "use_order_name"))

    # Usual draw item function.
    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index, flt_flag):
        # Just in case, we do not use it here!
        self.use_filter_invert = False

        # assert(isinstance(item, bpy.types.VertexGroup)
        vgroup = item
        if self.layout_type in {'DEFAULT', 'COMPACT'}:
            # Here we use one feature of new filtering feature: it can pass data to draw_item, through flt_flag
            # parameter, which contains exactly what filter_items set in its filter list for this item!
            # In this case, we show empty groups grayed out.
            if flt_flag &amp; self.VGROUP_EMPTY:
                col = layout.column()
                col.enabled = False
                col.alignment = 'LEFT'
                col.prop(vgroup, "name", text="", emboss=False, icon_value=icon)
            else:
                layout.prop(vgroup, "name", text="", emboss=False, icon_value=icon)
            icon = 'LOCKED' if vgroup.lock_weight else 'UNLOCKED'
            layout.prop(vgroup, "lock_weight", text="", icon=icon, emboss=False)
        elif self.layout_type in {'GRID'}:
            layout.alignment = 'CENTER'
            if flt_flag &amp; self.VGROUP_EMPTY:
                layout.enabled = False
            layout.label(text="", icon_value=icon)

    def draw_filter(self, context, layout):
        # Nothing much to say here, it's usual UI code...
        row = layout.row()

        subrow = row.row(align=True)
        subrow.prop(self, "filter_name", text="")
        icon = 'ZOOM_OUT' if self.use_filter_name_reverse else 'ZOOM_IN'
        subrow.prop(self, "use_filter_name_reverse", text="", icon=icon)

        subrow = row.row(align=True)
        subrow.prop(self, "use_filter_empty", toggle=True)
        icon = 'ZOOM_OUT' if self.use_filter_empty_reverse else 'ZOOM_IN'
        subrow.prop(self, "use_filter_empty_reverse", text="", icon=icon)

        row = layout.row(align=True)
        row.label(text="Order by:")
        row.prop(self, "use_order_name", toggle=True)
        row.prop(self, "use_order_importance", toggle=True)
        icon = 'TRIA_UP' if self.use_filter_orderby_invert else 'TRIA_DOWN'
        row.prop(self, "use_filter_orderby_invert", text="", icon=icon)

    def filter_items_empty_vgroups(self, context, vgroups):
        # This helper function checks vgroups to find out whether they are empty, and what's their average weights.
        # TODO: This should be RNA helper actually (a vgroup prop like "raw_data: ((vidx, vweight), etc.)").
        #       Too slow for python!
        obj_data = context.active_object.data
        ret = {vg.index: [True, 0.0] for vg in vgroups}
        if hasattr(obj_data, "vertices"):  # Mesh data
            if obj_data.is_editmode:
                import bmesh
                bm = bmesh.from_edit_mesh(obj_data)
                # only ever one deform weight layer
                dvert_lay = bm.verts.layers.deform.active
                fact = 1 / len(bm.verts)
                if dvert_lay:
                    for v in bm.verts:
                        for vg_idx, vg_weight in v[dvert_lay].items():
                            ret[vg_idx][0] = False
                            ret[vg_idx][1] += vg_weight * fact
            else:
                fact = 1 / len(obj_data.vertices)
                for v in obj_data.vertices:
                    for vg in v.groups:
                        ret[vg.group][0] = False
                        ret[vg.group][1] += vg.weight * fact
        elif hasattr(obj_data, "points"):  # Lattice data
            # XXX no access to lattice editdata?
            fact = 1 / len(obj_data.points)
            for v in obj_data.points:
                for vg in v.groups:
                    ret[vg.group][0] = False
                    ret[vg.group][1] += vg.weight * fact
        return ret

    def filter_items(self, context, data, propname):
        # This function gets the collection property (as the usual tuple (data, propname)), and must return two lists:
        # * The first one is for filtering, it must contain 32bit integers were self.bitflag_filter_item marks the
        #   matching item as filtered (i.e. to be shown), and 31 other bits are free for custom needs. Here we use the
        #   first one to mark VGROUP_EMPTY.
        # * The second one is for reordering, it must return a list containing the new indices of the items (which
        #   gives us a mapping org_idx -&gt; new_idx).
        # Please note that the default UI_UL_list defines helper functions for common tasks (see its doc for more info).
        # If you do not make filtering and/or ordering, return empty list(s) (this will be more efficient than
        # returning full lists doing nothing!).
        vgroups = getattr(data, propname)
        helper_funcs = bpy.types.UI_UL_list

        # Default return values.
        flt_flags = []
        flt_neworder = []

        # Pre-compute of vgroups data, CPU-intensive. :/
        vgroups_empty = self.filter_items_empty_vgroups(context, vgroups)

        # Filtering by name
        if self.filter_name:
            flt_flags = helper_funcs.filter_items_by_name(self.filter_name, self.bitflag_filter_item, vgroups, "name",
                                                          reverse=self.use_filter_name_reverse)
        if not flt_flags:
            flt_flags = [self.bitflag_filter_item] * len(vgroups)

        # Filter by emptiness.
        for idx, vg in enumerate(vgroups):
            if vgroups_empty[vg.index][0]:
                flt_flags[idx] |= self.VGROUP_EMPTY
                if self.use_filter_empty and self.use_filter_empty_reverse:
                    flt_flags[idx] &amp;= ~self.bitflag_filter_item
            elif self.use_filter_empty and not self.use_filter_empty_reverse:
                flt_flags[idx] &amp;= ~self.bitflag_filter_item

        # Reorder by name or average weight.
        if self.use_order_name:
            flt_neworder = helper_funcs.sort_items_by_name(vgroups, "name")
        elif self.use_order_importance:
            _sort = [(idx, vgroups_empty[vg.index][1]) for idx, vg in enumerate(vgroups)]
            flt_neworder = helper_funcs.sort_items_helper(_sort, lambda e: e[1], True)

        return flt_flags, flt_neworder
</literal_block>
            <paragraph>base class — <reference internal="True" reftitle="bpy.types.bpy_struct" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct"><literal classes="xref py py-class">bpy_struct</literal></reference></paragraph>
            <paragraph>subclasses —
                <reference internal="True" reftitle="bpy.types.CLIP_UL_tracking_objects" refuri="bpy.types.CLIP_UL_tracking_objects#bpy.types.CLIP_UL_tracking_objects"><literal classes="xref py py-class">CLIP_UL_tracking_objects</literal></reference>, <reference internal="True" reftitle="bpy.types.FILEBROWSER_UL_dir" refuri="bpy.types.FILEBROWSER_UL_dir#bpy.types.FILEBROWSER_UL_dir"><literal classes="xref py py-class">FILEBROWSER_UL_dir</literal></reference>, <reference internal="True" reftitle="bpy.types.GPENCIL_UL_annotation_layer" refuri="bpy.types.GPENCIL_UL_annotation_layer#bpy.types.GPENCIL_UL_annotation_layer"><literal classes="xref py py-class">GPENCIL_UL_annotation_layer</literal></reference>, <reference internal="True" reftitle="bpy.types.GPENCIL_UL_layer" refuri="bpy.types.GPENCIL_UL_layer#bpy.types.GPENCIL_UL_layer"><literal classes="xref py py-class">GPENCIL_UL_layer</literal></reference>, <reference internal="True" reftitle="bpy.types.GPENCIL_UL_matslots" refuri="bpy.types.GPENCIL_UL_matslots#bpy.types.GPENCIL_UL_matslots"><literal classes="xref py py-class">GPENCIL_UL_matslots</literal></reference>, <reference internal="True" reftitle="bpy.types.GPENCIL_UL_vgroups" refuri="bpy.types.GPENCIL_UL_vgroups#bpy.types.GPENCIL_UL_vgroups"><literal classes="xref py py-class">GPENCIL_UL_vgroups</literal></reference>, <reference internal="True" reftitle="bpy.types.IMAGE_UL_render_slots" refuri="bpy.types.IMAGE_UL_render_slots#bpy.types.IMAGE_UL_render_slots"><literal classes="xref py py-class">IMAGE_UL_render_slots</literal></reference>, <reference internal="True" reftitle="bpy.types.MASK_UL_layers" refuri="bpy.types.MASK_UL_layers#bpy.types.MASK_UL_layers"><literal classes="xref py py-class">MASK_UL_layers</literal></reference>, <reference internal="True" reftitle="bpy.types.MATERIAL_UL_matslots" refuri="bpy.types.MATERIAL_UL_matslots#bpy.types.MATERIAL_UL_matslots"><literal classes="xref py py-class">MATERIAL_UL_matslots</literal></reference>, <reference internal="True" reftitle="bpy.types.MESH_UL_fmaps" refuri="bpy.types.MESH_UL_fmaps#bpy.types.MESH_UL_fmaps"><literal classes="xref py py-class">MESH_UL_fmaps</literal></reference>, <reference internal="True" reftitle="bpy.types.MESH_UL_shape_keys" refuri="bpy.types.MESH_UL_shape_keys#bpy.types.MESH_UL_shape_keys"><literal classes="xref py py-class">MESH_UL_shape_keys</literal></reference>, <reference internal="True" reftitle="bpy.types.MESH_UL_uvmaps" refuri="bpy.types.MESH_UL_uvmaps#bpy.types.MESH_UL_uvmaps"><literal classes="xref py py-class">MESH_UL_uvmaps</literal></reference>, <reference internal="True" reftitle="bpy.types.MESH_UL_vcols" refuri="bpy.types.MESH_UL_vcols#bpy.types.MESH_UL_vcols"><literal classes="xref py py-class">MESH_UL_vcols</literal></reference>, <reference internal="True" reftitle="bpy.types.MESH_UL_vgroups" refuri="bpy.types.MESH_UL_vgroups#bpy.types.MESH_UL_vgroups"><literal classes="xref py py-class">MESH_UL_vgroups</literal></reference>, <reference internal="True" reftitle="bpy.types.NODE_UL_interface_sockets" refuri="bpy.types.NODE_UL_interface_sockets#bpy.types.NODE_UL_interface_sockets"><literal classes="xref py py-class">NODE_UL_interface_sockets</literal></reference>, <reference internal="True" reftitle="bpy.types.PARTICLE_UL_particle_systems" refuri="bpy.types.PARTICLE_UL_particle_systems#bpy.types.PARTICLE_UL_particle_systems"><literal classes="xref py py-class">PARTICLE_UL_particle_systems</literal></reference>, <reference internal="True" reftitle="bpy.types.PHYSICS_UL_dynapaint_surfaces" refuri="bpy.types.PHYSICS_UL_dynapaint_surfaces#bpy.types.PHYSICS_UL_dynapaint_surfaces"><literal classes="xref py py-class">PHYSICS_UL_dynapaint_surfaces</literal></reference>, <reference internal="True" reftitle="bpy.types.RENDER_UL_renderviews" refuri="bpy.types.RENDER_UL_renderviews#bpy.types.RENDER_UL_renderviews"><literal classes="xref py py-class">RENDER_UL_renderviews</literal></reference>, <reference internal="True" reftitle="bpy.types.SCENE_UL_keying_set_paths" refuri="bpy.types.SCENE_UL_keying_set_paths#bpy.types.SCENE_UL_keying_set_paths"><literal classes="xref py py-class">SCENE_UL_keying_set_paths</literal></reference>, <reference internal="True" reftitle="bpy.types.TEXTURE_UL_texpaintslots" refuri="bpy.types.TEXTURE_UL_texpaintslots#bpy.types.TEXTURE_UL_texpaintslots"><literal classes="xref py py-class">TEXTURE_UL_texpaintslots</literal></reference>, <reference internal="True" reftitle="bpy.types.TEXTURE_UL_texslots" refuri="bpy.types.TEXTURE_UL_texslots#bpy.types.TEXTURE_UL_texslots"><literal classes="xref py py-class">TEXTURE_UL_texslots</literal></reference>, <reference internal="True" reftitle="bpy.types.UI_UL_list" refuri="bpy.types.UI_UL_list#bpy.types.UI_UL_list"><literal classes="xref py py-class">UI_UL_list</literal></reference>, <reference internal="True" reftitle="bpy.types.VIEWLAYER_UL_linesets" refuri="bpy.types.VIEWLAYER_UL_linesets#bpy.types.VIEWLAYER_UL_linesets"><literal classes="xref py py-class">VIEWLAYER_UL_linesets</literal></reference></paragraph>
            <index entries="['single',\ u'UIList\ (class\ in\ bpy.types)',\ u'bpy.types.UIList',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="UIList" ids="bpy.types.UIList" module="bpy.types" names="bpy.types.UIList"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bpy.types.</desc_addname><desc_name xml:space="preserve">UIList</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bpy_struct</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>UI list containing the elements of a collection</paragraph>
                    <index entries="['single',\ u'UIList.bitflag_filter_item\ (in\ module\ bpy.types)',\ u'bpy.types.UIList.bitflag_filter_item',\ '',\ None]"></index>
                    <desc desctype="data" domain="py" noindex="False" objtype="data">
                        <desc_signature class="UIList" first="False" fullname="UIList.bitflag_filter_item" ids="bpy.types.UIList.bitflag_filter_item" module="bpy.types" names="bpy.types.UIList.bitflag_filter_item"><desc_name xml:space="preserve">bitflag_filter_item</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The value of the reserved bitflag ‘FILTER_ITEM’ (in filter_flags values)</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>int in [0, inf], default 0, (readonly)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_idname\ (bpy.types.UIList\ attribute)',\ u'bpy.types.UIList.bl_idname',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="UIList" first="False" fullname="UIList.bl_idname" ids="bpy.types.UIList.bl_idname" module="bpy.types" names="bpy.types.UIList.bl_idname"><desc_name xml:space="preserve">bl_idname</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>If this is set, the uilist gets a custom ID, otherwise it takes the name of the class used to define the uilist (for example, if the class name is “OBJECT_UL_vgroups”, and bl_idname is not set by the script, then bl_idname = “OBJECT_UL_vgroups”)</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “”, (never None)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'filter_name\ (bpy.types.UIList\ attribute)',\ u'bpy.types.UIList.filter_name',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="UIList" first="False" fullname="UIList.filter_name" ids="bpy.types.UIList.filter_name" module="bpy.types" names="bpy.types.UIList.filter_name"><desc_name xml:space="preserve">filter_name</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Only show items matching this name (use ‘*’ as wildcard)</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “”, (never None)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'UIList.layout_type\ (in\ module\ bpy.types)',\ u'bpy.types.UIList.layout_type',\ '',\ None]"></index>
                    <desc desctype="data" domain="py" noindex="False" objtype="data">
                        <desc_signature class="UIList" first="False" fullname="UIList.layout_type" ids="bpy.types.UIList.layout_type" module="bpy.types" names="bpy.types.UIList.layout_type"><desc_name xml:space="preserve">layout_type</desc_name></desc_signature>
                        <desc_content>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph><literal>DEFAULT</literal> Default Layout, Use the default, multi-rows layout.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>COMPACT</literal> Compact Layout, Use the compact, single-row layout.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>GRID</literal> Grid Layout, Use the grid-based layout.</paragraph>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>enum in [‘DEFAULT’, ‘COMPACT’, ‘GRID’], default ‘DEFAULT’, (readonly)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'use_filter_invert\ (bpy.types.UIList\ attribute)',\ u'bpy.types.UIList.use_filter_invert',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="UIList" first="False" fullname="UIList.use_filter_invert" ids="bpy.types.UIList.use_filter_invert" module="bpy.types" names="bpy.types.UIList.use_filter_invert"><desc_name xml:space="preserve">use_filter_invert</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Invert filtering (show hidden items, and vice-versa)</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean, default False</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'use_filter_show\ (bpy.types.UIList\ attribute)',\ u'bpy.types.UIList.use_filter_show',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="UIList" first="False" fullname="UIList.use_filter_show" ids="bpy.types.UIList.use_filter_show" module="bpy.types" names="bpy.types.UIList.use_filter_show"><desc_name xml:space="preserve">use_filter_show</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Show filtering options</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean, default False</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'use_filter_sort_alpha\ (bpy.types.UIList\ attribute)',\ u'bpy.types.UIList.use_filter_sort_alpha',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="UIList" first="False" fullname="UIList.use_filter_sort_alpha" ids="bpy.types.UIList.use_filter_sort_alpha" module="bpy.types" names="bpy.types.UIList.use_filter_sort_alpha"><desc_name xml:space="preserve">use_filter_sort_alpha</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Sort items by their name</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean, default False</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'use_filter_sort_reverse\ (bpy.types.UIList\ attribute)',\ u'bpy.types.UIList.use_filter_sort_reverse',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="UIList" first="False" fullname="UIList.use_filter_sort_reverse" ids="bpy.types.UIList.use_filter_sort_reverse" module="bpy.types" names="bpy.types.UIList.use_filter_sort_reverse"><desc_name xml:space="preserve">use_filter_sort_reverse</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Invert the order of shown items</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean, default False</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'draw_item()\ (bpy.types.UIList\ method)',\ u'bpy.types.UIList.draw_item',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="UIList" first="False" fullname="UIList.draw_item" ids="bpy.types.UIList.draw_item" module="bpy.types" names="bpy.types.UIList.draw_item"><desc_name xml:space="preserve">draw_item</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">layout</desc_parameter><desc_parameter xml:space="preserve">data</desc_parameter><desc_parameter xml:space="preserve">item</desc_parameter><desc_parameter xml:space="preserve">icon</desc_parameter><desc_parameter xml:space="preserve">active_data</desc_parameter><desc_parameter xml:space="preserve">active_property</desc_parameter><desc_parameter xml:space="preserve">index=0</desc_parameter><desc_parameter xml:space="preserve">flt_flag=0</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Draw an item in the list (NOTE: when you define your own draw_item function, you may want to check given ‘item’ is of the right type…)</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">layout</literal_strong> (<reference internal="True" reftitle="bpy.types.UILayout" refuri="bpy.types.UILayout#bpy.types.UILayout"><literal classes="xref py py-class">UILayout</literal></reference>, (never None)) – Layout to draw the item</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">data</literal_strong> (<reference internal="True" reftitle="bpy.types.AnyType" refuri="bpy.types.AnyType#bpy.types.AnyType"><literal classes="xref py py-class">AnyType</literal></reference>) – Data from which to take Collection property</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">item</literal_strong> (<reference internal="True" reftitle="bpy.types.AnyType" refuri="bpy.types.AnyType#bpy.types.AnyType"><literal classes="xref py py-class">AnyType</literal></reference>) – Item of the collection property</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">icon</literal_strong> (<literal_emphasis>int in</literal_emphasis><literal_emphasis> [</literal_emphasis><literal_emphasis>0</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>inf</literal_emphasis><literal_emphasis>]</literal_emphasis>) – Icon of the item in the collection</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">active_data</literal_strong> (<reference internal="True" reftitle="bpy.types.AnyType" refuri="bpy.types.AnyType#bpy.types.AnyType"><literal classes="xref py py-class">AnyType</literal></reference>, (never None)) – Data from which to take property for the active element</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">active_property</literal_strong> (<literal_emphasis>string</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>(</literal_emphasis><literal_emphasis>optional argument</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>never None</literal_emphasis><literal_emphasis>)</literal_emphasis>) – Identifier of property in active_data, for the active element</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">index</literal_strong> (<literal_emphasis>int in</literal_emphasis><literal_emphasis> [</literal_emphasis><literal_emphasis>0</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>inf</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>(</literal_emphasis><literal_emphasis>optional</literal_emphasis><literal_emphasis>)</literal_emphasis>) – Index of the item in the collection</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">flt_flag</literal_strong> (<literal_emphasis>int in</literal_emphasis><literal_emphasis> [</literal_emphasis><literal_emphasis>0</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>inf</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>(</literal_emphasis><literal_emphasis>optional</literal_emphasis><literal_emphasis>)</literal_emphasis>) – The filter-flag result for this item</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'draw_filter()\ (bpy.types.UIList\ method)',\ u'bpy.types.UIList.draw_filter',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="UIList" first="False" fullname="UIList.draw_filter" ids="bpy.types.UIList.draw_filter" module="bpy.types" names="bpy.types.UIList.draw_filter"><desc_name xml:space="preserve">draw_filter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">layout</desc_parameter><desc_parameter xml:space="preserve">reverse=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Draw filtering options</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">layout</literal_strong> (<reference internal="True" reftitle="bpy.types.UILayout" refuri="bpy.types.UILayout#bpy.types.UILayout"><literal classes="xref py py-class">UILayout</literal></reference>, (never None)) – Layout to draw the item</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">reverse</literal_strong> (<literal_emphasis>boolean</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>(</literal_emphasis><literal_emphasis>optional</literal_emphasis><literal_emphasis>)</literal_emphasis>) – Display items in reverse order</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'filter_items()\ (bpy.types.UIList\ method)',\ u'bpy.types.UIList.filter_items',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="UIList" first="False" fullname="UIList.filter_items" ids="bpy.types.UIList.filter_items" module="bpy.types" names="bpy.types.UIList.filter_items"><desc_name xml:space="preserve">filter_items</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">data</desc_parameter><desc_parameter xml:space="preserve">property</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Filter and/or re-order items of the collection (output filter results in filter_flags, and reorder results in filter_neworder arrays)</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">data</literal_strong> (<reference internal="True" reftitle="bpy.types.AnyType" refuri="bpy.types.AnyType#bpy.types.AnyType"><literal classes="xref py py-class">AnyType</literal></reference>) – Data from which to take Collection property</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">property</literal_strong> (<literal_emphasis>string</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>(</literal_emphasis><literal_emphasis>never None</literal_emphasis><literal_emphasis>)</literal_emphasis>) – Identifier of property in data, for the collection</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return (filter_flags, filter_neworder)</field_name>
                                    <field_body>
                                        <paragraph><title_reference>filter_flags</title_reference>, An array of filter flags, one for each item in the collection (NOTE: FILTER_ITEM bit is reserved, it defines whether the item is shown or not), int array of 1 items in [0, inf]</paragraph>
                                        <paragraph><title_reference>filter_neworder</title_reference>, An array of indices, one for each item in the collection, mapping the org index to the new one, int array of 1 items in [0, inf]</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_rna_get_subclass()\ (bpy.types.UIList\ class\ method)',\ u'bpy.types.UIList.bl_rna_get_subclass',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="UIList" first="False" fullname="UIList.bl_rna_get_subclass" ids="bpy.types.UIList.bl_rna_get_subclass" module="bpy.types" names="bpy.types.UIList.bl_rna_get_subclass"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">bl_rna_get_subclass</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">default=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">id</literal_strong> (<literal_emphasis>string</literal_emphasis>) – The RNA type identifier.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The RNA type or default when not found.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="bpy.types.Struct" refuri="bpy.types.Struct#bpy.types.Struct"><literal classes="xref py py-class">bpy.types.Struct</literal></reference> subclass</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_rna_get_subclass_py()\ (bpy.types.UIList\ class\ method)',\ u'bpy.types.UIList.bl_rna_get_subclass_py',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="UIList" first="False" fullname="UIList.bl_rna_get_subclass_py" ids="bpy.types.UIList.bl_rna_get_subclass_py" module="bpy.types" names="bpy.types.UIList.bl_rna_get_subclass_py"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">bl_rna_get_subclass_py</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">default=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">id</literal_strong> (<literal_emphasis>string</literal_emphasis>) – The RNA type identifier.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The class or default when not found.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>type</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <rubric>Inherited Properties</rubric>
            <hlist>
                <hlistcol>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.id_data" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.id_data"><literal classes="xref py py-class">bpy_struct.id_data</literal></reference></paragraph>
                        </list_item>
                    </bullet_list>
                </hlistcol>
                <hlistcol>
                    <bullet_list>
                    </bullet_list>
                </hlistcol>
            </hlist>
            <rubric>Inherited Functions</rubric>
            <hlist>
                <hlistcol>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.as_pointer" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.as_pointer"><literal classes="xref py py-class">bpy_struct.as_pointer</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.driver_add" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.driver_add"><literal classes="xref py py-class">bpy_struct.driver_add</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.driver_remove" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.driver_remove"><literal classes="xref py py-class">bpy_struct.driver_remove</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.get" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.get"><literal classes="xref py py-class">bpy_struct.get</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_hidden" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_hidden"><literal classes="xref py py-class">bpy_struct.is_property_hidden</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_overridable_static" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_overridable_static"><literal classes="xref py py-class">bpy_struct.is_property_overridable_static</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_readonly" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_readonly"><literal classes="xref py py-class">bpy_struct.is_property_readonly</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_set" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_set"><literal classes="xref py py-class">bpy_struct.is_property_set</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.items" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.items"><literal classes="xref py py-class">bpy_struct.items</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keyframe_delete" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keyframe_delete"><literal classes="xref py py-class">bpy_struct.keyframe_delete</literal></reference></paragraph>
                        </list_item>
                    </bullet_list>
                </hlistcol>
                <hlistcol>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keyframe_insert" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keyframe_insert"><literal classes="xref py py-class">bpy_struct.keyframe_insert</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keys" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keys"><literal classes="xref py py-class">bpy_struct.keys</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.path_from_id" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.path_from_id"><literal classes="xref py py-class">bpy_struct.path_from_id</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.path_resolve" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.path_resolve"><literal classes="xref py py-class">bpy_struct.path_resolve</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.pop" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.pop"><literal classes="xref py py-class">bpy_struct.pop</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.property_overridable_static_set" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.property_overridable_static_set"><literal classes="xref py py-class">bpy_struct.property_overridable_static_set</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.property_unset" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.property_unset"><literal classes="xref py py-class">bpy_struct.property_unset</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.type_recast" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.type_recast"><literal classes="xref py py-class">bpy_struct.type_recast</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.values" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.values"><literal classes="xref py py-class">bpy_struct.values</literal></reference></paragraph>
                        </list_item>
                    </bullet_list>
                </hlistcol>
            </hlist>
        </section>
    </section>
</document>
