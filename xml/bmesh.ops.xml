<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/bmesh.ops.rst">
    <section ids="module-bmesh.ops bmesh-operators-bmesh-ops" names="bmesh\ operators\ (bmesh.ops)">
        <title>BMesh Operators (bmesh.ops)</title>
        <index entries="['single',\ u'bmesh.ops\ (module)',\ u'module-bmesh.ops',\ '',\ None]"></index>
        <paragraph>This module gives access to low level bmesh operations.</paragraph>
        <paragraph>Most operators take input and return output, they can be chained together
            to perform useful operations.</paragraph>
        <note>
            <paragraph>This API us new in 2.65 and not yet well tested.</paragraph>
        </note>
        <section ids="operator-example" names="operator\ example">
            <title>Operator Example</title>
            <paragraph>This script shows how operators can be used to model a link of a chain.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/__/examples/bmesh.ops.1.py" xml:space="preserve"># This script uses bmesh operators to make 2 links of a chain.

import bpy
import bmesh
import math
import mathutils

# Make a new BMesh
bm = bmesh.new()

# Add a circle XXX, should return all geometry created, not just verts.
bmesh.ops.create_circle(
    bm,
    cap_ends=False,
    radius=0.2,
    segments=8)


# Spin and deal with geometry on side 'a'
edges_start_a = bm.edges[:]
geom_start_a = bm.verts[:] + edges_start_a
ret = bmesh.ops.spin(
    bm,
    geom=geom_start_a,
    angle=math.radians(180.0),
    steps=8,
    axis=(1.0, 0.0, 0.0),
    cent=(0.0, 1.0, 0.0))
edges_end_a = [ele for ele in ret["geom_last"]
               if isinstance(ele, bmesh.types.BMEdge)]
del ret


# Extrude and create geometry on side 'b'
ret = bmesh.ops.extrude_edge_only(
    bm,
    edges=edges_start_a)
geom_extrude_mid = ret["geom"]
del ret


# Collect the edges to spin XXX, 'extrude_edge_only' could return this.
verts_extrude_b = [ele for ele in geom_extrude_mid
                   if isinstance(ele, bmesh.types.BMVert)]
edges_extrude_b = [ele for ele in geom_extrude_mid
                   if isinstance(ele, bmesh.types.BMEdge) and ele.is_boundary]
bmesh.ops.translate(
    bm,
    verts=verts_extrude_b,
    vec=(0.0, 0.0, 1.0))


# Create the circle on side 'b'
ret = bmesh.ops.spin(
    bm,
    geom=verts_extrude_b + edges_extrude_b,
    angle=-math.radians(180.0),
    steps=8,
    axis=(1.0, 0.0, 0.0),
    cent=(0.0, 1.0, 1.0))
edges_end_b = [ele for ele in ret["geom_last"]
               if isinstance(ele, bmesh.types.BMEdge)]
del ret


# Bridge the resulting edge loops of both spins 'a &amp; b'
bmesh.ops.bridge_loops(
    bm,
    edges=edges_end_a + edges_end_b)


# Now we have made a links of the chain, make a copy and rotate it
# (so this looks something like a chain)

ret = bmesh.ops.duplicate(
    bm,
    geom=bm.verts[:] + bm.edges[:] + bm.faces[:])
geom_dupe = ret["geom"]
verts_dupe = [ele for ele in geom_dupe if isinstance(ele, bmesh.types.BMVert)]
del ret

# position the new link
bmesh.ops.translate(
    bm,
    verts=verts_dupe,
    vec=(0.0, 0.0, 2.0))
bmesh.ops.rotate(
    bm,
    verts=verts_dupe,
    cent=(0.0, 1.0, 0.0),
    matrix=mathutils.Matrix.Rotation(math.radians(90.0), 3, 'Z'))

# Done with creating the mesh, simply link it into the scene so we can see it

# Finish up, write the bmesh into a new mesh
me = bpy.data.meshes.new("Mesh")
bm.to_mesh(me)
bm.free()


# Add the mesh to the scene
scene = bpy.context.scene
obj = bpy.data.objects.new("Object", me)
scene.objects.link(obj)

# Select and make active
scene.objects.active = obj
obj.select = True
</literal_block>
            <index entries="['single',\ u'smooth_vert()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.smooth_vert',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="smooth_vert" ids="bmesh.ops.smooth_vert" module="bmesh.ops" names="bmesh.ops.smooth_vert"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">smooth_vert</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">verts</desc_parameter><desc_parameter xml:space="preserve">factor</desc_parameter><desc_parameter xml:space="preserve">mirror_clip_x</desc_parameter><desc_parameter xml:space="preserve">mirror_clip_y</desc_parameter><desc_parameter xml:space="preserve">mirror_clip_z</desc_parameter><desc_parameter xml:space="preserve">clip_dist</desc_parameter><desc_parameter xml:space="preserve">use_axis_x</desc_parameter><desc_parameter xml:space="preserve">use_axis_y</desc_parameter><desc_parameter xml:space="preserve">use_axis_z</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Vertex Smooth.</paragraph>
                    <paragraph>Smooths vertices by using a basic vertex averaging scheme.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">verts</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – input vertices</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">factor</literal_strong> (<literal_emphasis>float</literal_emphasis>) – smoothing factor</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">mirror_clip_x</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – set vertices close to the x axis before the operation to 0</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">mirror_clip_y</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – set vertices close to the y axis before the operation to 0</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">mirror_clip_z</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – set vertices close to the z axis before the operation to 0</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">clip_dist</literal_strong> (<literal_emphasis>float</literal_emphasis>) – clipping threshold for the above three slots</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_axis_x</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – smooth vertices along X axis</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_axis_y</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – smooth vertices along Y axis</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_axis_z</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – smooth vertices along Z axis</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'smooth_laplacian_vert()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.smooth_laplacian_vert',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="smooth_laplacian_vert" ids="bmesh.ops.smooth_laplacian_vert" module="bmesh.ops" names="bmesh.ops.smooth_laplacian_vert"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">smooth_laplacian_vert</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">verts</desc_parameter><desc_parameter xml:space="preserve">lambda_factor</desc_parameter><desc_parameter xml:space="preserve">lambda_border</desc_parameter><desc_parameter xml:space="preserve">use_x</desc_parameter><desc_parameter xml:space="preserve">use_y</desc_parameter><desc_parameter xml:space="preserve">use_z</desc_parameter><desc_parameter xml:space="preserve">preserve_volume</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Vertex Smooth Laplacian.</paragraph>
                    <paragraph>Smooths vertices by using Laplacian smoothing propose by.
                        Desbrun, et al. Implicit Fairing of Irregular Meshes using Diffusion and Curvature Flow.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">verts</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – input vertices</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">lambda_factor</literal_strong> (<literal_emphasis>float</literal_emphasis>) – lambda param</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">lambda_border</literal_strong> (<literal_emphasis>float</literal_emphasis>) – lambda param in border</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_x</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Smooth object along X axis</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_y</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Smooth object along Y axis</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_z</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Smooth object along Z axis</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">preserve_volume</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Apply volume preservation after smooth</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'recalc_face_normals()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.recalc_face_normals',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="recalc_face_normals" ids="bmesh.ops.recalc_face_normals" module="bmesh.ops" names="bmesh.ops.recalc_face_normals"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">recalc_face_normals</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">faces</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Right-Hand Faces.</paragraph>
                    <paragraph>Computes an “outside” normal for the specified input faces.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'planar_faces()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.planar_faces',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="planar_faces" ids="bmesh.ops.planar_faces" module="bmesh.ops" names="bmesh.ops.planar_faces"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">planar_faces</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">faces</desc_parameter><desc_parameter xml:space="preserve">iterations</desc_parameter><desc_parameter xml:space="preserve">factor</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Planar Faces.</paragraph>
                    <paragraph>Iteratively flatten faces.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – input geometry.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">iterations</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Number of times to flatten faces (for when connected faces are used)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">factor</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Influence for making planar each iteration</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>geom</literal>: output slot, computed boundary geometry.</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'region_extend()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.region_extend',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="region_extend" ids="bmesh.ops.region_extend" module="bmesh.ops" names="bmesh.ops.region_extend"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">region_extend</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">geom</desc_parameter><desc_parameter xml:space="preserve">use_contract</desc_parameter><desc_parameter xml:space="preserve">use_faces</desc_parameter><desc_parameter xml:space="preserve">use_face_step</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Region Extend.</paragraph>
                    <paragraph>used to implement the select more/less tools.
                        this puts some geometry surrounding regions of
                        geometry in geom into geom.out.</paragraph>
                    <paragraph>if use_faces is 0 then geom.out spits out verts and edges,
                        otherwise it spits out faces.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">geom</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – input geometry</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_contract</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – find boundary inside the regions, not outside.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_faces</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – extend from faces instead of edges</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_face_step</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – step over connected faces</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>geom</literal>: output slot, computed boundary geometry.</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'rotate_edges()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.rotate_edges',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="rotate_edges" ids="bmesh.ops.rotate_edges" module="bmesh.ops" names="bmesh.ops.rotate_edges"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">rotate_edges</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter><desc_parameter xml:space="preserve">use_ccw</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Edge Rotate.</paragraph>
                    <paragraph>Rotates edges topologically.  Also known as “spin edge” to some people.
                        Simple example: <literal>[/] becomes [|] then [\]</literal>.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)) – input edges</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_ccw</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – rotate edge counter-clockwise if true, otherwise clockwise</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>edges</literal>: newly spun edges</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'reverse_faces()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.reverse_faces',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="reverse_faces" ids="bmesh.ops.reverse_faces" module="bmesh.ops" names="bmesh.ops.reverse_faces"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">reverse_faces</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">faces</desc_parameter><desc_parameter xml:space="preserve">flip_multires</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Reverse Faces.</paragraph>
                    <paragraph>Reverses the winding (vertex order) of faces.
                        This has the effect of flipping the normal.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – input faces</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">flip_multires</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – maintain multi-res offset</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'bisect_edges()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.bisect_edges',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="bisect_edges" ids="bmesh.ops.bisect_edges" module="bmesh.ops" names="bmesh.ops.bisect_edges"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">bisect_edges</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter><desc_parameter xml:space="preserve">cuts</desc_parameter><desc_parameter xml:space="preserve">edge_percents</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Edge Bisect.</paragraph>
                    <paragraph>Splits input edges (but doesn’t do anything else).
                        This creates a 2-valence vert.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)) – input edges</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">cuts</literal_strong> (<literal_emphasis>int</literal_emphasis>) – number of cuts</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edge_percents</literal_strong> (<literal_emphasis>dict mapping vert/edge/face types to float</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>geom_split</literal>: newly created vertices and edges</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'mirror()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.mirror',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="mirror" ids="bmesh.ops.mirror" module="bmesh.ops" names="bmesh.ops.mirror"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">mirror</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">geom</desc_parameter><desc_parameter xml:space="preserve">matrix</desc_parameter><desc_parameter xml:space="preserve">merge_dist</desc_parameter><desc_parameter xml:space="preserve">axis</desc_parameter><desc_parameter xml:space="preserve">mirror_u</desc_parameter><desc_parameter xml:space="preserve">mirror_v</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Mirror.</paragraph>
                    <paragraph>Mirrors geometry along an axis.  The resulting geometry is welded on using
                        merge_dist.  Pairs of original/mirrored vertices are welded using the merge_dist
                        parameter (which defines the minimum distance for welding to happen).</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">geom</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – input geometry</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">matrix</literal_strong> (<reference internal="True" reftitle="mathutils.Matrix" refuri="mathutils#mathutils.Matrix"><literal classes="xref py py-class">mathutils.Matrix</literal></reference>) – matrix defining the mirror transformation</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">merge_dist</literal_strong> (<literal_emphasis>float</literal_emphasis>) – maximum distance for merging.  does no merging if 0.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">axis</literal_strong> (<literal_emphasis>enum in</literal_emphasis><literal_emphasis> [</literal_emphasis><literal_emphasis>'X'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'Y'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'Z'</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>default 'X'</literal_emphasis>) – the axis to use.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">mirror_u</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – mirror UVs across the u axis</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">mirror_v</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – mirror UVs across the v axis</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>geom</literal>: output geometry, mirrored</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'find_doubles()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.find_doubles',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="find_doubles" ids="bmesh.ops.find_doubles" module="bmesh.ops" names="bmesh.ops.find_doubles"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">find_doubles</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">verts</desc_parameter><desc_parameter xml:space="preserve">keep_verts</desc_parameter><desc_parameter xml:space="preserve">dist</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Find Doubles.</paragraph>
                    <paragraph>Takes input verts and find vertices they should weld to.
                        Outputs a mapping slot suitable for use with the weld verts bmop.</paragraph>
                    <paragraph>If keep_verts is used, vertices outside that set can only be merged
                        with vertices in that set.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">verts</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – input vertices</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">keep_verts</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – list of verts to keep</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">dist</literal_strong> (<literal_emphasis>float</literal_emphasis>) – minimum distance</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>targetmap</literal>:</paragraph><paragraph><strong>type</strong> dict mapping vert/edge/face types to <reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference></paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'remove_doubles()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.remove_doubles',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="remove_doubles" ids="bmesh.ops.remove_doubles" module="bmesh.ops" names="bmesh.ops.remove_doubles"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">remove_doubles</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">verts</desc_parameter><desc_parameter xml:space="preserve">dist</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Remove Doubles.</paragraph>
                    <paragraph>Finds groups of vertices closer then dist and merges them together,
                        using the weld verts bmop.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">verts</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – input verts</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">dist</literal_strong> (<literal_emphasis>float</literal_emphasis>) – minimum distance</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'automerge()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.automerge',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="automerge" ids="bmesh.ops.automerge" module="bmesh.ops" names="bmesh.ops.automerge"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">automerge</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">verts</desc_parameter><desc_parameter xml:space="preserve">dist</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Auto Merge.</paragraph>
                    <paragraph>Finds groups of vertices closer then <strong>dist</strong> and merges them together,
                        using the weld verts bmop.  The merges must go from a vert not in
                        <strong>verts</strong> to one in <strong>verts</strong>.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">verts</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – input verts</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">dist</literal_strong> (<literal_emphasis>float</literal_emphasis>) – minimum distance</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'collapse()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.collapse',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="collapse" ids="bmesh.ops.collapse" module="bmesh.ops" names="bmesh.ops.collapse"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">collapse</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter><desc_parameter xml:space="preserve">uvs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Collapse Connected.</paragraph>
                    <paragraph>Collapses connected vertices</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)) – input edges</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">uvs</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – also collapse UVs and such</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'pointmerge_facedata()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.pointmerge_facedata',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="pointmerge_facedata" ids="bmesh.ops.pointmerge_facedata" module="bmesh.ops" names="bmesh.ops.pointmerge_facedata"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">pointmerge_facedata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">verts</desc_parameter><desc_parameter xml:space="preserve">vert_snap</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Face-Data Point Merge.</paragraph>
                    <paragraph>Merge uv/vcols at a specific vertex.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">verts</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – input vertices</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">vert_snap</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>) – snap vertex</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'average_vert_facedata()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.average_vert_facedata',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="average_vert_facedata" ids="bmesh.ops.average_vert_facedata" module="bmesh.ops" names="bmesh.ops.average_vert_facedata"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">average_vert_facedata</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">verts</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Average Vertices Facevert Data.</paragraph>
                    <paragraph>Merge uv/vcols associated with the input vertices at
                        the bounding box center. (I know, it’s not averaging but
                        the vert_snap_to_bb_center is just too long).</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">verts</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – input vertices</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'pointmerge()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.pointmerge',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="pointmerge" ids="bmesh.ops.pointmerge" module="bmesh.ops" names="bmesh.ops.pointmerge"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">pointmerge</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">verts</desc_parameter><desc_parameter xml:space="preserve">merge_co</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Point Merge.</paragraph>
                    <paragraph>Merge verts together at a point.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">verts</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – input vertices (all verts will be merged into the first).</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">merge_co</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference> or any sequence of 3 floats) – Position to merge at.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'collapse_uvs()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.collapse_uvs',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="collapse_uvs" ids="bmesh.ops.collapse_uvs" module="bmesh.ops" names="bmesh.ops.collapse_uvs"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">collapse_uvs</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Collapse Connected UV’s.</paragraph>
                    <paragraph>Collapses connected UV vertices.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)) – input edges</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'weld_verts()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.weld_verts',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="weld_verts" ids="bmesh.ops.weld_verts" module="bmesh.ops" names="bmesh.ops.weld_verts"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">weld_verts</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">targetmap</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Weld Verts.</paragraph>
                    <paragraph>Welds verts together (kind-of like remove doubles, merge, etc, all of which
                        use or will use this bmop).  You pass in mappings from vertices to the vertices
                        they weld with.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">targetmap</literal_strong> (dict mapping vert/edge/face types to <reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'create_vert()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.create_vert',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="create_vert" ids="bmesh.ops.create_vert" module="bmesh.ops" names="bmesh.ops.create_vert"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">create_vert</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">co</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Make Vertex.</paragraph>
                    <paragraph>Creates a single vertex; this bmop was necessary
                        for click-create-vertex.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">co</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference> or any sequence of 3 floats) – the coordinate of the new vert</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>vert</literal>: the new vert</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'join_triangles()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.join_triangles',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="join_triangles" ids="bmesh.ops.join_triangles" module="bmesh.ops" names="bmesh.ops.join_triangles"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">join_triangles</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">faces</desc_parameter><desc_parameter xml:space="preserve">cmp_seam</desc_parameter><desc_parameter xml:space="preserve">cmp_sharp</desc_parameter><desc_parameter xml:space="preserve">cmp_uvs</desc_parameter><desc_parameter xml:space="preserve">cmp_vcols</desc_parameter><desc_parameter xml:space="preserve">cmp_materials</desc_parameter><desc_parameter xml:space="preserve">angle_face_threshold</desc_parameter><desc_parameter xml:space="preserve">angle_shape_threshold</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Join Triangles.</paragraph>
                    <paragraph>Tries to intelligently join triangles according
                        to angle threshold and delimiters.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – input geometry.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">cmp_seam</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">cmp_sharp</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">cmp_uvs</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">cmp_vcols</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">cmp_materials</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">angle_face_threshold</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">angle_shape_threshold</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>faces</literal>: joined faces</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'contextual_create()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.contextual_create',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="contextual_create" ids="bmesh.ops.contextual_create" module="bmesh.ops" names="bmesh.ops.contextual_create"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">contextual_create</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">geom</desc_parameter><desc_parameter xml:space="preserve">mat_nr</desc_parameter><desc_parameter xml:space="preserve">use_smooth</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Contextual Create.</paragraph>
                    <paragraph>This is basically F-key, it creates
                        new faces from vertices, makes stuff from edge nets,
                        makes wire edges, etc.  It also dissolves faces.</paragraph>
                    <paragraph>Three verts become a triangle, four become a quad.  Two
                        become a wire edge.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">geom</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – input geometry.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">mat_nr</literal_strong> (<literal_emphasis>int</literal_emphasis>) – material to use</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_smooth</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – smooth to use</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>faces</literal>: newly-made face(s)</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item><list_item><paragraph><literal>edges</literal>: newly-made edge(s)</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'bridge_loops()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.bridge_loops',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="bridge_loops" ids="bmesh.ops.bridge_loops" module="bmesh.ops" names="bmesh.ops.bridge_loops"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">bridge_loops</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter><desc_parameter xml:space="preserve">use_pairs</desc_parameter><desc_parameter xml:space="preserve">use_cyclic</desc_parameter><desc_parameter xml:space="preserve">use_merge</desc_parameter><desc_parameter xml:space="preserve">merge_factor</desc_parameter><desc_parameter xml:space="preserve">twist_offset</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bridge edge loops with faces.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)) – input edges</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_pairs</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_cyclic</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_merge</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">merge_factor</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">twist_offset</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>faces</literal>: new faces</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item><list_item><paragraph><literal>edges</literal>: new edges</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'grid_fill()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.grid_fill',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="grid_fill" ids="bmesh.ops.grid_fill" module="bmesh.ops" names="bmesh.ops.grid_fill"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">grid_fill</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter><desc_parameter xml:space="preserve">mat_nr</desc_parameter><desc_parameter xml:space="preserve">use_smooth</desc_parameter><desc_parameter xml:space="preserve">use_interp_simple</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Grid Fill.</paragraph>
                    <paragraph>Create faces defined by 2 disconnected edge loops (which share edges).</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)) – input edges</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">mat_nr</literal_strong> (<literal_emphasis>int</literal_emphasis>) – material to use</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_smooth</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – smooth state to use</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_interp_simple</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – use simple interpolation</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>faces</literal>: new faces</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'holes_fill()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.holes_fill',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="holes_fill" ids="bmesh.ops.holes_fill" module="bmesh.ops" names="bmesh.ops.holes_fill"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">holes_fill</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter><desc_parameter xml:space="preserve">sides</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Fill Holes.</paragraph>
                    <paragraph>Fill boundary edges with faces, copying surrounding customdata.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)) – input edges</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">sides</literal_strong> (<literal_emphasis>int</literal_emphasis>) – number of face sides to fill</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>faces</literal>: new faces</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'face_attribute_fill()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.face_attribute_fill',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="face_attribute_fill" ids="bmesh.ops.face_attribute_fill" module="bmesh.ops" names="bmesh.ops.face_attribute_fill"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">face_attribute_fill</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">faces</desc_parameter><desc_parameter xml:space="preserve">use_normals</desc_parameter><desc_parameter xml:space="preserve">use_data</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Face Attribute Fill.</paragraph>
                    <paragraph>Fill in faces with data from adjacent faces.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – input faces</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_normals</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – copy face winding</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_data</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – copy face data</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>faces_fail</literal>: faces that could not be handled</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'edgeloop_fill()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.edgeloop_fill',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="edgeloop_fill" ids="bmesh.ops.edgeloop_fill" module="bmesh.ops" names="bmesh.ops.edgeloop_fill"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">edgeloop_fill</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter><desc_parameter xml:space="preserve">mat_nr</desc_parameter><desc_parameter xml:space="preserve">use_smooth</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Edge Loop Fill.</paragraph>
                    <paragraph>Create faces defined by one or more non overlapping edge loops.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)) – input edges</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">mat_nr</literal_strong> (<literal_emphasis>int</literal_emphasis>) – material to use</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_smooth</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – smooth state to use</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>faces</literal>: new faces</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'edgenet_fill()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.edgenet_fill',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="edgenet_fill" ids="bmesh.ops.edgenet_fill" module="bmesh.ops" names="bmesh.ops.edgenet_fill"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">edgenet_fill</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter><desc_parameter xml:space="preserve">mat_nr</desc_parameter><desc_parameter xml:space="preserve">use_smooth</desc_parameter><desc_parameter xml:space="preserve">sides</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Edge Net Fill.</paragraph>
                    <paragraph>Create faces defined by enclosed edges.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)) – input edges</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">mat_nr</literal_strong> (<literal_emphasis>int</literal_emphasis>) – material to use</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_smooth</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – smooth state to use</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">sides</literal_strong> (<literal_emphasis>int</literal_emphasis>) – number of sides</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>faces</literal>: new faces</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'edgenet_prepare()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.edgenet_prepare',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="edgenet_prepare" ids="bmesh.ops.edgenet_prepare" module="bmesh.ops" names="bmesh.ops.edgenet_prepare"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">edgenet_prepare</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Edgenet Prepare.</paragraph>
                    <paragraph>Identifies several useful edge loop cases and modifies them so
                        they’ll become a face when edgenet_fill is called.  The cases covered are:</paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>One single loop; an edge is added to connect the ends</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Two loops; two edges are added to connect the endpoints (based on the
                                shortest distance between each endpont).</paragraph>
                        </list_item>
                    </bullet_list>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)) – input edges</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>edges</literal>: new edges</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'rotate()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.rotate',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="rotate" ids="bmesh.ops.rotate" module="bmesh.ops" names="bmesh.ops.rotate"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">rotate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">cent</desc_parameter><desc_parameter xml:space="preserve">matrix</desc_parameter><desc_parameter xml:space="preserve">verts</desc_parameter><desc_parameter xml:space="preserve">space</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Rotate.</paragraph>
                    <paragraph>Rotate vertices around a center, using a 3x3 rotation matrix.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">cent</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference> or any sequence of 3 floats) – center of rotation</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">matrix</literal_strong> (<reference internal="True" reftitle="mathutils.Matrix" refuri="mathutils#mathutils.Matrix"><literal classes="xref py py-class">mathutils.Matrix</literal></reference>) – matrix defining rotation</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">verts</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – input vertices</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">space</literal_strong> (<reference internal="True" reftitle="mathutils.Matrix" refuri="mathutils#mathutils.Matrix"><literal classes="xref py py-class">mathutils.Matrix</literal></reference>) – matrix to define the space (typically object matrix)</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'translate()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.translate',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="translate" ids="bmesh.ops.translate" module="bmesh.ops" names="bmesh.ops.translate"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">translate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">vec</desc_parameter><desc_parameter xml:space="preserve">space</desc_parameter><desc_parameter xml:space="preserve">verts</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Translate.</paragraph>
                    <paragraph>Translate vertices by an offset.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">vec</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference> or any sequence of 3 floats) – translation offset</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">space</literal_strong> (<reference internal="True" reftitle="mathutils.Matrix" refuri="mathutils#mathutils.Matrix"><literal classes="xref py py-class">mathutils.Matrix</literal></reference>) – matrix to define the space (typically object matrix)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">verts</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – input vertices</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'scale()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.scale',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="scale" ids="bmesh.ops.scale" module="bmesh.ops" names="bmesh.ops.scale"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">scale</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">vec</desc_parameter><desc_parameter xml:space="preserve">space</desc_parameter><desc_parameter xml:space="preserve">verts</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Scale.</paragraph>
                    <paragraph>Scales vertices by an offset.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">vec</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference> or any sequence of 3 floats) – scale factor</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">space</literal_strong> (<reference internal="True" reftitle="mathutils.Matrix" refuri="mathutils#mathutils.Matrix"><literal classes="xref py py-class">mathutils.Matrix</literal></reference>) – matrix to define the space (typically object matrix)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">verts</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – input vertices</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'transform()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.transform',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="transform" ids="bmesh.ops.transform" module="bmesh.ops" names="bmesh.ops.transform"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">transform</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">matrix</desc_parameter><desc_parameter xml:space="preserve">space</desc_parameter><desc_parameter xml:space="preserve">verts</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Transform.</paragraph>
                    <paragraph>Transforms a set of vertices by a matrix.  Multiplies
                        the vertex coordinates with the matrix.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">matrix</literal_strong> (<reference internal="True" reftitle="mathutils.Matrix" refuri="mathutils#mathutils.Matrix"><literal classes="xref py py-class">mathutils.Matrix</literal></reference>) – transform matrix</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">space</literal_strong> (<reference internal="True" reftitle="mathutils.Matrix" refuri="mathutils#mathutils.Matrix"><literal classes="xref py py-class">mathutils.Matrix</literal></reference>) – matrix to define the space (typically object matrix)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">verts</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – input vertices</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'object_load_bmesh()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.object_load_bmesh',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="object_load_bmesh" ids="bmesh.ops.object_load_bmesh" module="bmesh.ops" names="bmesh.ops.object_load_bmesh"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">object_load_bmesh</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">scene</desc_parameter><desc_parameter xml:space="preserve">object</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Object Load BMesh.</paragraph>
                    <paragraph>Loads a bmesh into an object/mesh.  This is a “private”
                        bmop.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">scene</literal_strong> (<reference internal="True" reftitle="bpy.types.Scene" refuri="bpy.types.Scene#bpy.types.Scene"><literal classes="xref py py-class">bpy.types.Scene</literal></reference>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">object</literal_strong> (<reference internal="True" reftitle="bpy.types.Object" refuri="bpy.types.Object#bpy.types.Object"><literal classes="xref py py-class">bpy.types.Object</literal></reference>) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'bmesh_to_mesh()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.bmesh_to_mesh',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="bmesh_to_mesh" ids="bmesh.ops.bmesh_to_mesh" module="bmesh.ops" names="bmesh.ops.bmesh_to_mesh"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">bmesh_to_mesh</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">mesh</desc_parameter><desc_parameter xml:space="preserve">object</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>BMesh to Mesh.</paragraph>
                    <paragraph>Converts a bmesh to a Mesh.  This is reserved for exiting editmode.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">mesh</literal_strong> (<reference internal="True" reftitle="bpy.types.Mesh" refuri="bpy.types.Mesh#bpy.types.Mesh"><literal classes="xref py py-class">bpy.types.Mesh</literal></reference>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">object</literal_strong> (<reference internal="True" reftitle="bpy.types.Object" refuri="bpy.types.Object#bpy.types.Object"><literal classes="xref py py-class">bpy.types.Object</literal></reference>) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'mesh_to_bmesh()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.mesh_to_bmesh',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="mesh_to_bmesh" ids="bmesh.ops.mesh_to_bmesh" module="bmesh.ops" names="bmesh.ops.mesh_to_bmesh"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">mesh_to_bmesh</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">mesh</desc_parameter><desc_parameter xml:space="preserve">object</desc_parameter><desc_parameter xml:space="preserve">use_shapekey</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Mesh to BMesh.</paragraph>
                    <paragraph>Load the contents of a mesh into the bmesh.  this bmop is private, it’s
                        reserved exclusively for entering editmode.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">mesh</literal_strong> (<reference internal="True" reftitle="bpy.types.Mesh" refuri="bpy.types.Mesh#bpy.types.Mesh"><literal classes="xref py py-class">bpy.types.Mesh</literal></reference>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">object</literal_strong> (<reference internal="True" reftitle="bpy.types.Object" refuri="bpy.types.Object#bpy.types.Object"><literal classes="xref py py-class">bpy.types.Object</literal></reference>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_shapekey</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – load active shapekey coordinates into verts</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'extrude_discrete_faces()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.extrude_discrete_faces',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="extrude_discrete_faces" ids="bmesh.ops.extrude_discrete_faces" module="bmesh.ops" names="bmesh.ops.extrude_discrete_faces"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">extrude_discrete_faces</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">faces</desc_parameter><desc_parameter xml:space="preserve">use_normal_flip</desc_parameter><desc_parameter xml:space="preserve">use_select_history</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Individual Face Extrude.</paragraph>
                    <paragraph>Extrudes faces individually.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – input faces</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_normal_flip</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Create faces with reversed direction.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_select_history</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – pass to duplicate</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>faces</literal>: output faces</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'extrude_edge_only()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.extrude_edge_only',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="extrude_edge_only" ids="bmesh.ops.extrude_edge_only" module="bmesh.ops" names="bmesh.ops.extrude_edge_only"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">extrude_edge_only</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter><desc_parameter xml:space="preserve">use_normal_flip</desc_parameter><desc_parameter xml:space="preserve">use_select_history</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Extrude Only Edges.</paragraph>
                    <paragraph>Extrudes Edges into faces, note that this is very simple, there’s no fancy
                        winged extrusion.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)) – input vertices</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_normal_flip</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Create faces with reversed direction.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_select_history</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – pass to duplicate</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>geom</literal>: output geometry</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'extrude_vert_indiv()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.extrude_vert_indiv',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="extrude_vert_indiv" ids="bmesh.ops.extrude_vert_indiv" module="bmesh.ops" names="bmesh.ops.extrude_vert_indiv"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">extrude_vert_indiv</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">verts</desc_parameter><desc_parameter xml:space="preserve">use_select_history</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Individual Vertex Extrude.</paragraph>
                    <paragraph>Extrudes wire edges from vertices.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">verts</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – input vertices</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_select_history</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – pass to duplicate</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>edges</literal>: output wire edges</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)</paragraph></list_item><list_item><paragraph><literal>verts</literal>: output vertices</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'connect_verts()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.connect_verts',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="connect_verts" ids="bmesh.ops.connect_verts" module="bmesh.ops" names="bmesh.ops.connect_verts"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">connect_verts</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">verts</desc_parameter><desc_parameter xml:space="preserve">faces_exclude</desc_parameter><desc_parameter xml:space="preserve">check_degenerate</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Connect Verts.</paragraph>
                    <paragraph>Split faces by adding edges that connect <strong>verts</strong>.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">verts</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces_exclude</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">check_degenerate</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – prevent splits with overlaps &amp; intersections</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>edges</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'connect_verts_concave()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.connect_verts_concave',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="connect_verts_concave" ids="bmesh.ops.connect_verts_concave" module="bmesh.ops" names="bmesh.ops.connect_verts_concave"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">connect_verts_concave</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">faces</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Connect Verts to form Convex Faces.</paragraph>
                    <paragraph>Ensures all faces are convex <strong>faces</strong>.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>edges</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)</paragraph></list_item><list_item><paragraph><literal>faces</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'connect_verts_nonplanar()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.connect_verts_nonplanar',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="connect_verts_nonplanar" ids="bmesh.ops.connect_verts_nonplanar" module="bmesh.ops" names="bmesh.ops.connect_verts_nonplanar"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">connect_verts_nonplanar</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">angle_limit</desc_parameter><desc_parameter xml:space="preserve">faces</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Connect Verts Across non Planer Faces.</paragraph>
                    <paragraph>Split faces by connecting edges along non planer <strong>faces</strong>.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">angle_limit</literal_strong> (<literal_emphasis>float</literal_emphasis>) – total rotation angle (radians)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>edges</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)</paragraph></list_item><list_item><paragraph><literal>faces</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'connect_vert_pair()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.connect_vert_pair',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="connect_vert_pair" ids="bmesh.ops.connect_vert_pair" module="bmesh.ops" names="bmesh.ops.connect_vert_pair"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">connect_vert_pair</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">verts</desc_parameter><desc_parameter xml:space="preserve">verts_exclude</desc_parameter><desc_parameter xml:space="preserve">faces_exclude</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Connect Verts.</paragraph>
                    <paragraph>Split faces by adding edges that connect <strong>verts</strong>.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">verts</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">verts_exclude</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces_exclude</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>edges</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'extrude_face_region()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.extrude_face_region',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="extrude_face_region" ids="bmesh.ops.extrude_face_region" module="bmesh.ops" names="bmesh.ops.extrude_face_region"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">extrude_face_region</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">geom</desc_parameter><desc_parameter xml:space="preserve">edges_exclude</desc_parameter><desc_parameter xml:space="preserve">use_keep_orig</desc_parameter><desc_parameter xml:space="preserve">use_normal_flip</desc_parameter><desc_parameter xml:space="preserve">use_select_history</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Extrude Faces.</paragraph>
                    <paragraph>Extrude operator (does not transform)</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">geom</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – edges and faces</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges_exclude</literal_strong> (<literal_emphasis>set of vert/edge/face type</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_keep_orig</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – keep original geometry (requires <literal>geom</literal> to include edges).</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_normal_flip</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Create faces with reversed direction.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_select_history</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – pass to duplicate</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>geom</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'dissolve_verts()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.dissolve_verts',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="dissolve_verts" ids="bmesh.ops.dissolve_verts" module="bmesh.ops" names="bmesh.ops.dissolve_verts"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">dissolve_verts</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">verts</desc_parameter><desc_parameter xml:space="preserve">use_face_split</desc_parameter><desc_parameter xml:space="preserve">use_boundary_tear</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Dissolve Verts.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">verts</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_face_split</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_boundary_tear</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'dissolve_edges()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.dissolve_edges',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="dissolve_edges" ids="bmesh.ops.dissolve_edges" module="bmesh.ops" names="bmesh.ops.dissolve_edges"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">dissolve_edges</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter><desc_parameter xml:space="preserve">use_verts</desc_parameter><desc_parameter xml:space="preserve">use_face_split</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Dissolve Edges.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_verts</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – dissolve verts left between only 2 edges.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_face_split</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>region</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'dissolve_faces()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.dissolve_faces',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="dissolve_faces" ids="bmesh.ops.dissolve_faces" module="bmesh.ops" names="bmesh.ops.dissolve_faces"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">dissolve_faces</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">faces</desc_parameter><desc_parameter xml:space="preserve">use_verts</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Dissolve Faces.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_verts</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – dissolve verts left between only 2 edges.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>region</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'dissolve_limit()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.dissolve_limit',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="dissolve_limit" ids="bmesh.ops.dissolve_limit" module="bmesh.ops" names="bmesh.ops.dissolve_limit"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">dissolve_limit</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">angle_limit</desc_parameter><desc_parameter xml:space="preserve">use_dissolve_boundaries</desc_parameter><desc_parameter xml:space="preserve">verts</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter><desc_parameter xml:space="preserve">delimit</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Limited Dissolve.</paragraph>
                    <paragraph>Dissolve planar faces and co-linear edges.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">angle_limit</literal_strong> (<literal_emphasis>float</literal_emphasis>) – total rotation angle (radians)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_dissolve_boundaries</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">verts</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">delimit</literal_strong> (<literal_emphasis>set of flags from</literal_emphasis><literal_emphasis> [</literal_emphasis><literal_emphasis>'NORMAL'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'MATERIAL'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'SEAM'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'SHARP'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'UV'</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>default {}</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>region</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'dissolve_degenerate()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.dissolve_degenerate',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="dissolve_degenerate" ids="bmesh.ops.dissolve_degenerate" module="bmesh.ops" names="bmesh.ops.dissolve_degenerate"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">dissolve_degenerate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">dist</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Degenerate Dissolve.</paragraph>
                    <paragraph>Dissolve edges with no length, faces with no area.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">dist</literal_strong> (<literal_emphasis>float</literal_emphasis>) – minimum distance to consider degenerate</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'triangulate()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.triangulate',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="triangulate" ids="bmesh.ops.triangulate" module="bmesh.ops" names="bmesh.ops.triangulate"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">triangulate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">faces</desc_parameter><desc_parameter xml:space="preserve">quad_method</desc_parameter><desc_parameter xml:space="preserve">ngon_method</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Triangulate.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">quad_method</literal_strong> (<literal_emphasis>enum in</literal_emphasis><literal_emphasis> [</literal_emphasis><literal_emphasis>'BEAUTY'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'FIXED'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'ALTERNATE'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'SHORT_EDGE'</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>default 'BEAUTY'</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">ngon_method</literal_strong> (<literal_emphasis>enum in</literal_emphasis><literal_emphasis> [</literal_emphasis><literal_emphasis>'BEAUTY'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'EAR_CLIP'</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>default 'BEAUTY'</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>edges</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)</paragraph></list_item><list_item><paragraph><literal>faces</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item><list_item><paragraph><literal>face_map</literal>:</paragraph><paragraph><strong>type</strong> dict mapping vert/edge/face types to <reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference></paragraph></list_item><list_item><paragraph><literal>face_map_double</literal>: duplicate faces</paragraph><paragraph><strong>type</strong> dict mapping vert/edge/face types to <reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference></paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'unsubdivide()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.unsubdivide',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="unsubdivide" ids="bmesh.ops.unsubdivide" module="bmesh.ops" names="bmesh.ops.unsubdivide"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">unsubdivide</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">verts</desc_parameter><desc_parameter xml:space="preserve">iterations</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Un-Subdivide.</paragraph>
                    <paragraph>Reduce detail in geometry containing grids.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">verts</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – input vertices</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">iterations</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'subdivide_edges()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.subdivide_edges',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="subdivide_edges" ids="bmesh.ops.subdivide_edges" module="bmesh.ops" names="bmesh.ops.subdivide_edges"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">subdivide_edges</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter><desc_parameter xml:space="preserve">smooth</desc_parameter><desc_parameter xml:space="preserve">smooth_falloff</desc_parameter><desc_parameter xml:space="preserve">fractal</desc_parameter><desc_parameter xml:space="preserve">along_normal</desc_parameter><desc_parameter xml:space="preserve">cuts</desc_parameter><desc_parameter xml:space="preserve">seed</desc_parameter><desc_parameter xml:space="preserve">custom_patterns</desc_parameter><desc_parameter xml:space="preserve">edge_percents</desc_parameter><desc_parameter xml:space="preserve">quad_corner_type</desc_parameter><desc_parameter xml:space="preserve">use_grid_fill</desc_parameter><desc_parameter xml:space="preserve">use_single_edge</desc_parameter><desc_parameter xml:space="preserve">use_only_quads</desc_parameter><desc_parameter xml:space="preserve">use_sphere</desc_parameter><desc_parameter xml:space="preserve">use_smooth_even</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Subdivide Edges.</paragraph>
                    <paragraph>Advanced operator for subdividing edges
                        with options for face patterns, smoothing and randomization.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">smooth</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">smooth_falloff</literal_strong> (<literal_emphasis>enum in</literal_emphasis><literal_emphasis> [</literal_emphasis><literal_emphasis>'SMOOTH'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'SPHERE'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'ROOT'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'SHARP'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'LINEAR'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'INVERSE_SQUARE'</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>default 'SMOOTH'</literal_emphasis>) – smooth falloff type</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">fractal</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">along_normal</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">cuts</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">seed</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">custom_patterns</literal_strong> (<literal_emphasis>dict mapping vert/edge/face types to unknown internal data</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>not compatible with python</literal_emphasis>) – uses custom pointers</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edge_percents</literal_strong> (<literal_emphasis>dict mapping vert/edge/face types to float</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">quad_corner_type</literal_strong> (<literal_emphasis>enum in</literal_emphasis><literal_emphasis> [</literal_emphasis><literal_emphasis>'STRAIGHT_CUT'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'INNER_VERT'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'PATH'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'FAN'</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>default 'STRAIGHT_CUT'</literal_emphasis>) – quad corner type</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_grid_fill</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – fill in fully-selected faces with a grid</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_single_edge</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – tessellate the case of one edge selected in a quad or triangle</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_only_quads</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – only subdivide quads (for loopcut)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_sphere</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – for making new primitives only</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_smooth_even</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – maintain even offset when smoothing</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>geom_inner</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item><list_item><paragraph><literal>geom_split</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item><list_item><paragraph><literal>geom</literal>: contains all output geometry</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'subdivide_edgering()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.subdivide_edgering',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="subdivide_edgering" ids="bmesh.ops.subdivide_edgering" module="bmesh.ops" names="bmesh.ops.subdivide_edgering"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">subdivide_edgering</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter><desc_parameter xml:space="preserve">interp_mode</desc_parameter><desc_parameter xml:space="preserve">smooth</desc_parameter><desc_parameter xml:space="preserve">cuts</desc_parameter><desc_parameter xml:space="preserve">profile_shape</desc_parameter><desc_parameter xml:space="preserve">profile_shape_factor</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Subdivide Edge-Ring.</paragraph>
                    <paragraph>Take an edge-ring, and subdivide with interpolation options.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)) – input vertices</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">interp_mode</literal_strong> (<literal_emphasis>enum in</literal_emphasis><literal_emphasis> [</literal_emphasis><literal_emphasis>'LINEAR'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'PATH'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'SURFACE'</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>default 'LINEAR'</literal_emphasis>) – interpolation method</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">smooth</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">cuts</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">profile_shape</literal_strong> (<literal_emphasis>enum in</literal_emphasis><literal_emphasis> [</literal_emphasis><literal_emphasis>'SMOOTH'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'SPHERE'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'ROOT'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'SHARP'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'LINEAR'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'INVERSE_SQUARE'</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>default 'SMOOTH'</literal_emphasis>) – profile shape type</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">profile_shape_factor</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>faces</literal>: output faces</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'bisect_plane()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.bisect_plane',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="bisect_plane" ids="bmesh.ops.bisect_plane" module="bmesh.ops" names="bmesh.ops.bisect_plane"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">bisect_plane</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">geom</desc_parameter><desc_parameter xml:space="preserve">dist</desc_parameter><desc_parameter xml:space="preserve">plane_co</desc_parameter><desc_parameter xml:space="preserve">plane_no</desc_parameter><desc_parameter xml:space="preserve">use_snap_center</desc_parameter><desc_parameter xml:space="preserve">clear_outer</desc_parameter><desc_parameter xml:space="preserve">clear_inner</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bisect Plane.</paragraph>
                    <paragraph>Bisects the mesh by a plane (cut the mesh in half).</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">geom</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">dist</literal_strong> (<literal_emphasis>float</literal_emphasis>) – minimum distance when testing if a vert is exactly on the plane</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">plane_co</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference> or any sequence of 3 floats) – point on the plane</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">plane_no</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference> or any sequence of 3 floats) – direction of the plane</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_snap_center</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – snap axis aligned verts to the center</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">clear_outer</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – when enabled. remove all geometry on the positive side of the plane</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">clear_inner</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – when enabled. remove all geometry on the negative side of the plane</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>geom_cut</literal>: output geometry aligned with the plane (new and existing)</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)</paragraph></list_item><list_item><paragraph><literal>geom</literal>: input and output geometry (result of cut)</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'delete()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.delete',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="delete" ids="bmesh.ops.delete" module="bmesh.ops" names="bmesh.ops.delete"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">delete</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">geom</desc_parameter><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Delete Geometry.</paragraph>
                    <paragraph>Utility operator to delete geometry.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">geom</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">context</literal_strong> (<literal_emphasis>enum in</literal_emphasis><literal_emphasis> [</literal_emphasis><literal_emphasis>'VERTS'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'EDGES'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'FACES_ONLY'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'EDGES_FACES'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'FACES'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'FACES_KEEP_BOUNDARY'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'TAGGED_ONLY'</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>default 'VERTS'</literal_emphasis>) – geometry types to delete</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'duplicate()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.duplicate',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="duplicate" ids="bmesh.ops.duplicate" module="bmesh.ops" names="bmesh.ops.duplicate"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">duplicate</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">geom</desc_parameter><desc_parameter xml:space="preserve">dest</desc_parameter><desc_parameter xml:space="preserve">use_select_history</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Duplicate Geometry.</paragraph>
                    <paragraph>Utility operator to duplicate geometry,
                        optionally into a destination mesh.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">geom</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">dest</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_select_history</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>geom_orig</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item><list_item><paragraph><literal>geom</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item><list_item><paragraph><literal>vert_map</literal>:</paragraph><paragraph><strong>type</strong> dict mapping vert/edge/face types to <reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference></paragraph></list_item><list_item><paragraph><literal>edge_map</literal>:</paragraph><paragraph><strong>type</strong> dict mapping vert/edge/face types to <reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference></paragraph></list_item><list_item><paragraph><literal>face_map</literal>:</paragraph><paragraph><strong>type</strong> dict mapping vert/edge/face types to <reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference></paragraph></list_item><list_item><paragraph><literal>boundary_map</literal>:</paragraph><paragraph><strong>type</strong> dict mapping vert/edge/face types to <reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference></paragraph></list_item><list_item><paragraph><literal>isovert_map</literal>:</paragraph><paragraph><strong>type</strong> dict mapping vert/edge/face types to <reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference></paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'split()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.split',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="split" ids="bmesh.ops.split" module="bmesh.ops" names="bmesh.ops.split"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">split</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">geom</desc_parameter><desc_parameter xml:space="preserve">dest</desc_parameter><desc_parameter xml:space="preserve">use_only_faces</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Split Off Geometry.</paragraph>
                    <paragraph>Disconnect geometry from adjacent edges and faces,
                        optionally into a destination mesh.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">geom</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">dest</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_only_faces</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – when enabled. don’t duplicate loose verts/edges</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>geom</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item><list_item><paragraph><literal>boundary_map</literal>:</paragraph><paragraph><strong>type</strong> dict mapping vert/edge/face types to <reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference></paragraph></list_item><list_item><paragraph><literal>isovert_map</literal>:</paragraph><paragraph><strong>type</strong> dict mapping vert/edge/face types to <reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>/<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference></paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'spin()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.spin',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="spin" ids="bmesh.ops.spin" module="bmesh.ops" names="bmesh.ops.spin"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">spin</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">geom</desc_parameter><desc_parameter xml:space="preserve">cent</desc_parameter><desc_parameter xml:space="preserve">axis</desc_parameter><desc_parameter xml:space="preserve">dvec</desc_parameter><desc_parameter xml:space="preserve">angle</desc_parameter><desc_parameter xml:space="preserve">space</desc_parameter><desc_parameter xml:space="preserve">steps</desc_parameter><desc_parameter xml:space="preserve">use_merge</desc_parameter><desc_parameter xml:space="preserve">use_normal_flip</desc_parameter><desc_parameter xml:space="preserve">use_duplicate</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Spin.</paragraph>
                    <paragraph>Extrude or duplicate geometry a number of times,
                        rotating and possibly translating after each step</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">geom</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">cent</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference> or any sequence of 3 floats) – rotation center</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">axis</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference> or any sequence of 3 floats) – rotation axis</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">dvec</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference> or any sequence of 3 floats) – translation delta per step</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">angle</literal_strong> (<literal_emphasis>float</literal_emphasis>) – total rotation angle (radians)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">space</literal_strong> (<reference internal="True" reftitle="mathutils.Matrix" refuri="mathutils#mathutils.Matrix"><literal classes="xref py py-class">mathutils.Matrix</literal></reference>) – matrix to define the space (typically object matrix)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">steps</literal_strong> (<literal_emphasis>int</literal_emphasis>) – number of steps</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_merge</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Merge first/last when the angle is a full revolution.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_normal_flip</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Create faces with reversed direction.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_duplicate</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – duplicate or extrude?</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>geom_last</literal>: result of last step</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'rotate_uvs()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.rotate_uvs',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="rotate_uvs" ids="bmesh.ops.rotate_uvs" module="bmesh.ops" names="bmesh.ops.rotate_uvs"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">rotate_uvs</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">faces</desc_parameter><desc_parameter xml:space="preserve">use_ccw</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>UV Rotation.</paragraph>
                    <paragraph>Cycle the loop UV’s</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – input faces</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_ccw</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – rotate counter-clockwise if true, otherwise clockwise</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'reverse_uvs()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.reverse_uvs',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="reverse_uvs" ids="bmesh.ops.reverse_uvs" module="bmesh.ops" names="bmesh.ops.reverse_uvs"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">reverse_uvs</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">faces</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>UV Reverse.</paragraph>
                    <paragraph>Reverse the UV’s</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – input faces</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'rotate_colors()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.rotate_colors',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="rotate_colors" ids="bmesh.ops.rotate_colors" module="bmesh.ops" names="bmesh.ops.rotate_colors"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">rotate_colors</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">faces</desc_parameter><desc_parameter xml:space="preserve">use_ccw</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Color Rotation.</paragraph>
                    <paragraph>Cycle the loop colors</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – input faces</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_ccw</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – rotate counter-clockwise if true, otherwise clockwise</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'reverse_colors()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.reverse_colors',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="reverse_colors" ids="bmesh.ops.reverse_colors" module="bmesh.ops" names="bmesh.ops.reverse_colors"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">reverse_colors</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">faces</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Color Reverse</paragraph>
                    <paragraph>Reverse the loop colors.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – input faces</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'split_edges()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.split_edges',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="split_edges" ids="bmesh.ops.split_edges" module="bmesh.ops" names="bmesh.ops.split_edges"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">split_edges</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter><desc_parameter xml:space="preserve">verts</desc_parameter><desc_parameter xml:space="preserve">use_verts</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Edge Split.</paragraph>
                    <paragraph>Disconnects faces along input edges.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)) – input edges</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">verts</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)) – optional tag verts, use to have greater control of splits</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_verts</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – use ‘verts’ for splitting, else just find verts to split from edges</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>edges</literal>: old output disconnected edges</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'create_grid()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.create_grid',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="create_grid" ids="bmesh.ops.create_grid" module="bmesh.ops" names="bmesh.ops.create_grid"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">create_grid</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">x_segments</desc_parameter><desc_parameter xml:space="preserve">y_segments</desc_parameter><desc_parameter xml:space="preserve">size</desc_parameter><desc_parameter xml:space="preserve">matrix</desc_parameter><desc_parameter xml:space="preserve">calc_uvs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Create Grid.</paragraph>
                    <paragraph>Creates a grid with a variable number of subdivisions</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">x_segments</literal_strong> (<literal_emphasis>int</literal_emphasis>) – number of x segments</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">y_segments</literal_strong> (<literal_emphasis>int</literal_emphasis>) – number of y segments</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">size</literal_strong> (<literal_emphasis>float</literal_emphasis>) – size of the grid</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">matrix</literal_strong> (<reference internal="True" reftitle="mathutils.Matrix" refuri="mathutils#mathutils.Matrix"><literal classes="xref py py-class">mathutils.Matrix</literal></reference>) – matrix to multiply the new geometry with</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">calc_uvs</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – calculate default UVs</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>verts</literal>: output verts</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'create_uvsphere()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.create_uvsphere',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="create_uvsphere" ids="bmesh.ops.create_uvsphere" module="bmesh.ops" names="bmesh.ops.create_uvsphere"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">create_uvsphere</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">u_segments</desc_parameter><desc_parameter xml:space="preserve">v_segments</desc_parameter><desc_parameter xml:space="preserve">diameter</desc_parameter><desc_parameter xml:space="preserve">matrix</desc_parameter><desc_parameter xml:space="preserve">calc_uvs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Create UV Sphere.</paragraph>
                    <paragraph>Creates a grid with a variable number of subdivisions</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">u_segments</literal_strong> (<literal_emphasis>int</literal_emphasis>) – number of u segments</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">v_segments</literal_strong> (<literal_emphasis>int</literal_emphasis>) – number of v segment</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">diameter</literal_strong> (<literal_emphasis>float</literal_emphasis>) – diameter</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">matrix</literal_strong> (<reference internal="True" reftitle="mathutils.Matrix" refuri="mathutils#mathutils.Matrix"><literal classes="xref py py-class">mathutils.Matrix</literal></reference>) – matrix to multiply the new geometry with</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">calc_uvs</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – calculate default UVs</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>verts</literal>: output verts</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'create_icosphere()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.create_icosphere',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="create_icosphere" ids="bmesh.ops.create_icosphere" module="bmesh.ops" names="bmesh.ops.create_icosphere"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">create_icosphere</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">subdivisions</desc_parameter><desc_parameter xml:space="preserve">diameter</desc_parameter><desc_parameter xml:space="preserve">matrix</desc_parameter><desc_parameter xml:space="preserve">calc_uvs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Create Ico-Sphere.</paragraph>
                    <paragraph>Creates a grid with a variable number of subdivisions</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">subdivisions</literal_strong> (<literal_emphasis>int</literal_emphasis>) – how many times to recursively subdivide the sphere</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">diameter</literal_strong> (<literal_emphasis>float</literal_emphasis>) – diameter</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">matrix</literal_strong> (<reference internal="True" reftitle="mathutils.Matrix" refuri="mathutils#mathutils.Matrix"><literal classes="xref py py-class">mathutils.Matrix</literal></reference>) – matrix to multiply the new geometry with</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">calc_uvs</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – calculate default UVs</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>verts</literal>: output verts</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'create_monkey()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.create_monkey',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="create_monkey" ids="bmesh.ops.create_monkey" module="bmesh.ops" names="bmesh.ops.create_monkey"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">create_monkey</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">matrix</desc_parameter><desc_parameter xml:space="preserve">calc_uvs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Create Suzanne.</paragraph>
                    <paragraph>Creates a monkey (standard blender primitive).</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">matrix</literal_strong> (<reference internal="True" reftitle="mathutils.Matrix" refuri="mathutils#mathutils.Matrix"><literal classes="xref py py-class">mathutils.Matrix</literal></reference>) – matrix to multiply the new geometry with</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">calc_uvs</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – calculate default UVs</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>verts</literal>: output verts</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'create_cone()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.create_cone',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="create_cone" ids="bmesh.ops.create_cone" module="bmesh.ops" names="bmesh.ops.create_cone"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">create_cone</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">cap_ends</desc_parameter><desc_parameter xml:space="preserve">cap_tris</desc_parameter><desc_parameter xml:space="preserve">segments</desc_parameter><desc_parameter xml:space="preserve">diameter1</desc_parameter><desc_parameter xml:space="preserve">diameter2</desc_parameter><desc_parameter xml:space="preserve">depth</desc_parameter><desc_parameter xml:space="preserve">matrix</desc_parameter><desc_parameter xml:space="preserve">calc_uvs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Create Cone.</paragraph>
                    <paragraph>Creates a cone with variable depth at both ends</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">cap_ends</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – whether or not to fill in the ends with faces</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">cap_tris</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – fill ends with triangles instead of ngons</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">segments</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">diameter1</literal_strong> (<literal_emphasis>float</literal_emphasis>) – diameter of one end</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">diameter2</literal_strong> (<literal_emphasis>float</literal_emphasis>) – diameter of the opposite</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">depth</literal_strong> (<literal_emphasis>float</literal_emphasis>) – distance between ends</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">matrix</literal_strong> (<reference internal="True" reftitle="mathutils.Matrix" refuri="mathutils#mathutils.Matrix"><literal classes="xref py py-class">mathutils.Matrix</literal></reference>) – matrix to multiply the new geometry with</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">calc_uvs</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – calculate default UVs</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>verts</literal>: output verts</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'create_circle()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.create_circle',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="create_circle" ids="bmesh.ops.create_circle" module="bmesh.ops" names="bmesh.ops.create_circle"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">create_circle</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">cap_ends</desc_parameter><desc_parameter xml:space="preserve">cap_tris</desc_parameter><desc_parameter xml:space="preserve">segments</desc_parameter><desc_parameter xml:space="preserve">radius</desc_parameter><desc_parameter xml:space="preserve">matrix</desc_parameter><desc_parameter xml:space="preserve">calc_uvs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Creates a Circle.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">cap_ends</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – whether or not to fill in the ends with faces</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">cap_tris</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – fill ends with triangles instead of ngons</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">segments</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">radius</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Radius of the circle.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">matrix</literal_strong> (<reference internal="True" reftitle="mathutils.Matrix" refuri="mathutils#mathutils.Matrix"><literal classes="xref py py-class">mathutils.Matrix</literal></reference>) – matrix to multiply the new geometry with</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">calc_uvs</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – calculate default UVs</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>verts</literal>: output verts</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'create_cube()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.create_cube',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="create_cube" ids="bmesh.ops.create_cube" module="bmesh.ops" names="bmesh.ops.create_cube"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">create_cube</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">size</desc_parameter><desc_parameter xml:space="preserve">matrix</desc_parameter><desc_parameter xml:space="preserve">calc_uvs</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Create Cube</paragraph>
                    <paragraph>Creates a cube.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">size</literal_strong> (<literal_emphasis>float</literal_emphasis>) – size of the cube</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">matrix</literal_strong> (<reference internal="True" reftitle="mathutils.Matrix" refuri="mathutils#mathutils.Matrix"><literal classes="xref py py-class">mathutils.Matrix</literal></reference>) – matrix to multiply the new geometry with</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">calc_uvs</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – calculate default UVs</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>verts</literal>: output verts</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'bevel()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.bevel',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="bevel" ids="bmesh.ops.bevel" module="bmesh.ops" names="bmesh.ops.bevel"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">bevel</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">geom</desc_parameter><desc_parameter xml:space="preserve">offset</desc_parameter><desc_parameter xml:space="preserve">offset_type</desc_parameter><desc_parameter xml:space="preserve">segments</desc_parameter><desc_parameter xml:space="preserve">profile</desc_parameter><desc_parameter xml:space="preserve">vertex_only</desc_parameter><desc_parameter xml:space="preserve">clamp_overlap</desc_parameter><desc_parameter xml:space="preserve">material</desc_parameter><desc_parameter xml:space="preserve">loop_slide</desc_parameter><desc_parameter xml:space="preserve">mark_seam</desc_parameter><desc_parameter xml:space="preserve">mark_sharp</desc_parameter><desc_parameter xml:space="preserve">strength</desc_parameter><desc_parameter xml:space="preserve">hnmode</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Bevel.</paragraph>
                    <paragraph>Bevels edges and vertices</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">geom</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – input edges and vertices</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">offset</literal_strong> (<literal_emphasis>float</literal_emphasis>) – amount to offset beveled edge</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">offset_type</literal_strong> (<literal_emphasis>enum in</literal_emphasis><literal_emphasis> [</literal_emphasis><literal_emphasis>'OFFSET'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'WIDTH'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'DEPTH'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'PERCENT'</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>default 'OFFSET'</literal_emphasis>) – how to measure the offset</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">segments</literal_strong> (<literal_emphasis>int</literal_emphasis>) – number of segments in bevel</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">profile</literal_strong> (<literal_emphasis>float</literal_emphasis>) – profile shape, 0-&gt;1 (.5=&gt;round)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">vertex_only</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – only bevel vertices, not edges</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">clamp_overlap</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – do not allow beveled edges/vertices to overlap each other</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">material</literal_strong> (<literal_emphasis>int</literal_emphasis>) – material for bevel faces, -1 means get from adjacent faces</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">loop_slide</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – prefer to slide along edges to having even widths</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">mark_seam</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – extend edge data to allow seams to run across bevels</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">mark_sharp</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – extend edge data to allow sharp edges to run across bevels</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">strength</literal_strong> (<literal_emphasis>float</literal_emphasis>) – strength of calculated normal in range (0, 1) for custom clnors</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">hnmode</literal_strong> (<literal_emphasis>enum in</literal_emphasis><literal_emphasis> [</literal_emphasis><literal_emphasis>'NONE'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'FACE'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'ADJACENT'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'FIXED_NORMAL_SHADING'</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>default 'NONE'</literal_emphasis>) – harden normals mode used in bevel, if enabled</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>faces</literal>: output faces</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item><list_item><paragraph><literal>edges</literal>: output edges</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)</paragraph></list_item><list_item><paragraph><literal>verts</literal>: output verts</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)</paragraph></list_item><list_item><paragraph><literal>normals</literal>: output normals per vertex for beveled edges</paragraph><paragraph><strong>type</strong> dict mapping vert/edge/face types to unknown internal data, not compatible with python</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'beautify_fill()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.beautify_fill',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="beautify_fill" ids="bmesh.ops.beautify_fill" module="bmesh.ops" names="bmesh.ops.beautify_fill"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">beautify_fill</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">faces</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter><desc_parameter xml:space="preserve">use_restrict_tag</desc_parameter><desc_parameter xml:space="preserve">method</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Beautify Fill.</paragraph>
                    <paragraph>Rotate edges to create more evenly spaced triangles.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – input faces</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)) – edges that can be flipped</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_restrict_tag</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – restrict edge rotation to mixed tagged vertices</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">method</literal_strong> (<literal_emphasis>enum in</literal_emphasis><literal_emphasis> [</literal_emphasis><literal_emphasis>'AREA'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'ANGLE'</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>default 'AREA'</literal_emphasis>) – method to define what is beautiful</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>geom</literal>: new flipped faces and edges</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'triangle_fill()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.triangle_fill',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="triangle_fill" ids="bmesh.ops.triangle_fill" module="bmesh.ops" names="bmesh.ops.triangle_fill"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">triangle_fill</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">use_beauty</desc_parameter><desc_parameter xml:space="preserve">use_dissolve</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter><desc_parameter xml:space="preserve">normal</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Triangle Fill.</paragraph>
                    <paragraph>Fill edges with triangles</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_beauty</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_dissolve</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – dissolve resulting faces</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)) – input edges</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">normal</literal_strong> (<reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference> or any sequence of 3 floats) – optionally pass the fill normal to use</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>geom</literal>: new faces and edges</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'solidify()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.solidify',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="solidify" ids="bmesh.ops.solidify" module="bmesh.ops" names="bmesh.ops.solidify"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">solidify</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">geom</desc_parameter><desc_parameter xml:space="preserve">thickness</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Solidify.</paragraph>
                    <paragraph>Turns a mesh into a shell with thickness</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">geom</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">thickness</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>geom</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'inset_individual()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.inset_individual',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="inset_individual" ids="bmesh.ops.inset_individual" module="bmesh.ops" names="bmesh.ops.inset_individual"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">inset_individual</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">faces</desc_parameter><desc_parameter xml:space="preserve">thickness</desc_parameter><desc_parameter xml:space="preserve">depth</desc_parameter><desc_parameter xml:space="preserve">use_even_offset</desc_parameter><desc_parameter xml:space="preserve">use_interpolate</desc_parameter><desc_parameter xml:space="preserve">use_relative_offset</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Face Inset (Individual).</paragraph>
                    <paragraph>Insets individual faces.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – input faces</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">thickness</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">depth</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_even_offset</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_interpolate</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_relative_offset</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>faces</literal>: output faces</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'inset_region()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.inset_region',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="inset_region" ids="bmesh.ops.inset_region" module="bmesh.ops" names="bmesh.ops.inset_region"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">inset_region</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">faces</desc_parameter><desc_parameter xml:space="preserve">faces_exclude</desc_parameter><desc_parameter xml:space="preserve">use_boundary</desc_parameter><desc_parameter xml:space="preserve">use_even_offset</desc_parameter><desc_parameter xml:space="preserve">use_interpolate</desc_parameter><desc_parameter xml:space="preserve">use_relative_offset</desc_parameter><desc_parameter xml:space="preserve">use_edge_rail</desc_parameter><desc_parameter xml:space="preserve">thickness</desc_parameter><desc_parameter xml:space="preserve">depth</desc_parameter><desc_parameter xml:space="preserve">use_outset</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Face Inset (Regions).</paragraph>
                    <paragraph>Inset or outset face regions.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – input faces</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces_exclude</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_boundary</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_even_offset</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_interpolate</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_relative_offset</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_edge_rail</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">thickness</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">depth</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_outset</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>faces</literal>: output faces</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'offset_edgeloops()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.offset_edgeloops',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="offset_edgeloops" ids="bmesh.ops.offset_edgeloops" module="bmesh.ops" names="bmesh.ops.offset_edgeloops"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">offset_edgeloops</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">edges</desc_parameter><desc_parameter xml:space="preserve">use_cap_endpoint</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Edgeloop Offset.</paragraph>
                    <paragraph>Creates edge loops based on simple edge-outset method.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">edges</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)) – input faces</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_cap_endpoint</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>edges</literal>: output faces</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'wireframe()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.wireframe',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="wireframe" ids="bmesh.ops.wireframe" module="bmesh.ops" names="bmesh.ops.wireframe"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">wireframe</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">faces</desc_parameter><desc_parameter xml:space="preserve">thickness</desc_parameter><desc_parameter xml:space="preserve">offset</desc_parameter><desc_parameter xml:space="preserve">use_replace</desc_parameter><desc_parameter xml:space="preserve">use_boundary</desc_parameter><desc_parameter xml:space="preserve">use_even_offset</desc_parameter><desc_parameter xml:space="preserve">use_crease</desc_parameter><desc_parameter xml:space="preserve">crease_weight</desc_parameter><desc_parameter xml:space="preserve">use_relative_offset</desc_parameter><desc_parameter xml:space="preserve">material_offset</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Wire Frame.</paragraph>
                    <paragraph>Makes a wire-frame copy of faces.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – input faces</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">thickness</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">offset</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_replace</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_boundary</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_even_offset</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_crease</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">crease_weight</literal_strong> (<literal_emphasis>float</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_relative_offset</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">material_offset</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>faces</literal>: output faces</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'poke()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.poke',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="poke" ids="bmesh.ops.poke" module="bmesh.ops" names="bmesh.ops.poke"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">poke</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">faces</desc_parameter><desc_parameter xml:space="preserve">offset</desc_parameter><desc_parameter xml:space="preserve">center_mode</desc_parameter><desc_parameter xml:space="preserve">use_relative_offset</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Pokes a face.</paragraph>
                    <paragraph>Splits a face into a triangle fan.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">faces</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – input faces</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">offset</literal_strong> (<literal_emphasis>float</literal_emphasis>) – center vertex offset along normal</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">center_mode</literal_strong> (<literal_emphasis>enum in</literal_emphasis><literal_emphasis> [</literal_emphasis><literal_emphasis>'MEAN_WEIGHTED'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'MEAN'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'BOUNDS'</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>default 'MEAN_WEIGHTED'</literal_emphasis>) – calculation mode for center vertex</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_relative_offset</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – apply offset</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>verts</literal>: output verts</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>)</paragraph></list_item><list_item><paragraph><literal>faces</literal>: output faces</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'convex_hull()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.convex_hull',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="convex_hull" ids="bmesh.ops.convex_hull" module="bmesh.ops" names="bmesh.ops.convex_hull"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">convex_hull</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">input</desc_parameter><desc_parameter xml:space="preserve">use_existing_faces</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Convex Hull</paragraph>
                    <paragraph>Builds a convex hull from the vertices in ‘input’.</paragraph>
                    <paragraph>If ‘use_existing_faces’ is true, the hull will not output triangles
                        that are covered by a pre-existing face.</paragraph>
                    <paragraph>All hull vertices, faces, and edges are added to ‘geom.out’. Any
                        input elements that end up inside the hull (i.e. are not used by an
                        output face) are added to the ‘interior_geom’ slot. The
                        ‘unused_geom’ slot will contain all interior geometry that is
                        completely unused. Lastly, ‘holes_geom’ contains edges and faces
                        that were in the input and are part of the hull.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">input</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">use_existing_faces</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Undocumented.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>geom</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item><list_item><paragraph><literal>geom_interior</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item><list_item><paragraph><literal>geom_unused</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item><list_item><paragraph><literal>geom_holes</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
            <index entries="['single',\ u'symmetrize()\ (in\ module\ bmesh.ops)',\ u'bmesh.ops.symmetrize',\ '',\ None]"></index>
            <desc desctype="function" domain="py" noindex="False" objtype="function">
                <desc_signature class="" first="False" fullname="symmetrize" ids="bmesh.ops.symmetrize" module="bmesh.ops" names="bmesh.ops.symmetrize"><desc_addname xml:space="preserve">bmesh.ops.</desc_addname><desc_name xml:space="preserve">symmetrize</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bm</desc_parameter><desc_parameter xml:space="preserve">input</desc_parameter><desc_parameter xml:space="preserve">direction</desc_parameter><desc_parameter xml:space="preserve">dist</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Symmetrize.</paragraph>
                    <paragraph>Makes the mesh elements in the “input” slot symmetrical. Unlike
                        normal mirroring, it only copies in one direction, as specified by
                        the “direction” slot. The edges and faces that cross the plane of
                        symmetry are split as needed to enforce symmetry.</paragraph>
                    <paragraph>All new vertices, edges, and faces are added to the “geom.out” slot.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Parameters</field_name>
                            <field_body>
                                <bullet_list>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">bm</literal_strong> (<reference internal="True" reftitle="bmesh.types.BMesh" refuri="bmesh.types#bmesh.types.BMesh"><literal classes="xref py py-class">bmesh.types.BMesh</literal></reference>) – The bmesh to operate on.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">input</literal_strong> (list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)) – Undocumented.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">direction</literal_strong> (<literal_emphasis>enum in</literal_emphasis><literal_emphasis> [</literal_emphasis><literal_emphasis>'X'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'Y'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'Z'</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>default 'X'</literal_emphasis>) – axis to use</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph><literal_strong refspecific="True">dist</literal_strong> (<literal_emphasis>float</literal_emphasis>) – minimum distance</paragraph>
                                    </list_item>
                                </bullet_list>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Returns</field_name>
                            <field_body>
                                <paragraph><bullet_list bullet="-"><list_item><paragraph><literal>geom</literal>:</paragraph><paragraph><strong>type</strong> list of (<reference internal="True" reftitle="bmesh.types.BMVert" refuri="bmesh.types#bmesh.types.BMVert"><literal classes="xref py py-class">bmesh.types.BMVert</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMEdge" refuri="bmesh.types#bmesh.types.BMEdge"><literal classes="xref py py-class">bmesh.types.BMEdge</literal></reference>, <reference internal="True" reftitle="bmesh.types.BMFace" refuri="bmesh.types#bmesh.types.BMFace"><literal classes="xref py py-class">bmesh.types.BMFace</literal></reference>)</paragraph></list_item></bullet_list></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>Return type</field_name>
                            <field_body>
                                <paragraph>dict with string keys</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </desc_content>
            </desc>
        </section>
    </section>
</document>
