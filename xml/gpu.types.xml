<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/gpu.types.rst">
    <section ids="module-gpu.types gpu-types-gpu-types" names="gpu\ types\ (gpu.types)">
        <title>GPU Types (gpu.types)</title>
        <index entries="['single',\ u'gpu.types\ (module)',\ u'module-gpu.types',\ '',\ None]"></index>
        <index entries="['single',\ u'GPUBatch\ (class\ in\ gpu.types)',\ u'gpu.types.GPUBatch',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="GPUBatch" ids="gpu.types.GPUBatch" module="gpu.types" names="gpu.types.GPUBatch"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">gpu.types.</desc_addname><desc_name xml:space="preserve">GPUBatch</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">type</desc_parameter><desc_parameter xml:space="preserve">buf</desc_parameter><desc_parameter xml:space="preserve">elem=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Reusable container for drawable geometry.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">type</literal_strong> (<title_reference>str</title_reference>) – One of these primitive types: {
                                        <title_reference>POINTS</title_reference>,
                                        <title_reference>LINES</title_reference>,
                                        <title_reference>TRIS</title_reference>,
                                        <title_reference>LINE_STRIP</title_reference>,
                                        <title_reference>LINE_LOOP</title_reference>,
                                        <title_reference>TRI_STRIP</title_reference>,
                                        <title_reference>TRI_FAN</title_reference>,
                                        <title_reference>LINES_ADJ</title_reference>,
                                        <title_reference>TRIS_ADJ</title_reference>,
                                        <title_reference>LINE_STRIP_ADJ</title_reference> }</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">buf</literal_strong> (<reference internal="True" refid="gpu.types.GPUVertBuf" reftitle="gpu.types.GPUVertBuf"><literal classes="xref py py-class">gpu.types.GPUVertBuf</literal></reference>) – Vertex buffer containing all or some of the attributes required for drawing.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">elem</literal_strong> (<reference internal="True" refid="gpu.types.GPUIndexBuf" reftitle="gpu.types.GPUIndexBuf"><literal classes="xref py py-class">gpu.types.GPUIndexBuf</literal></reference>) – An optional index buffer.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
                <index entries="['single',\ u'draw()\ (gpu.types.GPUBatch\ method)',\ u'gpu.types.GPUBatch.draw',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUBatch" first="False" fullname="GPUBatch.draw" ids="gpu.types.GPUBatch.draw" module="gpu.types" names="gpu.types.GPUBatch.draw"><desc_name xml:space="preserve">draw</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">program=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Run the drawing program with the parameters assigned to the batch.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">program</literal_strong> (<reference internal="True" refid="gpu.types.GPUShader" reftitle="gpu.types.GPUShader"><literal classes="xref py py-class">gpu.types.GPUShader</literal></reference>) – Program that performs the drawing operations.
                                        If <literal>None</literal> is passed, the last program setted to this batch will run.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'program_set()\ (gpu.types.GPUBatch\ method)',\ u'gpu.types.GPUBatch.program_set',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUBatch" first="False" fullname="GPUBatch.program_set" ids="gpu.types.GPUBatch.program_set" module="gpu.types" names="gpu.types.GPUBatch.program_set"><desc_name xml:space="preserve">program_set</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">program</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Assign a shader to this batch that will be used for drawing when not overwritten later.
                            Note: This method has to be called in the draw context that the batch will be drawn in.
                            This function does not need to be called when you always set the shader when calling <title_reference>batch.draw</title_reference>.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">program</literal_strong> (<reference internal="True" refid="gpu.types.GPUShader" reftitle="gpu.types.GPUShader"><literal classes="xref py py-class">gpu.types.GPUShader</literal></reference>) – The program/shader the batch will use in future draw calls.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'vertbuf_add()\ (gpu.types.GPUBatch\ method)',\ u'gpu.types.GPUBatch.vertbuf_add',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUBatch" first="False" fullname="GPUBatch.vertbuf_add" ids="gpu.types.GPUBatch.vertbuf_add" module="gpu.types" names="gpu.types.GPUBatch.vertbuf_add"><desc_name xml:space="preserve">vertbuf_add</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">buf</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Add another vertex buffer to the Batch.
                            It is not possible to add more vertices to the batch using this method.
                            Instead it can be used to add more attributes to the existing vertices.
                            A good use case would be when you have a separate vertex buffer for vertex positions and vertex normals.
                            Current a batch can have at most 3 vertex buffers.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">buf</literal_strong> (<reference internal="True" refid="gpu.types.GPUVertBuf" reftitle="gpu.types.GPUVertBuf"><literal classes="xref py py-class">gpu.types.GPUVertBuf</literal></reference>) – The vertex buffer that will be added to the batch.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'GPUIndexBuf\ (class\ in\ gpu.types)',\ u'gpu.types.GPUIndexBuf',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="GPUIndexBuf" ids="gpu.types.GPUIndexBuf" module="gpu.types" names="gpu.types.GPUIndexBuf"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">gpu.types.</desc_addname><desc_name xml:space="preserve">GPUIndexBuf</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">type</desc_parameter><desc_parameter xml:space="preserve">seq</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Contains an index buffer.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">type</literal_strong> (<title_reference>str</title_reference>) – One of these primitive types: {
                                        <title_reference>POINTS</title_reference>,
                                        <title_reference>LINES</title_reference>,
                                        <title_reference>TRIS</title_reference>,
                                        <title_reference>LINE_STRIP_ADJ</title_reference> }</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">seq</literal_strong> (<literal_emphasis>1D</literal_emphasis><literal_emphasis> or </literal_emphasis><literal_emphasis>2D sequence</literal_emphasis>) – Indices this index buffer will contain.
                                        Whether a 1D or 2D sequence is required depends on the type.
                                        Optionally the sequence can support the buffer protocol.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ u'GPUOffScreen\ (class\ in\ gpu.types)',\ u'gpu.types.GPUOffScreen',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="GPUOffScreen" ids="gpu.types.GPUOffScreen" module="gpu.types" names="gpu.types.GPUOffScreen"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">gpu.types.</desc_addname><desc_name xml:space="preserve">GPUOffScreen</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">width</desc_parameter><desc_parameter xml:space="preserve">height</desc_parameter><desc_parameter xml:space="preserve">samples=0</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>This object gives access to off screen buffers.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">width</literal_strong> (<title_reference>int</title_reference>) – Horizontal dimension of the buffer.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">height</literal_strong> (<title_reference>int</title_reference>) – Vertical dimension of the buffer.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">samples</literal_strong> (<title_reference>int</title_reference>) – OpenGL samples to use for MSAA or zero to disable.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
                <index entries="['single',\ u'bind()\ (gpu.types.GPUOffScreen\ method)',\ u'gpu.types.GPUOffScreen.bind',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUOffScreen" first="False" fullname="GPUOffScreen.bind" ids="gpu.types.GPUOffScreen.bind" module="gpu.types" names="gpu.types.GPUOffScreen.bind"><desc_name xml:space="preserve">bind</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">save=True</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Bind the offscreen object.
                            To make sure that the offscreen gets unbind whether an exception occurs or not, pack it into a <title_reference>with</title_reference> statement.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">save</literal_strong> (<title_reference>bool</title_reference>) – Save the current OpenGL state, so that it can be restored when unbinding.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'draw_view3d()\ (gpu.types.GPUOffScreen\ method)',\ u'gpu.types.GPUOffScreen.draw_view3d',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUOffScreen" first="False" fullname="GPUOffScreen.draw_view3d" ids="gpu.types.GPUOffScreen.draw_view3d" module="gpu.types" names="gpu.types.GPUOffScreen.draw_view3d"><desc_name xml:space="preserve">draw_view3d</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">scene</desc_parameter><desc_parameter xml:space="preserve">view3d</desc_parameter><desc_parameter xml:space="preserve">region</desc_parameter><desc_parameter xml:space="preserve">view_matrix</desc_parameter><desc_parameter xml:space="preserve">projection_matrix</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Draw the 3d viewport in the offscreen object.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">scene</literal_strong> (<reference internal="True" reftitle="bpy.types.Scene" refuri="bpy.types.Scene#bpy.types.Scene"><literal classes="xref py py-class">bpy.types.Scene</literal></reference>) – Scene to draw.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">view_layer</literal_strong> (<reference internal="True" reftitle="bpy.types.ViewLayer" refuri="bpy.types.ViewLayer#bpy.types.ViewLayer"><literal classes="xref py py-class">bpy.types.ViewLayer</literal></reference>) – View layer to draw.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">view3d</literal_strong> (<reference internal="True" reftitle="bpy.types.SpaceView3D" refuri="bpy.types.SpaceView3D#bpy.types.SpaceView3D"><literal classes="xref py py-class">bpy.types.SpaceView3D</literal></reference>) – 3D View to get the drawing settings from.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">region</literal_strong> (<reference internal="True" reftitle="bpy.types.Region" refuri="bpy.types.Region#bpy.types.Region"><literal classes="xref py py-class">bpy.types.Region</literal></reference>) – Region of the 3D View (required as temporary draw target).</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">view_matrix</literal_strong> (<reference internal="True" reftitle="mathutils.Matrix" refuri="mathutils#mathutils.Matrix"><literal classes="xref py py-class">mathutils.Matrix</literal></reference>) – View Matrix (e.g. <literal>camera.matrix_world.inverted()</literal>).</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">projection_matrix</literal_strong> (<reference internal="True" reftitle="mathutils.Matrix" refuri="mathutils#mathutils.Matrix"><literal classes="xref py py-class">mathutils.Matrix</literal></reference>) – Projection Matrix (e.g. <literal>camera.calc_matrix_camera(...)</literal>).</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'free()\ (gpu.types.GPUOffScreen\ method)',\ u'gpu.types.GPUOffScreen.free',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUOffScreen" first="False" fullname="GPUOffScreen.free" ids="gpu.types.GPUOffScreen.free" module="gpu.types" names="gpu.types.GPUOffScreen.free"><desc_name xml:space="preserve">free</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Free the offscreen object.
                            The framebuffer, texture and render objects will no longer be accessible.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'unbind()\ (gpu.types.GPUOffScreen\ method)',\ u'gpu.types.GPUOffScreen.unbind',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUOffScreen" first="False" fullname="GPUOffScreen.unbind" ids="gpu.types.GPUOffScreen.unbind" module="gpu.types" names="gpu.types.GPUOffScreen.unbind"><desc_name xml:space="preserve">unbind</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">restore=True</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Unbind the offscreen object.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">restore</literal_strong> (<title_reference>bool</title_reference>) – Restore the OpenGL state, can only be used when the state has been saved before.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'color_texture\ (gpu.types.GPUOffScreen\ attribute)',\ u'gpu.types.GPUOffScreen.color_texture',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="GPUOffScreen" first="False" fullname="GPUOffScreen.color_texture" ids="gpu.types.GPUOffScreen.color_texture" module="gpu.types" names="gpu.types.GPUOffScreen.color_texture"><desc_name xml:space="preserve">color_texture</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>OpenGL bindcode for the color texture.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><title_reference>int</title_reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'height\ (gpu.types.GPUOffScreen\ attribute)',\ u'gpu.types.GPUOffScreen.height',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="GPUOffScreen" first="False" fullname="GPUOffScreen.height" ids="gpu.types.GPUOffScreen.height" module="gpu.types" names="gpu.types.GPUOffScreen.height"><desc_name xml:space="preserve">height</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Height of the texture.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><title_reference>int</title_reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'width\ (gpu.types.GPUOffScreen\ attribute)',\ u'gpu.types.GPUOffScreen.width',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="GPUOffScreen" first="False" fullname="GPUOffScreen.width" ids="gpu.types.GPUOffScreen.width" module="gpu.types" names="gpu.types.GPUOffScreen.width"><desc_name xml:space="preserve">width</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Width of the texture.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph><title_reference>int</title_reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'GPUShader\ (class\ in\ gpu.types)',\ u'gpu.types.GPUShader',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="GPUShader" ids="gpu.types.GPUShader" module="gpu.types" names="gpu.types.GPUShader"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">gpu.types.</desc_addname><desc_name xml:space="preserve">GPUShader</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">vertexcode</desc_parameter><desc_parameter xml:space="preserve">fragcode</desc_parameter><desc_parameter xml:space="preserve">geocode=None</desc_parameter><desc_parameter xml:space="preserve">libcode=None</desc_parameter><desc_parameter xml:space="preserve">defines=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>GPUShader combines multiple GLSL shaders into a program used for drawing.
                    It must contain a vertex and fragment shaders, with an optional geometry shader.</paragraph>
                <paragraph>The GLSL #version directive is automatically included at the top of shaders, and set to 330.
                    Some preprocessor directives are automatically added according to the Operating System or availability:
                    <literal>GPU_ATI</literal>, <literal>GPU_NVIDIA</literal> and <literal>GPU_INTEL</literal>.</paragraph>
                <paragraph>The following extensions are enabled by default if supported by the GPU:
                    <literal>GL_ARB_texture_gather</literal> and <literal>GL_ARB_texture_query_lod</literal>.</paragraph>
                <paragraph>To debug shaders, use the –debug-gpu-shaders command line option   to see full GLSL shader compilation and linking errors.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">vertexcode</literal_strong> (<literal_emphasis>str</literal_emphasis>) – Vertex shader code.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">fragcode</literal_strong> – Fragment shader code.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">geocode</literal_strong> – Geometry shader code.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">libcode</literal_strong> – Code with functions and presets to be shared between shaders.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">defines</literal_strong> – Preprocessor directives.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
                <index entries="['single',\ u'attr_from_name()\ (gpu.types.GPUShader\ method)',\ u'gpu.types.GPUShader.attr_from_name',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.attr_from_name" ids="gpu.types.GPUShader.attr_from_name" module="gpu.types" names="gpu.types.GPUShader.attr_from_name"><desc_name xml:space="preserve">attr_from_name</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get attribute location by name.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>str</literal_emphasis>) – The name of the attribute variable whose location is to be queried.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The location of an attribute variable.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'bind()\ (gpu.types.GPUShader\ method)',\ u'gpu.types.GPUShader.bind',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.bind" ids="gpu.types.GPUShader.bind" module="gpu.types" names="gpu.types.GPUShader.bind"><desc_name xml:space="preserve">bind</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Bind the shader object. Required to be able to change uniforms of this shader.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'calc_format()\ (gpu.types.GPUShader\ method)',\ u'gpu.types.GPUShader.calc_format',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.calc_format" ids="gpu.types.GPUShader.calc_format" module="gpu.types" names="gpu.types.GPUShader.calc_format"><desc_name xml:space="preserve">calc_format</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Build a new format based on the attributes of the shader.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>vertex attribute format for the shader</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>GPUVertFormat</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'uniform_block_from_name()\ (gpu.types.GPUShader\ method)',\ u'gpu.types.GPUShader.uniform_block_from_name',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.uniform_block_from_name" ids="gpu.types.GPUShader.uniform_block_from_name" module="gpu.types" names="gpu.types.GPUShader.uniform_block_from_name"><desc_name xml:space="preserve">uniform_block_from_name</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get uniform block location by name.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">name</literal_strong> (<title_reference>str</title_reference>) – Name of the uniform block variable whose location is to be queried.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The location of the uniform block variable.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><title_reference>int</title_reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'uniform_bool()\ (gpu.types.GPUShader\ method)',\ u'gpu.types.GPUShader.uniform_bool',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.uniform_bool" ids="gpu.types.GPUShader.uniform_bool" module="gpu.types" names="gpu.types.GPUShader.uniform_bool"><desc_name xml:space="preserve">uniform_bool</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">seq</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Specify the value of a uniform variable for the current program object.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>str</literal_emphasis>) – Name of the uniform variable whose value is to be changed.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">seq</literal_strong> (<literal_emphasis>sequence of bools</literal_emphasis>) – Value that will be used to update the specified uniform variable.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'uniform_float()\ (gpu.types.GPUShader\ method)',\ u'gpu.types.GPUShader.uniform_float',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.uniform_float" ids="gpu.types.GPUShader.uniform_float" module="gpu.types" names="gpu.types.GPUShader.uniform_float"><desc_name xml:space="preserve">uniform_float</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">value</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Specify the value of a uniform variable for the current program object.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>str</literal_emphasis>) – Name of the uniform variable whose value is to be changed.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">value</literal_strong> (<literal_emphasis>single number</literal_emphasis><literal_emphasis> or </literal_emphasis><literal_emphasis>sequence of numbers</literal_emphasis>) – Value that will be used to update the specified uniform variable.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'uniform_from_name()\ (gpu.types.GPUShader\ method)',\ u'gpu.types.GPUShader.uniform_from_name',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.uniform_from_name" ids="gpu.types.GPUShader.uniform_from_name" module="gpu.types" names="gpu.types.GPUShader.uniform_from_name"><desc_name xml:space="preserve">uniform_from_name</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get uniform location by name.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">name</literal_strong> (<title_reference>str</title_reference>) – Name of the uniform variable whose location is to be queried.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>Location of the uniform variable.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><title_reference>int</title_reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'uniform_int()\ (gpu.types.GPUShader\ method)',\ u'gpu.types.GPUShader.uniform_int',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.uniform_int" ids="gpu.types.GPUShader.uniform_int" module="gpu.types" names="gpu.types.GPUShader.uniform_int"><desc_name xml:space="preserve">uniform_int</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter><desc_parameter xml:space="preserve">seq</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Specify the value of a uniform variable for the current program object.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>str</literal_emphasis>) – name of the uniform variable whose value is to be changed.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">seq</literal_strong> (<literal_emphasis>sequence of numbers</literal_emphasis>) – Value that will be used to update the specified uniform variable.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'uniform_vector_float()\ (gpu.types.GPUShader\ method)',\ u'gpu.types.GPUShader.uniform_vector_float',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.uniform_vector_float" ids="gpu.types.GPUShader.uniform_vector_float" module="gpu.types" names="gpu.types.GPUShader.uniform_vector_float"><desc_name xml:space="preserve">uniform_vector_float</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">location</desc_parameter><desc_parameter xml:space="preserve">buffer</desc_parameter><desc_parameter xml:space="preserve">length</desc_parameter><desc_parameter xml:space="preserve">count</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Set the buffer to fill the uniform.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">location</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Location of the uniform variable to be modified.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">buffer</literal_strong> (<literal_emphasis>sequence of floats</literal_emphasis>) – The data that should be set. Can support the buffer protocol.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">length</literal_strong> (<literal_emphasis>int</literal_emphasis>) – <paragraph>Size of the uniform data type:</paragraph><bullet_list bullet="-"><list_item><paragraph>1: float</paragraph></list_item><list_item><paragraph>2: vec2 or float[2]</paragraph></list_item><list_item><paragraph>3: vec3 or float[3]</paragraph></list_item><list_item><paragraph>4: vec4 or float[4]</paragraph></list_item><list_item><paragraph>9: mat3</paragraph></list_item><list_item><paragraph>16: mat4</paragraph></list_item></bullet_list></paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">count</literal_strong> (<literal_emphasis>int</literal_emphasis>) – Specifies the number of elements, vector or matrices that are to be modified.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'uniform_vector_int()\ (gpu.types.GPUShader\ method)',\ u'gpu.types.GPUShader.uniform_vector_int',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.uniform_vector_int" ids="gpu.types.GPUShader.uniform_vector_int" module="gpu.types" names="gpu.types.GPUShader.uniform_vector_int"><desc_name xml:space="preserve">uniform_vector_int</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">location</desc_parameter><desc_parameter xml:space="preserve">buffer</desc_parameter><desc_parameter xml:space="preserve">length</desc_parameter><desc_parameter xml:space="preserve">count</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>See GPUShader.uniform_vector_float(…) description.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'program\ (gpu.types.GPUShader\ attribute)',\ u'gpu.types.GPUShader.program',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.program" ids="gpu.types.GPUShader.program" module="gpu.types" names="gpu.types.GPUShader.program"><desc_name xml:space="preserve">program</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>The name of the program object for use by the OpenGL API (read-only).</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'GPUVertBuf\ (class\ in\ gpu.types)',\ u'gpu.types.GPUVertBuf',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="GPUVertBuf" ids="gpu.types.GPUVertBuf" module="gpu.types" names="gpu.types.GPUVertBuf"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">gpu.types.</desc_addname><desc_name xml:space="preserve">GPUVertBuf</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">len</desc_parameter><desc_parameter xml:space="preserve">format</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Contains a VBO.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">len</literal_strong> – Amount of vertices that will fit into this buffer.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">format</literal_strong> – Vertex format.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                </field_list>
                <index entries="['single',\ u'attr_fill()\ (gpu.types.GPUVertBuf\ method)',\ u'gpu.types.GPUVertBuf.attr_fill',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUVertBuf" first="False" fullname="GPUVertBuf.attr_fill" ids="gpu.types.GPUVertBuf.attr_fill" module="gpu.types" names="gpu.types.GPUVertBuf.attr_fill"><desc_name xml:space="preserve">attr_fill</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">data</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Insert data into the buffer for a single attribute.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">id</literal_strong> (<literal_emphasis>int</literal_emphasis><literal_emphasis> or </literal_emphasis><literal_emphasis>str</literal_emphasis>) – Either the name or the id of the attribute.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">data</literal_strong> (<literal_emphasis>sequence of values</literal_emphasis><literal_emphasis> or </literal_emphasis><literal_emphasis>tuples</literal_emphasis>) – Sequence of data that should be stored in the buffer</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ u'GPUVertFormat\ (class\ in\ gpu.types)',\ u'gpu.types.GPUVertFormat',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="GPUVertFormat" ids="gpu.types.GPUVertFormat" module="gpu.types" names="gpu.types.GPUVertFormat"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">gpu.types.</desc_addname><desc_name xml:space="preserve">GPUVertFormat</desc_name></desc_signature>
            <desc_content>
                <paragraph>This object contains information about the structure of a vertex buffer.</paragraph>
                <index entries="['single',\ u'attr_add()\ (gpu.types.GPUVertFormat\ method)',\ u'gpu.types.GPUVertFormat.attr_add',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUVertFormat" first="False" fullname="GPUVertFormat.attr_add" ids="gpu.types.GPUVertFormat.attr_add" module="gpu.types" names="gpu.types.GPUVertFormat.attr_add"><desc_name xml:space="preserve">attr_add</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">comp_type</desc_parameter><desc_parameter xml:space="preserve">len</desc_parameter><desc_parameter xml:space="preserve">fetch_mode</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Add a new attribute to the format.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">id</literal_strong> (<literal_emphasis>str</literal_emphasis>) – Name the attribute. Often <title_reference>position</title_reference>, <title_reference>normal</title_reference>, …</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">comp_type</literal_strong> (<title_reference>str</title_reference>) – The data type that will be used store the value in memory.
                                                Possible values are <title_reference>I8</title_reference>, <title_reference>U8</title_reference>, <title_reference>I16</title_reference>, <title_reference>U16</title_reference>, <title_reference>I32</title_reference>, <title_reference>U32</title_reference>, <title_reference>F32</title_reference> and <title_reference>I10</title_reference>.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">len</literal_strong> (<literal_emphasis>int</literal_emphasis>) – How many individual values the attribute consists of (e.g. 2 for uv coordinates).</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">fetch_mode</literal_strong> (<title_reference>str</title_reference>) – How values from memory will be converted when used in the shader.
                                                This is mainly useful for memory optimizations when you want to store values with reduced precision.
                                                E.g. you can store a float in only 1 byte but it will be converted to a normal 4 byte float when used.
                                                Possible values are <title_reference>FLOAT</title_reference>, <title_reference>INT</title_reference>, <title_reference>INT_TO_FLOAT_UNIT</title_reference> and <title_reference>INT_TO_FLOAT</title_reference>.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
    </section>
</document>
