<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/bmesh.types.rst">
    <section ids="module-bmesh.types bmesh-types-bmesh-types" names="bmesh\ types\ (bmesh.types)">
        <title>BMesh Types (bmesh.types)</title>
        <index entries="['single',\ u'bmesh.types\ (module)',\ u'module-bmesh.types',\ '',\ None]"></index>
        <section ids="base-mesh-type" names="base\ mesh\ type">
            <title>Base Mesh Type</title>
            <index entries="['single',\ u'BMesh\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMesh',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMesh" ids="bmesh.types.BMesh" module="bmesh.types" names="bmesh.types.BMesh"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMesh</desc_name></desc_signature>
                <desc_content>
                    <paragraph>The BMesh data structure</paragraph>
                    <index entries="['single',\ u'calc_loop_triangles()\ (bmesh.types.BMesh\ method)',\ u'bmesh.types.BMesh.calc_loop_triangles',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMesh" first="False" fullname="BMesh.calc_loop_triangles" ids="bmesh.types.BMesh.calc_loop_triangles" module="bmesh.types" names="bmesh.types.BMesh.calc_loop_triangles"><desc_name xml:space="preserve">calc_loop_triangles</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Calculate triangle tessellation from quads/ngons.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The triangulated faces.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>list of <reference internal="True" refid="bmesh.types.BMLoop" reftitle="bmesh.types.BMLoop"><literal classes="xref py py-class">BMLoop</literal></reference> tuples</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'calc_volume()\ (bmesh.types.BMesh\ method)',\ u'bmesh.types.BMesh.calc_volume',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMesh" first="False" fullname="BMesh.calc_volume" ids="bmesh.types.BMesh.calc_volume" module="bmesh.types" names="bmesh.types.BMesh.calc_volume"><desc_name xml:space="preserve">calc_volume</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">signed=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Calculate mesh volume based on face normals.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">signed</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – when signed is true, negative values may be returned.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The volume of the mesh.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>float</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'clear()\ (bmesh.types.BMesh\ method)',\ u'bmesh.types.BMesh.clear',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMesh" first="False" fullname="BMesh.clear" ids="bmesh.types.BMesh.clear" module="bmesh.types" names="bmesh.types.BMesh.clear"><desc_name xml:space="preserve">clear</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Clear all mesh data.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'copy()\ (bmesh.types.BMesh\ method)',\ u'bmesh.types.BMesh.copy',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMesh" first="False" fullname="BMesh.copy" ids="bmesh.types.BMesh.copy" module="bmesh.types" names="bmesh.types.BMesh.copy"><desc_name xml:space="preserve">copy</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>A copy of this BMesh.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMesh" reftitle="bmesh.types.BMesh"><literal classes="xref py py-class">BMesh</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'free()\ (bmesh.types.BMesh\ method)',\ u'bmesh.types.BMesh.free',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMesh" first="False" fullname="BMesh.free" ids="bmesh.types.BMesh.free" module="bmesh.types" names="bmesh.types.BMesh.free"><desc_name xml:space="preserve">free</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Explicitly free the BMesh data from memory, causing exceptions on further access.</paragraph>
                            <note>
                                <paragraph>The BMesh is freed automatically, typically when the script finishes executing.
                                    However in some cases its hard to predict when this will be and its useful to
                                    explicitly free the data.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'from_mesh()\ (bmesh.types.BMesh\ method)',\ u'bmesh.types.BMesh.from_mesh',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMesh" first="False" fullname="BMesh.from_mesh" ids="bmesh.types.BMesh.from_mesh" module="bmesh.types" names="bmesh.types.BMesh.from_mesh"><desc_name xml:space="preserve">from_mesh</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">mesh</desc_parameter><desc_parameter xml:space="preserve">face_normals=True</desc_parameter><desc_parameter xml:space="preserve">use_shape_key=False</desc_parameter><desc_parameter xml:space="preserve">shape_key_index=0</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Initialize this bmesh from existing mesh datablock.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">mesh</literal_strong> (<literal classes="xref py py-class">Mesh</literal>) – The mesh data to load.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">use_shape_key</literal_strong> (<literal_emphasis>boolean</literal_emphasis>) – Use the locations from a shape key.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">shape_key_index</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The shape key index to use.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                            <note>
                                <paragraph>Multiple calls can be used to join multiple meshes.</paragraph>
                                <paragraph>Custom-data layers are only copied from <literal>mesh</literal> on initialization.
                                    Further calls will copy custom-data to matching layers, layers missing on the target mesh wont be added.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'from_object()\ (bmesh.types.BMesh\ method)',\ u'bmesh.types.BMesh.from_object',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMesh" first="False" fullname="BMesh.from_object" ids="bmesh.types.BMesh.from_object" module="bmesh.types" names="bmesh.types.BMesh.from_object"><desc_name xml:space="preserve">from_object</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">object</desc_parameter><desc_parameter xml:space="preserve">scene</desc_parameter><desc_parameter xml:space="preserve">deform=True</desc_parameter><desc_parameter xml:space="preserve">render=False</desc_parameter><desc_parameter xml:space="preserve">cage=False</desc_parameter><desc_parameter xml:space="preserve">face_normals=True</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Initialize this bmesh from existing object datablock (currently only meshes are supported).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">object</literal_strong> (<literal classes="xref py py-class">Object</literal>) – The object data to load.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">deform</literal_strong> (<literal_emphasis>boolean</literal_emphasis>) – Apply deformation modifiers.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">render</literal_strong> (<literal_emphasis>boolean</literal_emphasis>) – Use render settings.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">cage</literal_strong> (<literal_emphasis>boolean</literal_emphasis>) – Get the mesh as a deformed cage.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">face_normals</literal_strong> (<literal_emphasis>boolean</literal_emphasis>) – Calculate face normals.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'normal_update()\ (bmesh.types.BMesh\ method)',\ u'bmesh.types.BMesh.normal_update',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMesh" first="False" fullname="BMesh.normal_update" ids="bmesh.types.BMesh.normal_update" module="bmesh.types" names="bmesh.types.BMesh.normal_update"><desc_name xml:space="preserve">normal_update</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Update mesh normals.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'select_flush()\ (bmesh.types.BMesh\ method)',\ u'bmesh.types.BMesh.select_flush',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMesh" first="False" fullname="BMesh.select_flush" ids="bmesh.types.BMesh.select_flush" module="bmesh.types" names="bmesh.types.BMesh.select_flush"><desc_name xml:space="preserve">select_flush</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">select</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Flush selection, independent of the current selection mode.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">select</literal_strong> (<literal_emphasis>boolean</literal_emphasis>) – flush selection or de-selected elements.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'select_flush_mode()\ (bmesh.types.BMesh\ method)',\ u'bmesh.types.BMesh.select_flush_mode',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMesh" first="False" fullname="BMesh.select_flush_mode" ids="bmesh.types.BMesh.select_flush_mode" module="bmesh.types" names="bmesh.types.BMesh.select_flush_mode"><desc_name xml:space="preserve">select_flush_mode</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>flush selection based on the current mode current <reference internal="True" refid="bmesh.types.BMesh.select_mode" reftitle="bmesh.types.BMesh.select_mode"><literal classes="xref py py-class">BMesh.select_mode</literal></reference>.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'to_mesh()\ (bmesh.types.BMesh\ method)',\ u'bmesh.types.BMesh.to_mesh',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMesh" first="False" fullname="BMesh.to_mesh" ids="bmesh.types.BMesh.to_mesh" module="bmesh.types" names="bmesh.types.BMesh.to_mesh"><desc_name xml:space="preserve">to_mesh</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">mesh</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Writes this BMesh data into an existing Mesh datablock.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">mesh</literal_strong> (<literal classes="xref py py-class">Mesh</literal>) – The mesh data to write into.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'transform()\ (bmesh.types.BMesh\ method)',\ u'bmesh.types.BMesh.transform',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMesh" first="False" fullname="BMesh.transform" ids="bmesh.types.BMesh.transform" module="bmesh.types" names="bmesh.types.BMesh.transform"><desc_name xml:space="preserve">transform</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">matrix</desc_parameter><desc_parameter xml:space="preserve">filter=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Transform the mesh (optionally filtering flagged data only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">matrix</literal_strong> (4x4 <reference internal="True" reftitle="mathutils.Matrix" refuri="mathutils#mathutils.Matrix"><literal classes="xref py py-class">mathutils.Matrix</literal></reference>) – transform matrix.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">filter</literal_strong> (<literal_emphasis>set</literal_emphasis>) – set of values in (‘SELECT’, ‘HIDE’, ‘SEAM’, ‘SMOOTH’, ‘TAG’).</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'edges\ (bmesh.types.BMesh\ attribute)',\ u'bmesh.types.BMesh.edges',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMesh" first="False" fullname="BMesh.edges" ids="bmesh.types.BMesh.edges" module="bmesh.types" names="bmesh.types.BMesh.edges"><desc_name xml:space="preserve">edges</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>This meshes edge sequence (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMEdgeSeq" reftitle="bmesh.types.BMEdgeSeq"><literal classes="xref py py-class">BMEdgeSeq</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'faces\ (bmesh.types.BMesh\ attribute)',\ u'bmesh.types.BMesh.faces',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMesh" first="False" fullname="BMesh.faces" ids="bmesh.types.BMesh.faces" module="bmesh.types" names="bmesh.types.BMesh.faces"><desc_name xml:space="preserve">faces</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>This meshes face sequence (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMFaceSeq" reftitle="bmesh.types.BMFaceSeq"><literal classes="xref py py-class">BMFaceSeq</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_valid\ (bmesh.types.BMesh\ attribute)',\ u'bmesh.types.BMesh.is_valid',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMesh" first="False" fullname="BMesh.is_valid" ids="bmesh.types.BMesh.is_valid" module="bmesh.types" names="bmesh.types.BMesh.is_valid"><desc_name xml:space="preserve">is_valid</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>True when this element is valid (hasn’t been removed).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_wrapped\ (bmesh.types.BMesh\ attribute)',\ u'bmesh.types.BMesh.is_wrapped',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMesh" first="False" fullname="BMesh.is_wrapped" ids="bmesh.types.BMesh.is_wrapped" module="bmesh.types" names="bmesh.types.BMesh.is_wrapped"><desc_name xml:space="preserve">is_wrapped</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>True when this mesh is owned by blender (typically the editmode BMesh).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'loops\ (bmesh.types.BMesh\ attribute)',\ u'bmesh.types.BMesh.loops',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMesh" first="False" fullname="BMesh.loops" ids="bmesh.types.BMesh.loops" module="bmesh.types" names="bmesh.types.BMesh.loops"><desc_name xml:space="preserve">loops</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>This meshes loops (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMLoopSeq" reftitle="bmesh.types.BMLoopSeq"><literal classes="xref py py-class">BMLoopSeq</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <note>
                                <paragraph>Loops must be accessed via faces, this is only exposed for layer access.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'select_history\ (bmesh.types.BMesh\ attribute)',\ u'bmesh.types.BMesh.select_history',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMesh" first="False" fullname="BMesh.select_history" ids="bmesh.types.BMesh.select_history" module="bmesh.types" names="bmesh.types.BMesh.select_history"><desc_name xml:space="preserve">select_history</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Sequence of selected items (the last is displayed as active).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMEditSelSeq" reftitle="bmesh.types.BMEditSelSeq"><literal classes="xref py py-class">BMEditSelSeq</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'select_mode\ (bmesh.types.BMesh\ attribute)',\ u'bmesh.types.BMesh.select_mode',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMesh" first="False" fullname="BMesh.select_mode" ids="bmesh.types.BMesh.select_mode" module="bmesh.types" names="bmesh.types.BMesh.select_mode"><desc_name xml:space="preserve">select_mode</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The selection mode, values can be {‘VERT’, ‘EDGE’, ‘FACE’}, can’t be assigned an empty set.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>set</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'verts\ (bmesh.types.BMesh\ attribute)',\ u'bmesh.types.BMesh.verts',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMesh" first="False" fullname="BMesh.verts" ids="bmesh.types.BMesh.verts" module="bmesh.types" names="bmesh.types.BMesh.verts"><desc_name xml:space="preserve">verts</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>This meshes vert sequence (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMVertSeq" reftitle="bmesh.types.BMVertSeq"><literal classes="xref py py-class">BMVertSeq</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
        </section>
        <section ids="mesh-elements" names="mesh\ elements">
            <title>Mesh Elements</title>
            <index entries="['single',\ u'BMVert\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMVert',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMVert" ids="bmesh.types.BMVert" module="bmesh.types" names="bmesh.types.BMVert"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMVert</desc_name></desc_signature>
                <desc_content>
                    <paragraph>The BMesh vertex type</paragraph>
                    <index entries="['single',\ u'calc_edge_angle()\ (bmesh.types.BMVert\ method)',\ u'bmesh.types.BMVert.calc_edge_angle',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.calc_edge_angle" ids="bmesh.types.BMVert.calc_edge_angle" module="bmesh.types" names="bmesh.types.BMVert.calc_edge_angle"><desc_name xml:space="preserve">calc_edge_angle</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fallback=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return the angle between this vert’s two connected edges.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">fallback</literal_strong> (<literal_emphasis>any</literal_emphasis>) – return this when the vert doesn’t have 2 edges
                                            (instead of raising a <literal classes="xref py py-exc">ValueError</literal>).</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>Angle between edges in radians.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>float</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'calc_shell_factor()\ (bmesh.types.BMVert\ method)',\ u'bmesh.types.BMVert.calc_shell_factor',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.calc_shell_factor" ids="bmesh.types.BMVert.calc_shell_factor" module="bmesh.types" names="bmesh.types.BMVert.calc_shell_factor"><desc_name xml:space="preserve">calc_shell_factor</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return a multiplier calculated based on the sharpness of the vertex.
                                Where a flat surface gives 1.0, and higher values sharper edges.
                                This is used to maintain shell thickness when offsetting verts along their normals.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>offset multiplier</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>float</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'copy_from()\ (bmesh.types.BMVert\ method)',\ u'bmesh.types.BMVert.copy_from',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.copy_from" ids="bmesh.types.BMVert.copy_from" module="bmesh.types" names="bmesh.types.BMVert.copy_from"><desc_name xml:space="preserve">copy_from</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">other</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Copy values from another element of matching type.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'copy_from_face_interp()\ (bmesh.types.BMVert\ method)',\ u'bmesh.types.BMVert.copy_from_face_interp',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.copy_from_face_interp" ids="bmesh.types.BMVert.copy_from_face_interp" module="bmesh.types" names="bmesh.types.BMVert.copy_from_face_interp"><desc_name xml:space="preserve">copy_from_face_interp</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">face</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Interpolate the customdata from a face onto this loop (the loops vert should overlap the face).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">face</literal_strong> (<reference internal="True" refid="bmesh.types.BMFace" reftitle="bmesh.types.BMFace"><literal classes="xref py py-class">BMFace</literal></reference>) – The face to interpolate data from.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'copy_from_vert_interp()\ (bmesh.types.BMVert\ method)',\ u'bmesh.types.BMVert.copy_from_vert_interp',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.copy_from_vert_interp" ids="bmesh.types.BMVert.copy_from_vert_interp" module="bmesh.types" names="bmesh.types.BMVert.copy_from_vert_interp"><desc_name xml:space="preserve">copy_from_vert_interp</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">vert_pair</desc_parameter><desc_parameter xml:space="preserve">fac</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Interpolate the customdata from a vert between 2 other verts.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">vert_pair</literal_strong> (<reference internal="True" refid="bmesh.types.BMVert" reftitle="bmesh.types.BMVert"><literal classes="xref py py-class">BMVert</literal></reference>) – The vert to interpolate data from.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'hide_set()\ (bmesh.types.BMVert\ method)',\ u'bmesh.types.BMVert.hide_set',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.hide_set" ids="bmesh.types.BMVert.hide_set" module="bmesh.types" names="bmesh.types.BMVert.hide_set"><desc_name xml:space="preserve">hide_set</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">hide</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Set the hide state.
                                This is different from the <emphasis>hide</emphasis> attribute because it updates the selection and hide state of associated geometry.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">hide</literal_strong> (<literal_emphasis>boolean</literal_emphasis>) – Hidden or visible.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'normal_update()\ (bmesh.types.BMVert\ method)',\ u'bmesh.types.BMVert.normal_update',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.normal_update" ids="bmesh.types.BMVert.normal_update" module="bmesh.types" names="bmesh.types.BMVert.normal_update"><desc_name xml:space="preserve">normal_update</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Update vertex normal.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'select_set()\ (bmesh.types.BMVert\ method)',\ u'bmesh.types.BMVert.select_set',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.select_set" ids="bmesh.types.BMVert.select_set" module="bmesh.types" names="bmesh.types.BMVert.select_set"><desc_name xml:space="preserve">select_set</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">select</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Set the selection.
                                This is different from the <emphasis>select</emphasis> attribute because it updates the selection state of associated geometry.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">select</literal_strong> (<literal_emphasis>boolean</literal_emphasis>) – Select or de-select.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <note>
                                <paragraph>Currently this only flushes down, so selecting a face will select all its vertices but de-selecting a vertex       won’t de-select all the faces that use it, before finishing with a mesh typically flushing is still needed.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'co\ (bmesh.types.BMVert\ attribute)',\ u'bmesh.types.BMVert.co',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.co" ids="bmesh.types.BMVert.co" module="bmesh.types" names="bmesh.types.BMVert.co"><desc_name xml:space="preserve">co</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The coordinates for this vertex as a 3D, wrapped vector.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'hide\ (bmesh.types.BMVert\ attribute)',\ u'bmesh.types.BMVert.hide',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.hide" ids="bmesh.types.BMVert.hide" module="bmesh.types" names="bmesh.types.BMVert.hide"><desc_name xml:space="preserve">hide</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Hidden state of this element.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'index\ (bmesh.types.BMVert\ attribute)',\ u'bmesh.types.BMVert.index',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.index" ids="bmesh.types.BMVert.index" module="bmesh.types" names="bmesh.types.BMVert.index"><desc_name xml:space="preserve">index</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Index of this element.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>int</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <note>
                                <paragraph>This value is not necessarily valid, while editing the mesh it can become <emphasis>dirty</emphasis>.</paragraph>
                                <paragraph>It’s also possible to assign any number to this attribute for a scripts internal logic.</paragraph>
                                <paragraph>To ensure the value is up to date - see <reference internal="True" refid="bmesh.types.BMElemSeq.index_update" reftitle="bmesh.types.BMElemSeq.index_update"><literal classes="xref py py-class">BMElemSeq.index_update</literal></reference>.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_boundary\ (bmesh.types.BMVert\ attribute)',\ u'bmesh.types.BMVert.is_boundary',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.is_boundary" ids="bmesh.types.BMVert.is_boundary" module="bmesh.types" names="bmesh.types.BMVert.is_boundary"><desc_name xml:space="preserve">is_boundary</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>True when this vertex is connected to boundary edges (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_manifold\ (bmesh.types.BMVert\ attribute)',\ u'bmesh.types.BMVert.is_manifold',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.is_manifold" ids="bmesh.types.BMVert.is_manifold" module="bmesh.types" names="bmesh.types.BMVert.is_manifold"><desc_name xml:space="preserve">is_manifold</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>True when this vertex is manifold (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_valid\ (bmesh.types.BMVert\ attribute)',\ u'bmesh.types.BMVert.is_valid',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.is_valid" ids="bmesh.types.BMVert.is_valid" module="bmesh.types" names="bmesh.types.BMVert.is_valid"><desc_name xml:space="preserve">is_valid</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>True when this element is valid (hasn’t been removed).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_wire\ (bmesh.types.BMVert\ attribute)',\ u'bmesh.types.BMVert.is_wire',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.is_wire" ids="bmesh.types.BMVert.is_wire" module="bmesh.types" names="bmesh.types.BMVert.is_wire"><desc_name xml:space="preserve">is_wire</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>True when this vertex is not connected to any faces (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'link_edges\ (bmesh.types.BMVert\ attribute)',\ u'bmesh.types.BMVert.link_edges',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.link_edges" ids="bmesh.types.BMVert.link_edges" module="bmesh.types" names="bmesh.types.BMVert.link_edges"><desc_name xml:space="preserve">link_edges</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Edges connected to this vertex (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMElemSeq" reftitle="bmesh.types.BMElemSeq"><literal classes="xref py py-class">BMElemSeq</literal></reference> of <reference internal="True" refid="bmesh.types.BMEdge" reftitle="bmesh.types.BMEdge"><literal classes="xref py py-class">BMEdge</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'link_faces\ (bmesh.types.BMVert\ attribute)',\ u'bmesh.types.BMVert.link_faces',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.link_faces" ids="bmesh.types.BMVert.link_faces" module="bmesh.types" names="bmesh.types.BMVert.link_faces"><desc_name xml:space="preserve">link_faces</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Faces connected to this vertex (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMElemSeq" reftitle="bmesh.types.BMElemSeq"><literal classes="xref py py-class">BMElemSeq</literal></reference> of <reference internal="True" refid="bmesh.types.BMFace" reftitle="bmesh.types.BMFace"><literal classes="xref py py-class">BMFace</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'link_loops\ (bmesh.types.BMVert\ attribute)',\ u'bmesh.types.BMVert.link_loops',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.link_loops" ids="bmesh.types.BMVert.link_loops" module="bmesh.types" names="bmesh.types.BMVert.link_loops"><desc_name xml:space="preserve">link_loops</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Loops that use this vertex (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMElemSeq" reftitle="bmesh.types.BMElemSeq"><literal classes="xref py py-class">BMElemSeq</literal></reference> of <reference internal="True" refid="bmesh.types.BMLoop" reftitle="bmesh.types.BMLoop"><literal classes="xref py py-class">BMLoop</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'normal\ (bmesh.types.BMVert\ attribute)',\ u'bmesh.types.BMVert.normal',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.normal" ids="bmesh.types.BMVert.normal" module="bmesh.types" names="bmesh.types.BMVert.normal"><desc_name xml:space="preserve">normal</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The normal for this vertex as a 3D, wrapped vector.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'select\ (bmesh.types.BMVert\ attribute)',\ u'bmesh.types.BMVert.select',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.select" ids="bmesh.types.BMVert.select" module="bmesh.types" names="bmesh.types.BMVert.select"><desc_name xml:space="preserve">select</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Selected state of this element.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'tag\ (bmesh.types.BMVert\ attribute)',\ u'bmesh.types.BMVert.tag',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMVert" first="False" fullname="BMVert.tag" ids="bmesh.types.BMVert.tag" module="bmesh.types" names="bmesh.types.BMVert.tag"><desc_name xml:space="preserve">tag</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Generic attribute scripts can use for own logic</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BMEdge\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMEdge',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMEdge" ids="bmesh.types.BMEdge" module="bmesh.types" names="bmesh.types.BMEdge"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMEdge</desc_name></desc_signature>
                <desc_content>
                    <paragraph>The BMesh edge connecting 2 verts</paragraph>
                    <index entries="['single',\ u'calc_face_angle()\ (bmesh.types.BMEdge\ method)',\ u'bmesh.types.BMEdge.calc_face_angle',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.calc_face_angle" ids="bmesh.types.BMEdge.calc_face_angle" module="bmesh.types" names="bmesh.types.BMEdge.calc_face_angle"><desc_name xml:space="preserve">calc_face_angle</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fallback=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">fallback</literal_strong> (<literal_emphasis>any</literal_emphasis>) – return this when the edge doesn’t have 2 faces
                                            (instead of raising a <literal classes="xref py py-exc">ValueError</literal>).</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The angle between 2 connected faces in radians.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>float</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'calc_face_angle_signed()\ (bmesh.types.BMEdge\ method)',\ u'bmesh.types.BMEdge.calc_face_angle_signed',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.calc_face_angle_signed" ids="bmesh.types.BMEdge.calc_face_angle_signed" module="bmesh.types" names="bmesh.types.BMEdge.calc_face_angle_signed"><desc_name xml:space="preserve">calc_face_angle_signed</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">fallback=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">fallback</literal_strong> (<literal_emphasis>any</literal_emphasis>) – return this when the edge doesn’t have 2 faces
                                            (instead of raising a <literal classes="xref py py-exc">ValueError</literal>).</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The angle between 2 connected faces in radians (negative for concave join).</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>float</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'calc_length()\ (bmesh.types.BMEdge\ method)',\ u'bmesh.types.BMEdge.calc_length',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.calc_length" ids="bmesh.types.BMEdge.calc_length" module="bmesh.types" names="bmesh.types.BMEdge.calc_length"><desc_name xml:space="preserve">calc_length</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The length between both verts.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>float</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'calc_tangent()\ (bmesh.types.BMEdge\ method)',\ u'bmesh.types.BMEdge.calc_tangent',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.calc_tangent" ids="bmesh.types.BMEdge.calc_tangent" module="bmesh.types" names="bmesh.types.BMEdge.calc_tangent"><desc_name xml:space="preserve">calc_tangent</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">loop</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return the tangent at this edge relative to a face (pointing inward into the face).
                                This uses the face normal for calculation.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">loop</literal_strong> (<reference internal="True" refid="bmesh.types.BMLoop" reftitle="bmesh.types.BMLoop"><literal classes="xref py py-class">BMLoop</literal></reference>) – The loop used for tangent calculation.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a normalized vector.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'copy_from()\ (bmesh.types.BMEdge\ method)',\ u'bmesh.types.BMEdge.copy_from',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.copy_from" ids="bmesh.types.BMEdge.copy_from" module="bmesh.types" names="bmesh.types.BMEdge.copy_from"><desc_name xml:space="preserve">copy_from</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">other</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Copy values from another element of matching type.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'hide_set()\ (bmesh.types.BMEdge\ method)',\ u'bmesh.types.BMEdge.hide_set',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.hide_set" ids="bmesh.types.BMEdge.hide_set" module="bmesh.types" names="bmesh.types.BMEdge.hide_set"><desc_name xml:space="preserve">hide_set</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">hide</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Set the hide state.
                                This is different from the <emphasis>hide</emphasis> attribute because it updates the selection and hide state of associated geometry.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">hide</literal_strong> (<literal_emphasis>boolean</literal_emphasis>) – Hidden or visible.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'normal_update()\ (bmesh.types.BMEdge\ method)',\ u'bmesh.types.BMEdge.normal_update',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.normal_update" ids="bmesh.types.BMEdge.normal_update" module="bmesh.types" names="bmesh.types.BMEdge.normal_update"><desc_name xml:space="preserve">normal_update</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Update edges vertex normals.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'other_vert()\ (bmesh.types.BMEdge\ method)',\ u'bmesh.types.BMEdge.other_vert',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.other_vert" ids="bmesh.types.BMEdge.other_vert" module="bmesh.types" names="bmesh.types.BMEdge.other_vert"><desc_name xml:space="preserve">other_vert</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">vert</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return the other vertex on this edge or None if the vertex is not used by this edge.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">vert</literal_strong> (<reference internal="True" refid="bmesh.types.BMVert" reftitle="bmesh.types.BMVert"><literal classes="xref py py-class">BMVert</literal></reference>) – a vert in this edge.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The edges other vert.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMVert" reftitle="bmesh.types.BMVert"><literal classes="xref py py-class">BMVert</literal></reference> or None</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'select_set()\ (bmesh.types.BMEdge\ method)',\ u'bmesh.types.BMEdge.select_set',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.select_set" ids="bmesh.types.BMEdge.select_set" module="bmesh.types" names="bmesh.types.BMEdge.select_set"><desc_name xml:space="preserve">select_set</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">select</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Set the selection.
                                This is different from the <emphasis>select</emphasis> attribute because it updates the selection state of associated geometry.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">select</literal_strong> (<literal_emphasis>boolean</literal_emphasis>) – Select or de-select.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <note>
                                <paragraph>Currently this only flushes down, so selecting a face will select all its vertices but de-selecting a vertex       won’t de-select all the faces that use it, before finishing with a mesh typically flushing is still needed.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'hide\ (bmesh.types.BMEdge\ attribute)',\ u'bmesh.types.BMEdge.hide',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.hide" ids="bmesh.types.BMEdge.hide" module="bmesh.types" names="bmesh.types.BMEdge.hide"><desc_name xml:space="preserve">hide</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Hidden state of this element.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'index\ (bmesh.types.BMEdge\ attribute)',\ u'bmesh.types.BMEdge.index',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.index" ids="bmesh.types.BMEdge.index" module="bmesh.types" names="bmesh.types.BMEdge.index"><desc_name xml:space="preserve">index</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Index of this element.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>int</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <note>
                                <paragraph>This value is not necessarily valid, while editing the mesh it can become <emphasis>dirty</emphasis>.</paragraph>
                                <paragraph>It’s also possible to assign any number to this attribute for a scripts internal logic.</paragraph>
                                <paragraph>To ensure the value is up to date - see <reference internal="True" refid="bmesh.types.BMElemSeq.index_update" reftitle="bmesh.types.BMElemSeq.index_update"><literal classes="xref py py-class">BMElemSeq.index_update</literal></reference>.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_boundary\ (bmesh.types.BMEdge\ attribute)',\ u'bmesh.types.BMEdge.is_boundary',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.is_boundary" ids="bmesh.types.BMEdge.is_boundary" module="bmesh.types" names="bmesh.types.BMEdge.is_boundary"><desc_name xml:space="preserve">is_boundary</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>True when this edge is at the boundary of a face (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_contiguous\ (bmesh.types.BMEdge\ attribute)',\ u'bmesh.types.BMEdge.is_contiguous',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.is_contiguous" ids="bmesh.types.BMEdge.is_contiguous" module="bmesh.types" names="bmesh.types.BMEdge.is_contiguous"><desc_name xml:space="preserve">is_contiguous</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>True when this edge is manifold, between two faces with the same winding (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_convex\ (bmesh.types.BMEdge\ attribute)',\ u'bmesh.types.BMEdge.is_convex',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.is_convex" ids="bmesh.types.BMEdge.is_convex" module="bmesh.types" names="bmesh.types.BMEdge.is_convex"><desc_name xml:space="preserve">is_convex</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>True when this edge joins two convex faces, depends on a valid face normal (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_manifold\ (bmesh.types.BMEdge\ attribute)',\ u'bmesh.types.BMEdge.is_manifold',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.is_manifold" ids="bmesh.types.BMEdge.is_manifold" module="bmesh.types" names="bmesh.types.BMEdge.is_manifold"><desc_name xml:space="preserve">is_manifold</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>True when this edge is manifold (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_valid\ (bmesh.types.BMEdge\ attribute)',\ u'bmesh.types.BMEdge.is_valid',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.is_valid" ids="bmesh.types.BMEdge.is_valid" module="bmesh.types" names="bmesh.types.BMEdge.is_valid"><desc_name xml:space="preserve">is_valid</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>True when this element is valid (hasn’t been removed).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_wire\ (bmesh.types.BMEdge\ attribute)',\ u'bmesh.types.BMEdge.is_wire',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.is_wire" ids="bmesh.types.BMEdge.is_wire" module="bmesh.types" names="bmesh.types.BMEdge.is_wire"><desc_name xml:space="preserve">is_wire</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>True when this edge is not connected to any faces (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'link_faces\ (bmesh.types.BMEdge\ attribute)',\ u'bmesh.types.BMEdge.link_faces',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.link_faces" ids="bmesh.types.BMEdge.link_faces" module="bmesh.types" names="bmesh.types.BMEdge.link_faces"><desc_name xml:space="preserve">link_faces</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Faces connected to this edge, (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMElemSeq" reftitle="bmesh.types.BMElemSeq"><literal classes="xref py py-class">BMElemSeq</literal></reference> of <reference internal="True" refid="bmesh.types.BMFace" reftitle="bmesh.types.BMFace"><literal classes="xref py py-class">BMFace</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'link_loops\ (bmesh.types.BMEdge\ attribute)',\ u'bmesh.types.BMEdge.link_loops',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.link_loops" ids="bmesh.types.BMEdge.link_loops" module="bmesh.types" names="bmesh.types.BMEdge.link_loops"><desc_name xml:space="preserve">link_loops</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Loops connected to this edge, (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMElemSeq" reftitle="bmesh.types.BMElemSeq"><literal classes="xref py py-class">BMElemSeq</literal></reference> of <reference internal="True" refid="bmesh.types.BMLoop" reftitle="bmesh.types.BMLoop"><literal classes="xref py py-class">BMLoop</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'seam\ (bmesh.types.BMEdge\ attribute)',\ u'bmesh.types.BMEdge.seam',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.seam" ids="bmesh.types.BMEdge.seam" module="bmesh.types" names="bmesh.types.BMEdge.seam"><desc_name xml:space="preserve">seam</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Seam for UV unwrapping.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'select\ (bmesh.types.BMEdge\ attribute)',\ u'bmesh.types.BMEdge.select',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.select" ids="bmesh.types.BMEdge.select" module="bmesh.types" names="bmesh.types.BMEdge.select"><desc_name xml:space="preserve">select</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Selected state of this element.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'smooth\ (bmesh.types.BMEdge\ attribute)',\ u'bmesh.types.BMEdge.smooth',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.smooth" ids="bmesh.types.BMEdge.smooth" module="bmesh.types" names="bmesh.types.BMEdge.smooth"><desc_name xml:space="preserve">smooth</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Smooth state of this element.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'tag\ (bmesh.types.BMEdge\ attribute)',\ u'bmesh.types.BMEdge.tag',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.tag" ids="bmesh.types.BMEdge.tag" module="bmesh.types" names="bmesh.types.BMEdge.tag"><desc_name xml:space="preserve">tag</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Generic attribute scripts can use for own logic</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'verts\ (bmesh.types.BMEdge\ attribute)',\ u'bmesh.types.BMEdge.verts',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMEdge" first="False" fullname="BMEdge.verts" ids="bmesh.types.BMEdge.verts" module="bmesh.types" names="bmesh.types.BMEdge.verts"><desc_name xml:space="preserve">verts</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Verts this edge uses (always 2), (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMElemSeq" reftitle="bmesh.types.BMElemSeq"><literal classes="xref py py-class">BMElemSeq</literal></reference> of <reference internal="True" refid="bmesh.types.BMVert" reftitle="bmesh.types.BMVert"><literal classes="xref py py-class">BMVert</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BMFace\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMFace',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMFace" ids="bmesh.types.BMFace" module="bmesh.types" names="bmesh.types.BMFace"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMFace</desc_name></desc_signature>
                <desc_content>
                    <paragraph>The BMesh face with 3 or more sides</paragraph>
                    <index entries="['single',\ u'calc_area()\ (bmesh.types.BMFace\ method)',\ u'bmesh.types.BMFace.calc_area',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.calc_area" ids="bmesh.types.BMFace.calc_area" module="bmesh.types" names="bmesh.types.BMFace.calc_area"><desc_name xml:space="preserve">calc_area</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return the area of the face.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>Return the area of the face.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>float</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'calc_center_bounds()\ (bmesh.types.BMFace\ method)',\ u'bmesh.types.BMFace.calc_center_bounds',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.calc_center_bounds" ids="bmesh.types.BMFace.calc_center_bounds" module="bmesh.types" names="bmesh.types.BMFace.calc_center_bounds"><desc_name xml:space="preserve">calc_center_bounds</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return bounds center of the face.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a 3D vector.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'calc_center_median()\ (bmesh.types.BMFace\ method)',\ u'bmesh.types.BMFace.calc_center_median',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.calc_center_median" ids="bmesh.types.BMFace.calc_center_median" module="bmesh.types" names="bmesh.types.BMFace.calc_center_median"><desc_name xml:space="preserve">calc_center_median</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return median center of the face.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a 3D vector.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'calc_center_median_weighted()\ (bmesh.types.BMFace\ method)',\ u'bmesh.types.BMFace.calc_center_median_weighted',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.calc_center_median_weighted" ids="bmesh.types.BMFace.calc_center_median_weighted" module="bmesh.types" names="bmesh.types.BMFace.calc_center_median_weighted"><desc_name xml:space="preserve">calc_center_median_weighted</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return median center of the face weighted by edge lengths.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a 3D vector.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'calc_perimeter()\ (bmesh.types.BMFace\ method)',\ u'bmesh.types.BMFace.calc_perimeter',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.calc_perimeter" ids="bmesh.types.BMFace.calc_perimeter" module="bmesh.types" names="bmesh.types.BMFace.calc_perimeter"><desc_name xml:space="preserve">calc_perimeter</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return the perimeter of the face.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>Return the perimeter of the face.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>float</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'calc_tangent_edge()\ (bmesh.types.BMFace\ method)',\ u'bmesh.types.BMFace.calc_tangent_edge',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.calc_tangent_edge" ids="bmesh.types.BMFace.calc_tangent_edge" module="bmesh.types" names="bmesh.types.BMFace.calc_tangent_edge"><desc_name xml:space="preserve">calc_tangent_edge</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return face tangent based on longest edge.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a normalized vector.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'calc_tangent_edge_diagonal()\ (bmesh.types.BMFace\ method)',\ u'bmesh.types.BMFace.calc_tangent_edge_diagonal',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.calc_tangent_edge_diagonal" ids="bmesh.types.BMFace.calc_tangent_edge_diagonal" module="bmesh.types" names="bmesh.types.BMFace.calc_tangent_edge_diagonal"><desc_name xml:space="preserve">calc_tangent_edge_diagonal</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return face tangent based on the edge farthest from any vertex.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a normalized vector.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'calc_tangent_edge_pair()\ (bmesh.types.BMFace\ method)',\ u'bmesh.types.BMFace.calc_tangent_edge_pair',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.calc_tangent_edge_pair" ids="bmesh.types.BMFace.calc_tangent_edge_pair" module="bmesh.types" names="bmesh.types.BMFace.calc_tangent_edge_pair"><desc_name xml:space="preserve">calc_tangent_edge_pair</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return face tangent based on the two longest disconnected edges.</paragraph>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>Tris: Use the edge pair with the most similar lengths.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Quads: Use the longest edge pair.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>NGons: Use the two longest disconnected edges.</paragraph>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a normalized vector.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'calc_tangent_vert_diagonal()\ (bmesh.types.BMFace\ method)',\ u'bmesh.types.BMFace.calc_tangent_vert_diagonal',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.calc_tangent_vert_diagonal" ids="bmesh.types.BMFace.calc_tangent_vert_diagonal" module="bmesh.types" names="bmesh.types.BMFace.calc_tangent_vert_diagonal"><desc_name xml:space="preserve">calc_tangent_vert_diagonal</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return face tangent based on the two most distent vertices.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a normalized vector.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'copy()\ (bmesh.types.BMFace\ method)',\ u'bmesh.types.BMFace.copy',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.copy" ids="bmesh.types.BMFace.copy" module="bmesh.types" names="bmesh.types.BMFace.copy"><desc_name xml:space="preserve">copy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">verts=True</desc_parameter><desc_parameter xml:space="preserve">edges=True</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Make a copy of this face.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">verts</literal_strong> (<literal_emphasis>boolean</literal_emphasis>) – When set, the faces verts will be duplicated too.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">edges</literal_strong> (<literal_emphasis>boolean</literal_emphasis>) – When set, the faces edges will be duplicated too.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The newly created face.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMFace" reftitle="bmesh.types.BMFace"><literal classes="xref py py-class">BMFace</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'copy_from()\ (bmesh.types.BMFace\ method)',\ u'bmesh.types.BMFace.copy_from',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.copy_from" ids="bmesh.types.BMFace.copy_from" module="bmesh.types" names="bmesh.types.BMFace.copy_from"><desc_name xml:space="preserve">copy_from</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">other</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Copy values from another element of matching type.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'copy_from_face_interp()\ (bmesh.types.BMFace\ method)',\ u'bmesh.types.BMFace.copy_from_face_interp',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.copy_from_face_interp" ids="bmesh.types.BMFace.copy_from_face_interp" module="bmesh.types" names="bmesh.types.BMFace.copy_from_face_interp"><desc_name xml:space="preserve">copy_from_face_interp</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">face</desc_parameter><desc_parameter xml:space="preserve">vert=True</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Interpolate the customdata from another face onto this one (faces should overlap).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">face</literal_strong> (<reference internal="True" refid="bmesh.types.BMFace" reftitle="bmesh.types.BMFace"><literal classes="xref py py-class">BMFace</literal></reference>) – The face to interpolate data from.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">vert</literal_strong> (<literal_emphasis>boolean</literal_emphasis>) – When True, also copy vertex data.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'hide_set()\ (bmesh.types.BMFace\ method)',\ u'bmesh.types.BMFace.hide_set',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.hide_set" ids="bmesh.types.BMFace.hide_set" module="bmesh.types" names="bmesh.types.BMFace.hide_set"><desc_name xml:space="preserve">hide_set</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">hide</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Set the hide state.
                                This is different from the <emphasis>hide</emphasis> attribute because it updates the selection and hide state of associated geometry.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">hide</literal_strong> (<literal_emphasis>boolean</literal_emphasis>) – Hidden or visible.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'normal_flip()\ (bmesh.types.BMFace\ method)',\ u'bmesh.types.BMFace.normal_flip',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.normal_flip" ids="bmesh.types.BMFace.normal_flip" module="bmesh.types" names="bmesh.types.BMFace.normal_flip"><desc_name xml:space="preserve">normal_flip</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Reverses winding of a face, which flips its normal.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'normal_update()\ (bmesh.types.BMFace\ method)',\ u'bmesh.types.BMFace.normal_update',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.normal_update" ids="bmesh.types.BMFace.normal_update" module="bmesh.types" names="bmesh.types.BMFace.normal_update"><desc_name xml:space="preserve">normal_update</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Update face’s normal.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'select_set()\ (bmesh.types.BMFace\ method)',\ u'bmesh.types.BMFace.select_set',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.select_set" ids="bmesh.types.BMFace.select_set" module="bmesh.types" names="bmesh.types.BMFace.select_set"><desc_name xml:space="preserve">select_set</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">select</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Set the selection.
                                This is different from the <emphasis>select</emphasis> attribute because it updates the selection state of associated geometry.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">select</literal_strong> (<literal_emphasis>boolean</literal_emphasis>) – Select or de-select.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <note>
                                <paragraph>Currently this only flushes down, so selecting a face will select all its vertices but de-selecting a vertex       won’t de-select all the faces that use it, before finishing with a mesh typically flushing is still needed.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'edges\ (bmesh.types.BMFace\ attribute)',\ u'bmesh.types.BMFace.edges',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.edges" ids="bmesh.types.BMFace.edges" module="bmesh.types" names="bmesh.types.BMFace.edges"><desc_name xml:space="preserve">edges</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Edges of this face, (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMElemSeq" reftitle="bmesh.types.BMElemSeq"><literal classes="xref py py-class">BMElemSeq</literal></reference> of <reference internal="True" refid="bmesh.types.BMEdge" reftitle="bmesh.types.BMEdge"><literal classes="xref py py-class">BMEdge</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'hide\ (bmesh.types.BMFace\ attribute)',\ u'bmesh.types.BMFace.hide',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.hide" ids="bmesh.types.BMFace.hide" module="bmesh.types" names="bmesh.types.BMFace.hide"><desc_name xml:space="preserve">hide</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Hidden state of this element.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'index\ (bmesh.types.BMFace\ attribute)',\ u'bmesh.types.BMFace.index',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.index" ids="bmesh.types.BMFace.index" module="bmesh.types" names="bmesh.types.BMFace.index"><desc_name xml:space="preserve">index</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Index of this element.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>int</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <note>
                                <paragraph>This value is not necessarily valid, while editing the mesh it can become <emphasis>dirty</emphasis>.</paragraph>
                                <paragraph>It’s also possible to assign any number to this attribute for a scripts internal logic.</paragraph>
                                <paragraph>To ensure the value is up to date - see <reference internal="True" refid="bmesh.types.BMElemSeq.index_update" reftitle="bmesh.types.BMElemSeq.index_update"><literal classes="xref py py-class">BMElemSeq.index_update</literal></reference>.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_valid\ (bmesh.types.BMFace\ attribute)',\ u'bmesh.types.BMFace.is_valid',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.is_valid" ids="bmesh.types.BMFace.is_valid" module="bmesh.types" names="bmesh.types.BMFace.is_valid"><desc_name xml:space="preserve">is_valid</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>True when this element is valid (hasn’t been removed).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'loops\ (bmesh.types.BMFace\ attribute)',\ u'bmesh.types.BMFace.loops',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.loops" ids="bmesh.types.BMFace.loops" module="bmesh.types" names="bmesh.types.BMFace.loops"><desc_name xml:space="preserve">loops</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Loops of this face, (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMElemSeq" reftitle="bmesh.types.BMElemSeq"><literal classes="xref py py-class">BMElemSeq</literal></reference> of <reference internal="True" refid="bmesh.types.BMLoop" reftitle="bmesh.types.BMLoop"><literal classes="xref py py-class">BMLoop</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'material_index\ (bmesh.types.BMFace\ attribute)',\ u'bmesh.types.BMFace.material_index',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.material_index" ids="bmesh.types.BMFace.material_index" module="bmesh.types" names="bmesh.types.BMFace.material_index"><desc_name xml:space="preserve">material_index</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The face’s material index.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>int</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'normal\ (bmesh.types.BMFace\ attribute)',\ u'bmesh.types.BMFace.normal',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.normal" ids="bmesh.types.BMFace.normal" module="bmesh.types" names="bmesh.types.BMFace.normal"><desc_name xml:space="preserve">normal</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The normal for this face as a 3D, wrapped vector.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'select\ (bmesh.types.BMFace\ attribute)',\ u'bmesh.types.BMFace.select',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.select" ids="bmesh.types.BMFace.select" module="bmesh.types" names="bmesh.types.BMFace.select"><desc_name xml:space="preserve">select</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Selected state of this element.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'smooth\ (bmesh.types.BMFace\ attribute)',\ u'bmesh.types.BMFace.smooth',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.smooth" ids="bmesh.types.BMFace.smooth" module="bmesh.types" names="bmesh.types.BMFace.smooth"><desc_name xml:space="preserve">smooth</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Smooth state of this element.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'tag\ (bmesh.types.BMFace\ attribute)',\ u'bmesh.types.BMFace.tag',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.tag" ids="bmesh.types.BMFace.tag" module="bmesh.types" names="bmesh.types.BMFace.tag"><desc_name xml:space="preserve">tag</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Generic attribute scripts can use for own logic</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'verts\ (bmesh.types.BMFace\ attribute)',\ u'bmesh.types.BMFace.verts',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMFace" first="False" fullname="BMFace.verts" ids="bmesh.types.BMFace.verts" module="bmesh.types" names="bmesh.types.BMFace.verts"><desc_name xml:space="preserve">verts</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Verts of this face, (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMElemSeq" reftitle="bmesh.types.BMElemSeq"><literal classes="xref py py-class">BMElemSeq</literal></reference> of <reference internal="True" refid="bmesh.types.BMVert" reftitle="bmesh.types.BMVert"><literal classes="xref py py-class">BMVert</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BMLoop\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMLoop',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMLoop" ids="bmesh.types.BMLoop" module="bmesh.types" names="bmesh.types.BMLoop"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMLoop</desc_name></desc_signature>
                <desc_content>
                    <paragraph>This is normally accessed from <reference internal="True" refid="bmesh.types.BMFace.loops" reftitle="bmesh.types.BMFace.loops"><literal classes="xref py py-class">BMFace.loops</literal></reference> where each face loop represents a corner of the face.</paragraph>
                    <index entries="['single',\ u'calc_angle()\ (bmesh.types.BMLoop\ method)',\ u'bmesh.types.BMLoop.calc_angle',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMLoop" first="False" fullname="BMLoop.calc_angle" ids="bmesh.types.BMLoop.calc_angle" module="bmesh.types" names="bmesh.types.BMLoop.calc_angle"><desc_name xml:space="preserve">calc_angle</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return the angle at this loops corner of the face.
                                This is calculated so sharper corners give lower angles.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The angle in radians.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>float</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'calc_normal()\ (bmesh.types.BMLoop\ method)',\ u'bmesh.types.BMLoop.calc_normal',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMLoop" first="False" fullname="BMLoop.calc_normal" ids="bmesh.types.BMLoop.calc_normal" module="bmesh.types" names="bmesh.types.BMLoop.calc_normal"><desc_name xml:space="preserve">calc_normal</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return normal at this loops corner of the face.
                                Falls back to the face normal for straight lines.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a normalized vector.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'calc_tangent()\ (bmesh.types.BMLoop\ method)',\ u'bmesh.types.BMLoop.calc_tangent',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMLoop" first="False" fullname="BMLoop.calc_tangent" ids="bmesh.types.BMLoop.calc_tangent" module="bmesh.types" names="bmesh.types.BMLoop.calc_tangent"><desc_name xml:space="preserve">calc_tangent</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return the tangent at this loops corner of the face (pointing inward into the face).
                                Falls back to the face normal for straight lines.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>a normalized vector.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'copy_from()\ (bmesh.types.BMLoop\ method)',\ u'bmesh.types.BMLoop.copy_from',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMLoop" first="False" fullname="BMLoop.copy_from" ids="bmesh.types.BMLoop.copy_from" module="bmesh.types" names="bmesh.types.BMLoop.copy_from"><desc_name xml:space="preserve">copy_from</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">other</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Copy values from another element of matching type.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'copy_from_face_interp()\ (bmesh.types.BMLoop\ method)',\ u'bmesh.types.BMLoop.copy_from_face_interp',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMLoop" first="False" fullname="BMLoop.copy_from_face_interp" ids="bmesh.types.BMLoop.copy_from_face_interp" module="bmesh.types" names="bmesh.types.BMLoop.copy_from_face_interp"><desc_name xml:space="preserve">copy_from_face_interp</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">face</desc_parameter><desc_parameter xml:space="preserve">vert=True</desc_parameter><desc_parameter xml:space="preserve">multires=True</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Interpolate the customdata from a face onto this loop (the loops vert should overlap the face).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">face</literal_strong> (<reference internal="True" refid="bmesh.types.BMFace" reftitle="bmesh.types.BMFace"><literal classes="xref py py-class">BMFace</literal></reference>) – The face to interpolate data from.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">vert</literal_strong> (<literal_emphasis>boolean</literal_emphasis>) – When enabled, interpolate the loops vertex data (optional).</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">multires</literal_strong> (<literal_emphasis>boolean</literal_emphasis>) – When enabled, interpolate the loops multires data (optional).</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'edge\ (bmesh.types.BMLoop\ attribute)',\ u'bmesh.types.BMLoop.edge',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLoop" first="False" fullname="BMLoop.edge" ids="bmesh.types.BMLoop.edge" module="bmesh.types" names="bmesh.types.BMLoop.edge"><desc_name xml:space="preserve">edge</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The loop’s edge (between this loop and the next), (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMEdge" reftitle="bmesh.types.BMEdge"><literal classes="xref py py-class">BMEdge</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'face\ (bmesh.types.BMLoop\ attribute)',\ u'bmesh.types.BMLoop.face',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLoop" first="False" fullname="BMLoop.face" ids="bmesh.types.BMLoop.face" module="bmesh.types" names="bmesh.types.BMLoop.face"><desc_name xml:space="preserve">face</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The face this loop makes (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMFace" reftitle="bmesh.types.BMFace"><literal classes="xref py py-class">BMFace</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'index\ (bmesh.types.BMLoop\ attribute)',\ u'bmesh.types.BMLoop.index',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLoop" first="False" fullname="BMLoop.index" ids="bmesh.types.BMLoop.index" module="bmesh.types" names="bmesh.types.BMLoop.index"><desc_name xml:space="preserve">index</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Index of this element.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>int</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <note>
                                <paragraph>This value is not necessarily valid, while editing the mesh it can become <emphasis>dirty</emphasis>.</paragraph>
                                <paragraph>It’s also possible to assign any number to this attribute for a scripts internal logic.</paragraph>
                                <paragraph>To ensure the value is up to date - see <reference internal="True" refid="bmesh.types.BMElemSeq.index_update" reftitle="bmesh.types.BMElemSeq.index_update"><literal classes="xref py py-class">BMElemSeq.index_update</literal></reference>.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_convex\ (bmesh.types.BMLoop\ attribute)',\ u'bmesh.types.BMLoop.is_convex',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLoop" first="False" fullname="BMLoop.is_convex" ids="bmesh.types.BMLoop.is_convex" module="bmesh.types" names="bmesh.types.BMLoop.is_convex"><desc_name xml:space="preserve">is_convex</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>True when this loop is at the convex corner of a face, depends on a valid face normal (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_valid\ (bmesh.types.BMLoop\ attribute)',\ u'bmesh.types.BMLoop.is_valid',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLoop" first="False" fullname="BMLoop.is_valid" ids="bmesh.types.BMLoop.is_valid" module="bmesh.types" names="bmesh.types.BMLoop.is_valid"><desc_name xml:space="preserve">is_valid</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>True when this element is valid (hasn’t been removed).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'link_loop_next\ (bmesh.types.BMLoop\ attribute)',\ u'bmesh.types.BMLoop.link_loop_next',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLoop" first="False" fullname="BMLoop.link_loop_next" ids="bmesh.types.BMLoop.link_loop_next" module="bmesh.types" names="bmesh.types.BMLoop.link_loop_next"><desc_name xml:space="preserve">link_loop_next</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The next face corner (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMLoop" reftitle="bmesh.types.BMLoop"><literal classes="xref py py-class">BMLoop</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'link_loop_prev\ (bmesh.types.BMLoop\ attribute)',\ u'bmesh.types.BMLoop.link_loop_prev',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLoop" first="False" fullname="BMLoop.link_loop_prev" ids="bmesh.types.BMLoop.link_loop_prev" module="bmesh.types" names="bmesh.types.BMLoop.link_loop_prev"><desc_name xml:space="preserve">link_loop_prev</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The previous face corner (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMLoop" reftitle="bmesh.types.BMLoop"><literal classes="xref py py-class">BMLoop</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'link_loop_radial_next\ (bmesh.types.BMLoop\ attribute)',\ u'bmesh.types.BMLoop.link_loop_radial_next',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLoop" first="False" fullname="BMLoop.link_loop_radial_next" ids="bmesh.types.BMLoop.link_loop_radial_next" module="bmesh.types" names="bmesh.types.BMLoop.link_loop_radial_next"><desc_name xml:space="preserve">link_loop_radial_next</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The next loop around the edge (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMLoop" reftitle="bmesh.types.BMLoop"><literal classes="xref py py-class">BMLoop</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'link_loop_radial_prev\ (bmesh.types.BMLoop\ attribute)',\ u'bmesh.types.BMLoop.link_loop_radial_prev',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLoop" first="False" fullname="BMLoop.link_loop_radial_prev" ids="bmesh.types.BMLoop.link_loop_radial_prev" module="bmesh.types" names="bmesh.types.BMLoop.link_loop_radial_prev"><desc_name xml:space="preserve">link_loop_radial_prev</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The previous loop around the edge (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMLoop" reftitle="bmesh.types.BMLoop"><literal classes="xref py py-class">BMLoop</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'link_loops\ (bmesh.types.BMLoop\ attribute)',\ u'bmesh.types.BMLoop.link_loops',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLoop" first="False" fullname="BMLoop.link_loops" ids="bmesh.types.BMLoop.link_loops" module="bmesh.types" names="bmesh.types.BMLoop.link_loops"><desc_name xml:space="preserve">link_loops</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Loops connected to this loop, (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMElemSeq" reftitle="bmesh.types.BMElemSeq"><literal classes="xref py py-class">BMElemSeq</literal></reference> of <reference internal="True" refid="bmesh.types.BMLoop" reftitle="bmesh.types.BMLoop"><literal classes="xref py py-class">BMLoop</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'tag\ (bmesh.types.BMLoop\ attribute)',\ u'bmesh.types.BMLoop.tag',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLoop" first="False" fullname="BMLoop.tag" ids="bmesh.types.BMLoop.tag" module="bmesh.types" names="bmesh.types.BMLoop.tag"><desc_name xml:space="preserve">tag</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Generic attribute scripts can use for own logic</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'vert\ (bmesh.types.BMLoop\ attribute)',\ u'bmesh.types.BMLoop.vert',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLoop" first="False" fullname="BMLoop.vert" ids="bmesh.types.BMLoop.vert" module="bmesh.types" names="bmesh.types.BMLoop.vert"><desc_name xml:space="preserve">vert</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The loop’s vertex (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMVert" reftitle="bmesh.types.BMVert"><literal classes="xref py py-class">BMVert</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
        </section>
        <section ids="sequence-accessors" names="sequence\ accessors">
            <title>Sequence Accessors</title>
            <index entries="['single',\ u'BMElemSeq\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMElemSeq',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMElemSeq" ids="bmesh.types.BMElemSeq" module="bmesh.types" names="bmesh.types.BMElemSeq"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMElemSeq</desc_name></desc_signature>
                <desc_content>
                    <paragraph>General sequence type used for accessing any sequence of
                        <reference internal="True" refid="bmesh.types.BMVert" reftitle="bmesh.types.BMVert"><literal classes="xref py py-class">BMVert</literal></reference>, <reference internal="True" refid="bmesh.types.BMEdge" reftitle="bmesh.types.BMEdge"><literal classes="xref py py-class">BMEdge</literal></reference>, <reference internal="True" refid="bmesh.types.BMFace" reftitle="bmesh.types.BMFace"><literal classes="xref py py-class">BMFace</literal></reference>, <reference internal="True" refid="bmesh.types.BMLoop" reftitle="bmesh.types.BMLoop"><literal classes="xref py py-class">BMLoop</literal></reference>.</paragraph>
                    <paragraph>When accessed via <reference internal="True" refid="bmesh.types.BMesh.verts" reftitle="bmesh.types.BMesh.verts"><literal classes="xref py py-class">BMesh.verts</literal></reference>, <reference internal="True" refid="bmesh.types.BMesh.edges" reftitle="bmesh.types.BMesh.edges"><literal classes="xref py py-class">BMesh.edges</literal></reference>, <reference internal="True" refid="bmesh.types.BMesh.faces" reftitle="bmesh.types.BMesh.faces"><literal classes="xref py py-class">BMesh.faces</literal></reference>
                        there are also functions to create/remomove items.</paragraph>
                    <index entries="['single',\ u'index_update()\ (bmesh.types.BMElemSeq\ method)',\ u'bmesh.types.BMElemSeq.index_update',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMElemSeq" first="False" fullname="BMElemSeq.index_update" ids="bmesh.types.BMElemSeq.index_update" module="bmesh.types" names="bmesh.types.BMElemSeq.index_update"><desc_name xml:space="preserve">index_update</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Initialize the index values of this sequence.</paragraph>
                            <paragraph>This is the equivalent of looping over all elements and assigning the index values.</paragraph>
                            <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">for index, ele in enumerate(sequence):
    ele.index = index</literal_block>
                            <note>
                                <paragraph>Running this on sequences besides <reference internal="True" refid="bmesh.types.BMesh.verts" reftitle="bmesh.types.BMesh.verts"><literal classes="xref py py-class">BMesh.verts</literal></reference>, <reference internal="True" refid="bmesh.types.BMesh.edges" reftitle="bmesh.types.BMesh.edges"><literal classes="xref py py-class">BMesh.edges</literal></reference>, <reference internal="True" refid="bmesh.types.BMesh.faces" reftitle="bmesh.types.BMesh.faces"><literal classes="xref py py-class">BMesh.faces</literal></reference>
                                    works but wont result in each element having a valid index, instead its order in the sequence will be set.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BMVertSeq\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMVertSeq',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMVertSeq" ids="bmesh.types.BMVertSeq" module="bmesh.types" names="bmesh.types.BMVertSeq"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMVertSeq</desc_name></desc_signature>
                <desc_content>
                    <index entries="['single',\ u'ensure_lookup_table()\ (bmesh.types.BMVertSeq\ method)',\ u'bmesh.types.BMVertSeq.ensure_lookup_table',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMVertSeq" first="False" fullname="BMVertSeq.ensure_lookup_table" ids="bmesh.types.BMVertSeq.ensure_lookup_table" module="bmesh.types" names="bmesh.types.BMVertSeq.ensure_lookup_table"><desc_name xml:space="preserve">ensure_lookup_table</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Ensure internal data needed for int subscription is initialized with verts/edges/faces, eg <literal>bm.verts[index]</literal>.</paragraph>
                            <paragraph>This needs to be called again after adding/removing data in this sequence.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'index_update()\ (bmesh.types.BMVertSeq\ method)',\ u'bmesh.types.BMVertSeq.index_update',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMVertSeq" first="False" fullname="BMVertSeq.index_update" ids="bmesh.types.BMVertSeq.index_update" module="bmesh.types" names="bmesh.types.BMVertSeq.index_update"><desc_name xml:space="preserve">index_update</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Initialize the index values of this sequence.</paragraph>
                            <paragraph>This is the equivalent of looping over all elements and assigning the index values.</paragraph>
                            <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">for index, ele in enumerate(sequence):
    ele.index = index</literal_block>
                            <note>
                                <paragraph>Running this on sequences besides <reference internal="True" refid="bmesh.types.BMesh.verts" reftitle="bmesh.types.BMesh.verts"><literal classes="xref py py-class">BMesh.verts</literal></reference>, <reference internal="True" refid="bmesh.types.BMesh.edges" reftitle="bmesh.types.BMesh.edges"><literal classes="xref py py-class">BMesh.edges</literal></reference>, <reference internal="True" refid="bmesh.types.BMesh.faces" reftitle="bmesh.types.BMesh.faces"><literal classes="xref py py-class">BMesh.faces</literal></reference>
                                    works but wont result in each element having a valid index, instead its order in the sequence will be set.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'new()\ (bmesh.types.BMVertSeq\ method)',\ u'bmesh.types.BMVertSeq.new',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMVertSeq" first="False" fullname="BMVertSeq.new" ids="bmesh.types.BMVertSeq.new" module="bmesh.types" names="bmesh.types.BMVertSeq.new"><desc_name xml:space="preserve">new</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">co=(0.0</desc_parameter><desc_parameter xml:space="preserve">0.0</desc_parameter><desc_parameter xml:space="preserve">0.0)</desc_parameter><desc_parameter xml:space="preserve">example=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create a new vertex.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">co</literal_strong> (<literal_emphasis>float triplet</literal_emphasis>) – The initial location of the vertex (optional argument).</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">example</literal_strong> (<reference internal="True" refid="bmesh.types.BMVert" reftitle="bmesh.types.BMVert"><literal classes="xref py py-class">BMVert</literal></reference>) – Existing vert to initialize settings.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The newly created edge.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMVert" reftitle="bmesh.types.BMVert"><literal classes="xref py py-class">BMVert</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'remove()\ (bmesh.types.BMVertSeq\ method)',\ u'bmesh.types.BMVertSeq.remove',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMVertSeq" first="False" fullname="BMVertSeq.remove" ids="bmesh.types.BMVertSeq.remove" module="bmesh.types" names="bmesh.types.BMVertSeq.remove"><desc_name xml:space="preserve">remove</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">vert</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Remove a vert.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'sort()\ (bmesh.types.BMVertSeq\ method)',\ u'bmesh.types.BMVertSeq.sort',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMVertSeq" first="False" fullname="BMVertSeq.sort" ids="bmesh.types.BMVertSeq.sort" module="bmesh.types" names="bmesh.types.BMVertSeq.sort"><desc_name xml:space="preserve">sort</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">key=None</desc_parameter><desc_parameter xml:space="preserve">reverse=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Sort the elements of this sequence, using an optional custom sort key.
                                Indices of elements are not changed, BMElemeSeq.index_update() can be used for that.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">key</literal_strong> – The key that sets the ordering of the elements.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">reverse</literal_strong> – Reverse the order of the elements</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                            <note>
                                <paragraph>When the ‘key’ argument is not provided, the elements are reordered following their current index value.
                                    In particular this can be used by setting indices manually before calling this method.</paragraph>
                            </note>
                            <warning>
                                <paragraph>Existing references to the N’th element, will continue to point the data at that index.</paragraph>
                            </warning>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'layers\ (bmesh.types.BMVertSeq\ attribute)',\ u'bmesh.types.BMVertSeq.layers',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMVertSeq" first="False" fullname="BMVertSeq.layers" ids="bmesh.types.BMVertSeq.layers" module="bmesh.types" names="bmesh.types.BMVertSeq.layers"><desc_name xml:space="preserve">layers</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>custom-data layers (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMLayerAccessVert" reftitle="bmesh.types.BMLayerAccessVert"><literal classes="xref py py-class">BMLayerAccessVert</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BMEdgeSeq\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMEdgeSeq',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMEdgeSeq" ids="bmesh.types.BMEdgeSeq" module="bmesh.types" names="bmesh.types.BMEdgeSeq"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMEdgeSeq</desc_name></desc_signature>
                <desc_content>
                    <index entries="['single',\ u'ensure_lookup_table()\ (bmesh.types.BMEdgeSeq\ method)',\ u'bmesh.types.BMEdgeSeq.ensure_lookup_table',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMEdgeSeq" first="False" fullname="BMEdgeSeq.ensure_lookup_table" ids="bmesh.types.BMEdgeSeq.ensure_lookup_table" module="bmesh.types" names="bmesh.types.BMEdgeSeq.ensure_lookup_table"><desc_name xml:space="preserve">ensure_lookup_table</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Ensure internal data needed for int subscription is initialized with verts/edges/faces, eg <literal>bm.verts[index]</literal>.</paragraph>
                            <paragraph>This needs to be called again after adding/removing data in this sequence.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get()\ (bmesh.types.BMEdgeSeq\ method)',\ u'bmesh.types.BMEdgeSeq.get',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMEdgeSeq" first="False" fullname="BMEdgeSeq.get" ids="bmesh.types.BMEdgeSeq.get" module="bmesh.types" names="bmesh.types.BMEdgeSeq.get"><desc_name xml:space="preserve">get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">verts</desc_parameter><desc_parameter xml:space="preserve">fallback=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return an edge which uses the <strong>verts</strong> passed.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">verts</literal_strong> (<reference internal="True" refid="bmesh.types.BMVert" reftitle="bmesh.types.BMVert"><literal classes="xref py py-class">BMVert</literal></reference>) – Sequence of verts.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">fallback</literal_strong> – Return this value if nothing is found.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The edge found or None</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMEdge" reftitle="bmesh.types.BMEdge"><literal classes="xref py py-class">BMEdge</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'index_update()\ (bmesh.types.BMEdgeSeq\ method)',\ u'bmesh.types.BMEdgeSeq.index_update',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMEdgeSeq" first="False" fullname="BMEdgeSeq.index_update" ids="bmesh.types.BMEdgeSeq.index_update" module="bmesh.types" names="bmesh.types.BMEdgeSeq.index_update"><desc_name xml:space="preserve">index_update</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Initialize the index values of this sequence.</paragraph>
                            <paragraph>This is the equivalent of looping over all elements and assigning the index values.</paragraph>
                            <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">for index, ele in enumerate(sequence):
    ele.index = index</literal_block>
                            <note>
                                <paragraph>Running this on sequences besides <reference internal="True" refid="bmesh.types.BMesh.verts" reftitle="bmesh.types.BMesh.verts"><literal classes="xref py py-class">BMesh.verts</literal></reference>, <reference internal="True" refid="bmesh.types.BMesh.edges" reftitle="bmesh.types.BMesh.edges"><literal classes="xref py py-class">BMesh.edges</literal></reference>, <reference internal="True" refid="bmesh.types.BMesh.faces" reftitle="bmesh.types.BMesh.faces"><literal classes="xref py py-class">BMesh.faces</literal></reference>
                                    works but wont result in each element having a valid index, instead its order in the sequence will be set.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'new()\ (bmesh.types.BMEdgeSeq\ method)',\ u'bmesh.types.BMEdgeSeq.new',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMEdgeSeq" first="False" fullname="BMEdgeSeq.new" ids="bmesh.types.BMEdgeSeq.new" module="bmesh.types" names="bmesh.types.BMEdgeSeq.new"><desc_name xml:space="preserve">new</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">verts</desc_parameter><desc_parameter xml:space="preserve">example=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create a new edge from a given pair of verts.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">verts</literal_strong> (pair of <reference internal="True" refid="bmesh.types.BMVert" reftitle="bmesh.types.BMVert"><literal classes="xref py py-class">BMVert</literal></reference>) – Vertex pair.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">example</literal_strong> (<reference internal="True" refid="bmesh.types.BMEdge" reftitle="bmesh.types.BMEdge"><literal classes="xref py py-class">BMEdge</literal></reference>) – Existing edge to initialize settings (optional argument).</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The newly created edge.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMEdge" reftitle="bmesh.types.BMEdge"><literal classes="xref py py-class">BMEdge</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'remove()\ (bmesh.types.BMEdgeSeq\ method)',\ u'bmesh.types.BMEdgeSeq.remove',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMEdgeSeq" first="False" fullname="BMEdgeSeq.remove" ids="bmesh.types.BMEdgeSeq.remove" module="bmesh.types" names="bmesh.types.BMEdgeSeq.remove"><desc_name xml:space="preserve">remove</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">edge</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Remove an edge.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'sort()\ (bmesh.types.BMEdgeSeq\ method)',\ u'bmesh.types.BMEdgeSeq.sort',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMEdgeSeq" first="False" fullname="BMEdgeSeq.sort" ids="bmesh.types.BMEdgeSeq.sort" module="bmesh.types" names="bmesh.types.BMEdgeSeq.sort"><desc_name xml:space="preserve">sort</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">key=None</desc_parameter><desc_parameter xml:space="preserve">reverse=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Sort the elements of this sequence, using an optional custom sort key.
                                Indices of elements are not changed, BMElemeSeq.index_update() can be used for that.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">key</literal_strong> – The key that sets the ordering of the elements.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">reverse</literal_strong> – Reverse the order of the elements</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                            <note>
                                <paragraph>When the ‘key’ argument is not provided, the elements are reordered following their current index value.
                                    In particular this can be used by setting indices manually before calling this method.</paragraph>
                            </note>
                            <warning>
                                <paragraph>Existing references to the N’th element, will continue to point the data at that index.</paragraph>
                            </warning>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'layers\ (bmesh.types.BMEdgeSeq\ attribute)',\ u'bmesh.types.BMEdgeSeq.layers',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMEdgeSeq" first="False" fullname="BMEdgeSeq.layers" ids="bmesh.types.BMEdgeSeq.layers" module="bmesh.types" names="bmesh.types.BMEdgeSeq.layers"><desc_name xml:space="preserve">layers</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>custom-data layers (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMLayerAccessEdge" reftitle="bmesh.types.BMLayerAccessEdge"><literal classes="xref py py-class">BMLayerAccessEdge</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BMFaceSeq\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMFaceSeq',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMFaceSeq" ids="bmesh.types.BMFaceSeq" module="bmesh.types" names="bmesh.types.BMFaceSeq"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMFaceSeq</desc_name></desc_signature>
                <desc_content>
                    <index entries="['single',\ u'ensure_lookup_table()\ (bmesh.types.BMFaceSeq\ method)',\ u'bmesh.types.BMFaceSeq.ensure_lookup_table',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFaceSeq" first="False" fullname="BMFaceSeq.ensure_lookup_table" ids="bmesh.types.BMFaceSeq.ensure_lookup_table" module="bmesh.types" names="bmesh.types.BMFaceSeq.ensure_lookup_table"><desc_name xml:space="preserve">ensure_lookup_table</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Ensure internal data needed for int subscription is initialized with verts/edges/faces, eg <literal>bm.verts[index]</literal>.</paragraph>
                            <paragraph>This needs to be called again after adding/removing data in this sequence.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get()\ (bmesh.types.BMFaceSeq\ method)',\ u'bmesh.types.BMFaceSeq.get',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFaceSeq" first="False" fullname="BMFaceSeq.get" ids="bmesh.types.BMFaceSeq.get" module="bmesh.types" names="bmesh.types.BMFaceSeq.get"><desc_name xml:space="preserve">get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">verts</desc_parameter><desc_parameter xml:space="preserve">fallback=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return a face which uses the <strong>verts</strong> passed.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">verts</literal_strong> (<reference internal="True" refid="bmesh.types.BMVert" reftitle="bmesh.types.BMVert"><literal classes="xref py py-class">BMVert</literal></reference>) – Sequence of verts.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">fallback</literal_strong> – Return this value if nothing is found.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The face found or None</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMFace" reftitle="bmesh.types.BMFace"><literal classes="xref py py-class">BMFace</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'index_update()\ (bmesh.types.BMFaceSeq\ method)',\ u'bmesh.types.BMFaceSeq.index_update',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFaceSeq" first="False" fullname="BMFaceSeq.index_update" ids="bmesh.types.BMFaceSeq.index_update" module="bmesh.types" names="bmesh.types.BMFaceSeq.index_update"><desc_name xml:space="preserve">index_update</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Initialize the index values of this sequence.</paragraph>
                            <paragraph>This is the equivalent of looping over all elements and assigning the index values.</paragraph>
                            <literal_block force_highlighting="True" highlight_args="{}" language="python" linenos="False" xml:space="preserve">for index, ele in enumerate(sequence):
    ele.index = index</literal_block>
                            <note>
                                <paragraph>Running this on sequences besides <reference internal="True" refid="bmesh.types.BMesh.verts" reftitle="bmesh.types.BMesh.verts"><literal classes="xref py py-class">BMesh.verts</literal></reference>, <reference internal="True" refid="bmesh.types.BMesh.edges" reftitle="bmesh.types.BMesh.edges"><literal classes="xref py py-class">BMesh.edges</literal></reference>, <reference internal="True" refid="bmesh.types.BMesh.faces" reftitle="bmesh.types.BMesh.faces"><literal classes="xref py py-class">BMesh.faces</literal></reference>
                                    works but wont result in each element having a valid index, instead its order in the sequence will be set.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'new()\ (bmesh.types.BMFaceSeq\ method)',\ u'bmesh.types.BMFaceSeq.new',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFaceSeq" first="False" fullname="BMFaceSeq.new" ids="bmesh.types.BMFaceSeq.new" module="bmesh.types" names="bmesh.types.BMFaceSeq.new"><desc_name xml:space="preserve">new</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">verts</desc_parameter><desc_parameter xml:space="preserve">example=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create a new face from a given set of verts.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">verts</literal_strong> (<reference internal="True" refid="bmesh.types.BMVert" reftitle="bmesh.types.BMVert"><literal classes="xref py py-class">BMVert</literal></reference>) – Sequence of 3 or more verts.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">example</literal_strong> (<reference internal="True" refid="bmesh.types.BMFace" reftitle="bmesh.types.BMFace"><literal classes="xref py py-class">BMFace</literal></reference>) – Existing face to initialize settings (optional argument).</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The newly created face.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMFace" reftitle="bmesh.types.BMFace"><literal classes="xref py py-class">BMFace</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'remove()\ (bmesh.types.BMFaceSeq\ method)',\ u'bmesh.types.BMFaceSeq.remove',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFaceSeq" first="False" fullname="BMFaceSeq.remove" ids="bmesh.types.BMFaceSeq.remove" module="bmesh.types" names="bmesh.types.BMFaceSeq.remove"><desc_name xml:space="preserve">remove</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">face</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Remove a face.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'sort()\ (bmesh.types.BMFaceSeq\ method)',\ u'bmesh.types.BMFaceSeq.sort',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMFaceSeq" first="False" fullname="BMFaceSeq.sort" ids="bmesh.types.BMFaceSeq.sort" module="bmesh.types" names="bmesh.types.BMFaceSeq.sort"><desc_name xml:space="preserve">sort</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">key=None</desc_parameter><desc_parameter xml:space="preserve">reverse=False</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Sort the elements of this sequence, using an optional custom sort key.
                                Indices of elements are not changed, BMElemeSeq.index_update() can be used for that.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">key</literal_strong> – The key that sets the ordering of the elements.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">reverse</literal_strong> – Reverse the order of the elements</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                            <note>
                                <paragraph>When the ‘key’ argument is not provided, the elements are reordered following their current index value.
                                    In particular this can be used by setting indices manually before calling this method.</paragraph>
                            </note>
                            <warning>
                                <paragraph>Existing references to the N’th element, will continue to point the data at that index.</paragraph>
                            </warning>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'active\ (bmesh.types.BMFaceSeq\ attribute)',\ u'bmesh.types.BMFaceSeq.active',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMFaceSeq" first="False" fullname="BMFaceSeq.active" ids="bmesh.types.BMFaceSeq.active" module="bmesh.types" names="bmesh.types.BMFaceSeq.active"><desc_name xml:space="preserve">active</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>active face.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMFace" reftitle="bmesh.types.BMFace"><literal classes="xref py py-class">BMFace</literal></reference> or None</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'layers\ (bmesh.types.BMFaceSeq\ attribute)',\ u'bmesh.types.BMFaceSeq.layers',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMFaceSeq" first="False" fullname="BMFaceSeq.layers" ids="bmesh.types.BMFaceSeq.layers" module="bmesh.types" names="bmesh.types.BMFaceSeq.layers"><desc_name xml:space="preserve">layers</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>custom-data layers (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMLayerAccessFace" reftitle="bmesh.types.BMLayerAccessFace"><literal classes="xref py py-class">BMLayerAccessFace</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BMLoopSeq\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMLoopSeq',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMLoopSeq" ids="bmesh.types.BMLoopSeq" module="bmesh.types" names="bmesh.types.BMLoopSeq"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMLoopSeq</desc_name></desc_signature>
                <desc_content>
                    <index entries="['single',\ u'layers\ (bmesh.types.BMLoopSeq\ attribute)',\ u'bmesh.types.BMLoopSeq.layers',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLoopSeq" first="False" fullname="BMLoopSeq.layers" ids="bmesh.types.BMLoopSeq.layers" module="bmesh.types" names="bmesh.types.BMLoopSeq.layers"><desc_name xml:space="preserve">layers</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>custom-data layers (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMLayerAccessLoop" reftitle="bmesh.types.BMLayerAccessLoop"><literal classes="xref py py-class">BMLayerAccessLoop</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BMIter\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMIter',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMIter" ids="bmesh.types.BMIter" module="bmesh.types" names="bmesh.types.BMIter"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMIter</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Internal BMesh type for looping over verts/faces/edges,
                        used for iterating over <reference internal="True" refid="bmesh.types.BMElemSeq" reftitle="bmesh.types.BMElemSeq"><literal classes="xref py py-class">BMElemSeq</literal></reference> types.</paragraph>
                </desc_content>
            </desc>
        </section>
        <section ids="selection-history" names="selection\ history">
            <title>Selection History</title>
            <index entries="['single',\ u'BMEditSelSeq\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMEditSelSeq',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMEditSelSeq" ids="bmesh.types.BMEditSelSeq" module="bmesh.types" names="bmesh.types.BMEditSelSeq"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMEditSelSeq</desc_name></desc_signature>
                <desc_content>
                    <index entries="['single',\ u'add()\ (bmesh.types.BMEditSelSeq\ method)',\ u'bmesh.types.BMEditSelSeq.add',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMEditSelSeq" first="False" fullname="BMEditSelSeq.add" ids="bmesh.types.BMEditSelSeq.add" module="bmesh.types" names="bmesh.types.BMEditSelSeq.add"><desc_name xml:space="preserve">add</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">element</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Add an element to the selection history (no action taken if its already added).</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'clear()\ (bmesh.types.BMEditSelSeq\ method)',\ u'bmesh.types.BMEditSelSeq.clear',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMEditSelSeq" first="False" fullname="BMEditSelSeq.clear" ids="bmesh.types.BMEditSelSeq.clear" module="bmesh.types" names="bmesh.types.BMEditSelSeq.clear"><desc_name xml:space="preserve">clear</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Empties the selection history.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'discard()\ (bmesh.types.BMEditSelSeq\ method)',\ u'bmesh.types.BMEditSelSeq.discard',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMEditSelSeq" first="False" fullname="BMEditSelSeq.discard" ids="bmesh.types.BMEditSelSeq.discard" module="bmesh.types" names="bmesh.types.BMEditSelSeq.discard"><desc_name xml:space="preserve">discard</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">element</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Discard an element from the selection history.</paragraph>
                            <paragraph>Like remove but doesn’t raise an error when the elements not in the selection list.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'remove()\ (bmesh.types.BMEditSelSeq\ method)',\ u'bmesh.types.BMEditSelSeq.remove',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMEditSelSeq" first="False" fullname="BMEditSelSeq.remove" ids="bmesh.types.BMEditSelSeq.remove" module="bmesh.types" names="bmesh.types.BMEditSelSeq.remove"><desc_name xml:space="preserve">remove</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">element</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Remove an element from the selection history.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'validate()\ (bmesh.types.BMEditSelSeq\ method)',\ u'bmesh.types.BMEditSelSeq.validate',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMEditSelSeq" first="False" fullname="BMEditSelSeq.validate" ids="bmesh.types.BMEditSelSeq.validate" module="bmesh.types" names="bmesh.types.BMEditSelSeq.validate"><desc_name xml:space="preserve">validate</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Ensures all elements in the selection history are selected.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'active\ (bmesh.types.BMEditSelSeq\ attribute)',\ u'bmesh.types.BMEditSelSeq.active',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMEditSelSeq" first="False" fullname="BMEditSelSeq.active" ids="bmesh.types.BMEditSelSeq.active" module="bmesh.types" names="bmesh.types.BMEditSelSeq.active"><desc_name xml:space="preserve">active</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The last selected element or None (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMVert" reftitle="bmesh.types.BMVert"><literal classes="xref py py-class">BMVert</literal></reference>, <reference internal="True" refid="bmesh.types.BMEdge" reftitle="bmesh.types.BMEdge"><literal classes="xref py py-class">BMEdge</literal></reference> or <reference internal="True" refid="bmesh.types.BMFace" reftitle="bmesh.types.BMFace"><literal classes="xref py py-class">BMFace</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BMEditSelIter\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMEditSelIter',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMEditSelIter" ids="bmesh.types.BMEditSelIter" module="bmesh.types" names="bmesh.types.BMEditSelIter"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMEditSelIter</desc_name></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
        </section>
        <section ids="custom-data-layer-access" names="custom-data\ layer\ access">
            <title>Custom-Data Layer Access</title>
            <index entries="['single',\ u'BMLayerAccessVert\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMLayerAccessVert',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMLayerAccessVert" ids="bmesh.types.BMLayerAccessVert" module="bmesh.types" names="bmesh.types.BMLayerAccessVert"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMLayerAccessVert</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Exposes custom-data layer attributes.</paragraph>
                    <index entries="['single',\ u'bevel_weight\ (bmesh.types.BMLayerAccessVert\ attribute)',\ u'bmesh.types.BMLayerAccessVert.bevel_weight',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessVert" first="False" fullname="BMLayerAccessVert.bevel_weight" ids="bmesh.types.BMLayerAccessVert.bevel_weight" module="bmesh.types" names="bmesh.types.BMLayerAccessVert.bevel_weight"><desc_name xml:space="preserve">bevel_weight</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Bevel weight float in [0 - 1].</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'deform\ (bmesh.types.BMLayerAccessVert\ attribute)',\ u'bmesh.types.BMLayerAccessVert.deform',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessVert" first="False" fullname="BMLayerAccessVert.deform" ids="bmesh.types.BMLayerAccessVert.deform" module="bmesh.types" names="bmesh.types.BMLayerAccessVert.deform"><desc_name xml:space="preserve">deform</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Vertex deform weight <reference internal="True" refid="bmesh.types.BMDeformVert" reftitle="bmesh.types.BMDeformVert"><literal classes="xref py py-class">BMDeformVert</literal></reference> (TODO).</paragraph>
                            <paragraph>type: <reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'float\ (bmesh.types.BMLayerAccessVert\ attribute)',\ u'bmesh.types.BMLayerAccessVert.float',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessVert" first="False" fullname="BMLayerAccessVert.float" ids="bmesh.types.BMLayerAccessVert.float" module="bmesh.types" names="bmesh.types.BMLayerAccessVert.float"><desc_name xml:space="preserve">float</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Generic float custom-data layer.</paragraph>
                            <paragraph>type: <reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'int\ (bmesh.types.BMLayerAccessVert\ attribute)',\ u'bmesh.types.BMLayerAccessVert.int',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessVert" first="False" fullname="BMLayerAccessVert.int" ids="bmesh.types.BMLayerAccessVert.int" module="bmesh.types" names="bmesh.types.BMLayerAccessVert.int"><desc_name xml:space="preserve">int</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Generic int custom-data layer.</paragraph>
                            <paragraph>type: <reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'paint_mask\ (bmesh.types.BMLayerAccessVert\ attribute)',\ u'bmesh.types.BMLayerAccessVert.paint_mask',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessVert" first="False" fullname="BMLayerAccessVert.paint_mask" ids="bmesh.types.BMLayerAccessVert.paint_mask" module="bmesh.types" names="bmesh.types.BMLayerAccessVert.paint_mask"><desc_name xml:space="preserve">paint_mask</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Accessor for paint mask layer.</paragraph>
                            <paragraph>type: <reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'shape\ (bmesh.types.BMLayerAccessVert\ attribute)',\ u'bmesh.types.BMLayerAccessVert.shape',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessVert" first="False" fullname="BMLayerAccessVert.shape" ids="bmesh.types.BMLayerAccessVert.shape" module="bmesh.types" names="bmesh.types.BMLayerAccessVert.shape"><desc_name xml:space="preserve">shape</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Vertex shapekey absolute location (as a 3D Vector).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'skin\ (bmesh.types.BMLayerAccessVert\ attribute)',\ u'bmesh.types.BMLayerAccessVert.skin',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessVert" first="False" fullname="BMLayerAccessVert.skin" ids="bmesh.types.BMLayerAccessVert.skin" module="bmesh.types" names="bmesh.types.BMLayerAccessVert.skin"><desc_name xml:space="preserve">skin</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Accessor for skin layer.</paragraph>
                            <paragraph>type: <reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'string\ (bmesh.types.BMLayerAccessVert\ attribute)',\ u'bmesh.types.BMLayerAccessVert.string',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessVert" first="False" fullname="BMLayerAccessVert.string" ids="bmesh.types.BMLayerAccessVert.string" module="bmesh.types" names="bmesh.types.BMLayerAccessVert.string"><desc_name xml:space="preserve">string</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Generic string custom-data layer (exposed as bytes, 255 max length).</paragraph>
                            <paragraph>type: <reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BMLayerAccessEdge\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMLayerAccessEdge',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMLayerAccessEdge" ids="bmesh.types.BMLayerAccessEdge" module="bmesh.types" names="bmesh.types.BMLayerAccessEdge"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMLayerAccessEdge</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Exposes custom-data layer attributes.</paragraph>
                    <index entries="['single',\ u'bevel_weight\ (bmesh.types.BMLayerAccessEdge\ attribute)',\ u'bmesh.types.BMLayerAccessEdge.bevel_weight',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessEdge" first="False" fullname="BMLayerAccessEdge.bevel_weight" ids="bmesh.types.BMLayerAccessEdge.bevel_weight" module="bmesh.types" names="bmesh.types.BMLayerAccessEdge.bevel_weight"><desc_name xml:space="preserve">bevel_weight</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Bevel weight float in [0 - 1].</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'crease\ (bmesh.types.BMLayerAccessEdge\ attribute)',\ u'bmesh.types.BMLayerAccessEdge.crease',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessEdge" first="False" fullname="BMLayerAccessEdge.crease" ids="bmesh.types.BMLayerAccessEdge.crease" module="bmesh.types" names="bmesh.types.BMLayerAccessEdge.crease"><desc_name xml:space="preserve">crease</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Edge crease for subsurf - float in [0 - 1].</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'float\ (bmesh.types.BMLayerAccessEdge\ attribute)',\ u'bmesh.types.BMLayerAccessEdge.float',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessEdge" first="False" fullname="BMLayerAccessEdge.float" ids="bmesh.types.BMLayerAccessEdge.float" module="bmesh.types" names="bmesh.types.BMLayerAccessEdge.float"><desc_name xml:space="preserve">float</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Generic float custom-data layer.</paragraph>
                            <paragraph>type: <reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'freestyle\ (bmesh.types.BMLayerAccessEdge\ attribute)',\ u'bmesh.types.BMLayerAccessEdge.freestyle',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessEdge" first="False" fullname="BMLayerAccessEdge.freestyle" ids="bmesh.types.BMLayerAccessEdge.freestyle" module="bmesh.types" names="bmesh.types.BMLayerAccessEdge.freestyle"><desc_name xml:space="preserve">freestyle</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Accessor for Freestyle edge layer.</paragraph>
                            <paragraph>type: <reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'int\ (bmesh.types.BMLayerAccessEdge\ attribute)',\ u'bmesh.types.BMLayerAccessEdge.int',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessEdge" first="False" fullname="BMLayerAccessEdge.int" ids="bmesh.types.BMLayerAccessEdge.int" module="bmesh.types" names="bmesh.types.BMLayerAccessEdge.int"><desc_name xml:space="preserve">int</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Generic int custom-data layer.</paragraph>
                            <paragraph>type: <reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'string\ (bmesh.types.BMLayerAccessEdge\ attribute)',\ u'bmesh.types.BMLayerAccessEdge.string',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessEdge" first="False" fullname="BMLayerAccessEdge.string" ids="bmesh.types.BMLayerAccessEdge.string" module="bmesh.types" names="bmesh.types.BMLayerAccessEdge.string"><desc_name xml:space="preserve">string</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Generic string custom-data layer (exposed as bytes, 255 max length).</paragraph>
                            <paragraph>type: <reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BMLayerAccessFace\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMLayerAccessFace',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMLayerAccessFace" ids="bmesh.types.BMLayerAccessFace" module="bmesh.types" names="bmesh.types.BMLayerAccessFace"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMLayerAccessFace</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Exposes custom-data layer attributes.</paragraph>
                    <index entries="['single',\ u'face_map\ (bmesh.types.BMLayerAccessFace\ attribute)',\ u'bmesh.types.BMLayerAccessFace.face_map',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessFace" first="False" fullname="BMLayerAccessFace.face_map" ids="bmesh.types.BMLayerAccessFace.face_map" module="bmesh.types" names="bmesh.types.BMLayerAccessFace.face_map"><desc_name xml:space="preserve">face_map</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>FaceMap custom-data layer.</paragraph>
                            <paragraph>type: <reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'float\ (bmesh.types.BMLayerAccessFace\ attribute)',\ u'bmesh.types.BMLayerAccessFace.float',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessFace" first="False" fullname="BMLayerAccessFace.float" ids="bmesh.types.BMLayerAccessFace.float" module="bmesh.types" names="bmesh.types.BMLayerAccessFace.float"><desc_name xml:space="preserve">float</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Generic float custom-data layer.</paragraph>
                            <paragraph>type: <reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'freestyle\ (bmesh.types.BMLayerAccessFace\ attribute)',\ u'bmesh.types.BMLayerAccessFace.freestyle',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessFace" first="False" fullname="BMLayerAccessFace.freestyle" ids="bmesh.types.BMLayerAccessFace.freestyle" module="bmesh.types" names="bmesh.types.BMLayerAccessFace.freestyle"><desc_name xml:space="preserve">freestyle</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Accessor for Freestyle face layer.</paragraph>
                            <paragraph>type: <reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'int\ (bmesh.types.BMLayerAccessFace\ attribute)',\ u'bmesh.types.BMLayerAccessFace.int',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessFace" first="False" fullname="BMLayerAccessFace.int" ids="bmesh.types.BMLayerAccessFace.int" module="bmesh.types" names="bmesh.types.BMLayerAccessFace.int"><desc_name xml:space="preserve">int</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Generic int custom-data layer.</paragraph>
                            <paragraph>type: <reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'string\ (bmesh.types.BMLayerAccessFace\ attribute)',\ u'bmesh.types.BMLayerAccessFace.string',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessFace" first="False" fullname="BMLayerAccessFace.string" ids="bmesh.types.BMLayerAccessFace.string" module="bmesh.types" names="bmesh.types.BMLayerAccessFace.string"><desc_name xml:space="preserve">string</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Generic string custom-data layer (exposed as bytes, 255 max length).</paragraph>
                            <paragraph>type: <reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BMLayerAccessLoop\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMLayerAccessLoop',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMLayerAccessLoop" ids="bmesh.types.BMLayerAccessLoop" module="bmesh.types" names="bmesh.types.BMLayerAccessLoop"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMLayerAccessLoop</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Exposes custom-data layer attributes.</paragraph>
                    <index entries="['single',\ u'color\ (bmesh.types.BMLayerAccessLoop\ attribute)',\ u'bmesh.types.BMLayerAccessLoop.color',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessLoop" first="False" fullname="BMLayerAccessLoop.color" ids="bmesh.types.BMLayerAccessLoop.color" module="bmesh.types" names="bmesh.types.BMLayerAccessLoop.color"><desc_name xml:space="preserve">color</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Accessor for vertex color layer.</paragraph>
                            <paragraph>type: <reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'float\ (bmesh.types.BMLayerAccessLoop\ attribute)',\ u'bmesh.types.BMLayerAccessLoop.float',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessLoop" first="False" fullname="BMLayerAccessLoop.float" ids="bmesh.types.BMLayerAccessLoop.float" module="bmesh.types" names="bmesh.types.BMLayerAccessLoop.float"><desc_name xml:space="preserve">float</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Generic float custom-data layer.</paragraph>
                            <paragraph>type: <reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'int\ (bmesh.types.BMLayerAccessLoop\ attribute)',\ u'bmesh.types.BMLayerAccessLoop.int',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessLoop" first="False" fullname="BMLayerAccessLoop.int" ids="bmesh.types.BMLayerAccessLoop.int" module="bmesh.types" names="bmesh.types.BMLayerAccessLoop.int"><desc_name xml:space="preserve">int</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Generic int custom-data layer.</paragraph>
                            <paragraph>type: <reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'string\ (bmesh.types.BMLayerAccessLoop\ attribute)',\ u'bmesh.types.BMLayerAccessLoop.string',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessLoop" first="False" fullname="BMLayerAccessLoop.string" ids="bmesh.types.BMLayerAccessLoop.string" module="bmesh.types" names="bmesh.types.BMLayerAccessLoop.string"><desc_name xml:space="preserve">string</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Generic string custom-data layer (exposed as bytes, 255 max length).</paragraph>
                            <paragraph>type: <reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'uv\ (bmesh.types.BMLayerAccessLoop\ attribute)',\ u'bmesh.types.BMLayerAccessLoop.uv',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerAccessLoop" first="False" fullname="BMLayerAccessLoop.uv" ids="bmesh.types.BMLayerAccessLoop.uv" module="bmesh.types" names="bmesh.types.BMLayerAccessLoop.uv"><desc_name xml:space="preserve">uv</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Accessor for <reference internal="True" refid="bmesh.types.BMLoopUV" reftitle="bmesh.types.BMLoopUV"><literal classes="xref py py-class">BMLoopUV</literal></reference> UV (as a 2D Vector).</paragraph>
                            <paragraph>type: <reference internal="True" refid="bmesh.types.BMLayerCollection" reftitle="bmesh.types.BMLayerCollection"><literal classes="xref py py-class">BMLayerCollection</literal></reference></paragraph>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BMLayerCollection\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMLayerCollection',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMLayerCollection" ids="bmesh.types.BMLayerCollection" module="bmesh.types" names="bmesh.types.BMLayerCollection"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMLayerCollection</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Gives access to a collection of custom-data layers of the same type and behaves like python dictionaries, except for the ability to do list like index access.</paragraph>
                    <index entries="['single',\ u'get()\ (bmesh.types.BMLayerCollection\ method)',\ u'bmesh.types.BMLayerCollection.get',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMLayerCollection" first="False" fullname="BMLayerCollection.get" ids="bmesh.types.BMLayerCollection.get" module="bmesh.types" names="bmesh.types.BMLayerCollection.get"><desc_name xml:space="preserve">get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">key</desc_parameter><desc_parameter xml:space="preserve">default=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns the value of the layer matching the key or default
                                when not found (matches pythons dictionary function of the same name).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">key</literal_strong> (<literal_emphasis>string</literal_emphasis>) – The key associated with the layer.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">default</literal_strong> (<literal_emphasis>Undefined</literal_emphasis>) – Optional argument for the value to return if
                                                    <emphasis>key</emphasis> is not found.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'items()\ (bmesh.types.BMLayerCollection\ method)',\ u'bmesh.types.BMLayerCollection.items',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMLayerCollection" first="False" fullname="BMLayerCollection.items" ids="bmesh.types.BMLayerCollection.items" module="bmesh.types" names="bmesh.types.BMLayerCollection.items"><desc_name xml:space="preserve">items</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return the identifiers of collection members
                                (matching pythons dict.items() functionality).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>(key, value) pairs for each member of this collection.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>list of tuples</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'keys()\ (bmesh.types.BMLayerCollection\ method)',\ u'bmesh.types.BMLayerCollection.keys',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMLayerCollection" first="False" fullname="BMLayerCollection.keys" ids="bmesh.types.BMLayerCollection.keys" module="bmesh.types" names="bmesh.types.BMLayerCollection.keys"><desc_name xml:space="preserve">keys</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return the identifiers of collection members
                                (matching pythons dict.keys() functionality).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>the identifiers for each member of this collection.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>list of strings</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'new()\ (bmesh.types.BMLayerCollection\ method)',\ u'bmesh.types.BMLayerCollection.new',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMLayerCollection" first="False" fullname="BMLayerCollection.new" ids="bmesh.types.BMLayerCollection.new" module="bmesh.types" names="bmesh.types.BMLayerCollection.new"><desc_name xml:space="preserve">new</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create a new layer</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">name</literal_strong> (<literal_emphasis>string</literal_emphasis>) – Optional name argument (will be made unique).</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The newly created layer.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMLayerItem" reftitle="bmesh.types.BMLayerItem"><literal classes="xref py py-class">BMLayerItem</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'remove()\ (bmesh.types.BMLayerCollection\ method)',\ u'bmesh.types.BMLayerCollection.remove',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMLayerCollection" first="False" fullname="BMLayerCollection.remove" ids="bmesh.types.BMLayerCollection.remove" module="bmesh.types" names="bmesh.types.BMLayerCollection.remove"><desc_name xml:space="preserve">remove</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">layer</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Remove a layer</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">layer</literal_strong> (<reference internal="True" refid="bmesh.types.BMLayerItem" reftitle="bmesh.types.BMLayerItem"><literal classes="xref py py-class">BMLayerItem</literal></reference>) – The layer to remove.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'values()\ (bmesh.types.BMLayerCollection\ method)',\ u'bmesh.types.BMLayerCollection.values',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMLayerCollection" first="False" fullname="BMLayerCollection.values" ids="bmesh.types.BMLayerCollection.values" module="bmesh.types" names="bmesh.types.BMLayerCollection.values"><desc_name xml:space="preserve">values</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return the values of collection
                                (matching pythons dict.values() functionality).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>the members of this collection.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>list</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'verify()\ (bmesh.types.BMLayerCollection\ method)',\ u'bmesh.types.BMLayerCollection.verify',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMLayerCollection" first="False" fullname="BMLayerCollection.verify" ids="bmesh.types.BMLayerCollection.verify" module="bmesh.types" names="bmesh.types.BMLayerCollection.verify"><desc_name xml:space="preserve">verify</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Create a new layer or return an existing active layer</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The newly verified layer.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMLayerItem" reftitle="bmesh.types.BMLayerItem"><literal classes="xref py py-class">BMLayerItem</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'active\ (bmesh.types.BMLayerCollection\ attribute)',\ u'bmesh.types.BMLayerCollection.active',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerCollection" first="False" fullname="BMLayerCollection.active" ids="bmesh.types.BMLayerCollection.active" module="bmesh.types" names="bmesh.types.BMLayerCollection.active"><desc_name xml:space="preserve">active</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The active layer of this type (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" refid="bmesh.types.BMLayerItem" reftitle="bmesh.types.BMLayerItem"><literal classes="xref py py-class">BMLayerItem</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_singleton\ (bmesh.types.BMLayerCollection\ attribute)',\ u'bmesh.types.BMLayerCollection.is_singleton',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerCollection" first="False" fullname="BMLayerCollection.is_singleton" ids="bmesh.types.BMLayerCollection.is_singleton" module="bmesh.types" names="bmesh.types.BMLayerCollection.is_singleton"><desc_name xml:space="preserve">is_singleton</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>True if there can exists only one layer of this type (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BMLayerItem\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMLayerItem',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMLayerItem" ids="bmesh.types.BMLayerItem" module="bmesh.types" names="bmesh.types.BMLayerItem"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMLayerItem</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Exposes a single custom data layer, their main purpose is for use as item accessors to custom-data when used with vert/edge/face/loop data.</paragraph>
                    <index entries="['single',\ u'copy_from()\ (bmesh.types.BMLayerItem\ method)',\ u'bmesh.types.BMLayerItem.copy_from',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMLayerItem" first="False" fullname="BMLayerItem.copy_from" ids="bmesh.types.BMLayerItem.copy_from" module="bmesh.types" names="bmesh.types.BMLayerItem.copy_from"><desc_name xml:space="preserve">copy_from</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">other</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return a copy of the layer</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">other</literal_strong> – Another layer to copy from.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">other</literal_strong> – <reference internal="True" refid="bmesh.types.BMLayerItem" reftitle="bmesh.types.BMLayerItem"><literal classes="xref py py-class">BMLayerItem</literal></reference></paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'name\ (bmesh.types.BMLayerItem\ attribute)',\ u'bmesh.types.BMLayerItem.name',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLayerItem" first="False" fullname="BMLayerItem.name" ids="bmesh.types.BMLayerItem.name" module="bmesh.types" names="bmesh.types.BMLayerItem.name"><desc_name xml:space="preserve">name</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The layers unique name (read-only).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
        </section>
        <section ids="custom-data-layer-types" names="custom-data\ layer\ types">
            <title>Custom-Data Layer Types</title>
            <index entries="['single',\ u'BMLoopUV\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMLoopUV',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMLoopUV" ids="bmesh.types.BMLoopUV" module="bmesh.types" names="bmesh.types.BMLoopUV"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMLoopUV</desc_name></desc_signature>
                <desc_content>
                    <index entries="['single',\ u'pin_uv\ (bmesh.types.BMLoopUV\ attribute)',\ u'bmesh.types.BMLoopUV.pin_uv',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLoopUV" first="False" fullname="BMLoopUV.pin_uv" ids="bmesh.types.BMLoopUV.pin_uv" module="bmesh.types" names="bmesh.types.BMLoopUV.pin_uv"><desc_name xml:space="preserve">pin_uv</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>UV pin state.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'select\ (bmesh.types.BMLoopUV\ attribute)',\ u'bmesh.types.BMLoopUV.select',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLoopUV" first="False" fullname="BMLoopUV.select" ids="bmesh.types.BMLoopUV.select" module="bmesh.types" names="bmesh.types.BMLoopUV.select"><desc_name xml:space="preserve">select</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>UV select state.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'select_edge\ (bmesh.types.BMLoopUV\ attribute)',\ u'bmesh.types.BMLoopUV.select_edge',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLoopUV" first="False" fullname="BMLoopUV.select_edge" ids="bmesh.types.BMLoopUV.select_edge" module="bmesh.types" names="bmesh.types.BMLoopUV.select_edge"><desc_name xml:space="preserve">select_edge</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>UV edge select state.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'uv\ (bmesh.types.BMLoopUV\ attribute)',\ u'bmesh.types.BMLoopUV.uv',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="BMLoopUV" first="False" fullname="BMLoopUV.uv" ids="bmesh.types.BMLoopUV.uv" module="bmesh.types" names="bmesh.types.BMLoopUV.uv"><desc_name xml:space="preserve">uv</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Loops UV (as a 2D Vector).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="mathutils.Vector" refuri="mathutils#mathutils.Vector"><literal classes="xref py py-class">mathutils.Vector</literal></reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ u'BMDeformVert\ (class\ in\ bmesh.types)',\ u'bmesh.types.BMDeformVert',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="BMDeformVert" ids="bmesh.types.BMDeformVert" module="bmesh.types" names="bmesh.types.BMDeformVert"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bmesh.types.</desc_addname><desc_name xml:space="preserve">BMDeformVert</desc_name></desc_signature>
                <desc_content>
                    <index entries="['single',\ u'clear()\ (bmesh.types.BMDeformVert\ method)',\ u'bmesh.types.BMDeformVert.clear',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMDeformVert" first="False" fullname="BMDeformVert.clear" ids="bmesh.types.BMDeformVert.clear" module="bmesh.types" names="bmesh.types.BMDeformVert.clear"><desc_name xml:space="preserve">clear</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Clears all weights.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get()\ (bmesh.types.BMDeformVert\ method)',\ u'bmesh.types.BMDeformVert.get',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMDeformVert" first="False" fullname="BMDeformVert.get" ids="bmesh.types.BMDeformVert.get" module="bmesh.types" names="bmesh.types.BMDeformVert.get"><desc_name xml:space="preserve">get</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">key</desc_parameter><desc_parameter xml:space="preserve">default=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Returns the deform weight matching the key or default
                                when not found (matches pythons dictionary function of the same name).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">key</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The key associated with deform weight.</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">default</literal_strong> (<literal_emphasis>Undefined</literal_emphasis>) – Optional argument for the value to return if
                                                    <emphasis>key</emphasis> is not found.</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'items()\ (bmesh.types.BMDeformVert\ method)',\ u'bmesh.types.BMDeformVert.items',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMDeformVert" first="False" fullname="BMDeformVert.items" ids="bmesh.types.BMDeformVert.items" module="bmesh.types" names="bmesh.types.BMDeformVert.items"><desc_name xml:space="preserve">items</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return (group, weight) pairs for this vertex
                                (matching pythons dict.items() functionality).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>(key, value) pairs for each deform weight of this vertex.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>list of tuples</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'keys()\ (bmesh.types.BMDeformVert\ method)',\ u'bmesh.types.BMDeformVert.keys',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMDeformVert" first="False" fullname="BMDeformVert.keys" ids="bmesh.types.BMDeformVert.keys" module="bmesh.types" names="bmesh.types.BMDeformVert.keys"><desc_name xml:space="preserve">keys</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return the group indices used by this vertex
                                (matching pythons dict.keys() functionality).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>the deform group this vertex uses</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>list of ints</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'values()\ (bmesh.types.BMDeformVert\ method)',\ u'bmesh.types.BMDeformVert.values',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="BMDeformVert" first="False" fullname="BMDeformVert.values" ids="bmesh.types.BMDeformVert.values" module="bmesh.types" names="bmesh.types.BMDeformVert.values"><desc_name xml:space="preserve">values</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return the weights of the deform vertex
                                (matching pythons dict.values() functionality).</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The weights that influence this vertex</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>list of floats</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
        </section>
    </section>
</document>
