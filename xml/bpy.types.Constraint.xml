<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/bpy.types.Constraint.rst">
    <section ids="module-bpy.types constraint-bpy-struct" names="constraint(bpy_struct)">
        <title>Constraint(bpy_struct)</title>
        <index entries="['single',\ u'bpy.types\ (module)',\ u'module-bpy.types',\ '',\ None]"></index>
        <paragraph>base class — <reference internal="True" reftitle="bpy.types.bpy_struct" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct"><literal classes="xref py py-class">bpy_struct</literal></reference></paragraph>
        <paragraph>subclasses —
            <reference internal="True" reftitle="bpy.types.ActionConstraint" refuri="bpy.types.ActionConstraint#bpy.types.ActionConstraint"><literal classes="xref py py-class">ActionConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.ArmatureConstraint" refuri="bpy.types.ArmatureConstraint#bpy.types.ArmatureConstraint"><literal classes="xref py py-class">ArmatureConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.CameraSolverConstraint" refuri="bpy.types.CameraSolverConstraint#bpy.types.CameraSolverConstraint"><literal classes="xref py py-class">CameraSolverConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.ChildOfConstraint" refuri="bpy.types.ChildOfConstraint#bpy.types.ChildOfConstraint"><literal classes="xref py py-class">ChildOfConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.ClampToConstraint" refuri="bpy.types.ClampToConstraint#bpy.types.ClampToConstraint"><literal classes="xref py py-class">ClampToConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.CopyLocationConstraint" refuri="bpy.types.CopyLocationConstraint#bpy.types.CopyLocationConstraint"><literal classes="xref py py-class">CopyLocationConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.CopyRotationConstraint" refuri="bpy.types.CopyRotationConstraint#bpy.types.CopyRotationConstraint"><literal classes="xref py py-class">CopyRotationConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.CopyScaleConstraint" refuri="bpy.types.CopyScaleConstraint#bpy.types.CopyScaleConstraint"><literal classes="xref py py-class">CopyScaleConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.CopyTransformsConstraint" refuri="bpy.types.CopyTransformsConstraint#bpy.types.CopyTransformsConstraint"><literal classes="xref py py-class">CopyTransformsConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.DampedTrackConstraint" refuri="bpy.types.DampedTrackConstraint#bpy.types.DampedTrackConstraint"><literal classes="xref py py-class">DampedTrackConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.FloorConstraint" refuri="bpy.types.FloorConstraint#bpy.types.FloorConstraint"><literal classes="xref py py-class">FloorConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.FollowPathConstraint" refuri="bpy.types.FollowPathConstraint#bpy.types.FollowPathConstraint"><literal classes="xref py py-class">FollowPathConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.FollowTrackConstraint" refuri="bpy.types.FollowTrackConstraint#bpy.types.FollowTrackConstraint"><literal classes="xref py py-class">FollowTrackConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.KinematicConstraint" refuri="bpy.types.KinematicConstraint#bpy.types.KinematicConstraint"><literal classes="xref py py-class">KinematicConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.LimitDistanceConstraint" refuri="bpy.types.LimitDistanceConstraint#bpy.types.LimitDistanceConstraint"><literal classes="xref py py-class">LimitDistanceConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.LimitLocationConstraint" refuri="bpy.types.LimitLocationConstraint#bpy.types.LimitLocationConstraint"><literal classes="xref py py-class">LimitLocationConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.LimitRotationConstraint" refuri="bpy.types.LimitRotationConstraint#bpy.types.LimitRotationConstraint"><literal classes="xref py py-class">LimitRotationConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.LimitScaleConstraint" refuri="bpy.types.LimitScaleConstraint#bpy.types.LimitScaleConstraint"><literal classes="xref py py-class">LimitScaleConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.LockedTrackConstraint" refuri="bpy.types.LockedTrackConstraint#bpy.types.LockedTrackConstraint"><literal classes="xref py py-class">LockedTrackConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.MaintainVolumeConstraint" refuri="bpy.types.MaintainVolumeConstraint#bpy.types.MaintainVolumeConstraint"><literal classes="xref py py-class">MaintainVolumeConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.ObjectSolverConstraint" refuri="bpy.types.ObjectSolverConstraint#bpy.types.ObjectSolverConstraint"><literal classes="xref py py-class">ObjectSolverConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.PivotConstraint" refuri="bpy.types.PivotConstraint#bpy.types.PivotConstraint"><literal classes="xref py py-class">PivotConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.PythonConstraint" refuri="bpy.types.PythonConstraint#bpy.types.PythonConstraint"><literal classes="xref py py-class">PythonConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.ShrinkwrapConstraint" refuri="bpy.types.ShrinkwrapConstraint#bpy.types.ShrinkwrapConstraint"><literal classes="xref py py-class">ShrinkwrapConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.SplineIKConstraint" refuri="bpy.types.SplineIKConstraint#bpy.types.SplineIKConstraint"><literal classes="xref py py-class">SplineIKConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.StretchToConstraint" refuri="bpy.types.StretchToConstraint#bpy.types.StretchToConstraint"><literal classes="xref py py-class">StretchToConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.TrackToConstraint" refuri="bpy.types.TrackToConstraint#bpy.types.TrackToConstraint"><literal classes="xref py py-class">TrackToConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.TransformCacheConstraint" refuri="bpy.types.TransformCacheConstraint#bpy.types.TransformCacheConstraint"><literal classes="xref py py-class">TransformCacheConstraint</literal></reference>, <reference internal="True" reftitle="bpy.types.TransformConstraint" refuri="bpy.types.TransformConstraint#bpy.types.TransformConstraint"><literal classes="xref py py-class">TransformConstraint</literal></reference></paragraph>
        <index entries="['single',\ u'Constraint\ (class\ in\ bpy.types)',\ u'bpy.types.Constraint',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="Constraint" ids="bpy.types.Constraint" module="bpy.types" names="bpy.types.Constraint"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bpy.types.</desc_addname><desc_name xml:space="preserve">Constraint</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bpy_struct</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Constraint modifying the transformation of objects and bones</paragraph>
                <index entries="['single',\ u'active\ (bpy.types.Constraint\ attribute)',\ u'bpy.types.Constraint.active',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Constraint" first="False" fullname="Constraint.active" ids="bpy.types.Constraint.active" module="bpy.types" names="bpy.types.Constraint.active"><desc_name xml:space="preserve">active</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Constraint is the one being edited</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>boolean, default False</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'Constraint.error_location\ (in\ module\ bpy.types)',\ u'bpy.types.Constraint.error_location',\ '',\ None]"></index>
                <desc desctype="data" domain="py" noindex="False" objtype="data">
                    <desc_signature class="Constraint" first="False" fullname="Constraint.error_location" ids="bpy.types.Constraint.error_location" module="bpy.types" names="bpy.types.Constraint.error_location"><desc_name xml:space="preserve">error_location</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Amount of residual error in Blender space unit for constraints that work on position</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float in [-inf, inf], default 0.0, (readonly)</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'Constraint.error_rotation\ (in\ module\ bpy.types)',\ u'bpy.types.Constraint.error_rotation',\ '',\ None]"></index>
                <desc desctype="data" domain="py" noindex="False" objtype="data">
                    <desc_signature class="Constraint" first="False" fullname="Constraint.error_rotation" ids="bpy.types.Constraint.error_rotation" module="bpy.types" names="bpy.types.Constraint.error_rotation"><desc_name xml:space="preserve">error_rotation</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Amount of residual error in radians for constraints that work on orientation</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float in [-inf, inf], default 0.0, (readonly)</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'influence\ (bpy.types.Constraint\ attribute)',\ u'bpy.types.Constraint.influence',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Constraint" first="False" fullname="Constraint.influence" ids="bpy.types.Constraint.influence" module="bpy.types" names="bpy.types.Constraint.influence"><desc_name xml:space="preserve">influence</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Amount of influence constraint will have on the final solution</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float in [0, 1], default 0.0</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'is_proxy_local\ (bpy.types.Constraint\ attribute)',\ u'bpy.types.Constraint.is_proxy_local',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Constraint" first="False" fullname="Constraint.is_proxy_local" ids="bpy.types.Constraint.is_proxy_local" module="bpy.types" names="bpy.types.Constraint.is_proxy_local"><desc_name xml:space="preserve">is_proxy_local</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Constraint was added in this proxy instance (i.e. did not belong to source Armature)</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>boolean, default False</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'Constraint.is_valid\ (in\ module\ bpy.types)',\ u'bpy.types.Constraint.is_valid',\ '',\ None]"></index>
                <desc desctype="data" domain="py" noindex="False" objtype="data">
                    <desc_signature class="Constraint" first="False" fullname="Constraint.is_valid" ids="bpy.types.Constraint.is_valid" module="bpy.types" names="bpy.types.Constraint.is_valid"><desc_name xml:space="preserve">is_valid</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Constraint has valid settings and can be evaluated</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>boolean, default False, (readonly)</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'mute\ (bpy.types.Constraint\ attribute)',\ u'bpy.types.Constraint.mute',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Constraint" first="False" fullname="Constraint.mute" ids="bpy.types.Constraint.mute" module="bpy.types" names="bpy.types.Constraint.mute"><desc_name xml:space="preserve">mute</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Enable/Disable Constraint</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>boolean, default False</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'name\ (bpy.types.Constraint\ attribute)',\ u'bpy.types.Constraint.name',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Constraint" first="False" fullname="Constraint.name" ids="bpy.types.Constraint.name" module="bpy.types" names="bpy.types.Constraint.name"><desc_name xml:space="preserve">name</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Constraint name</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>string, default “”, (never None)</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'owner_space\ (bpy.types.Constraint\ attribute)',\ u'bpy.types.Constraint.owner_space',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Constraint" first="False" fullname="Constraint.owner_space" ids="bpy.types.Constraint.owner_space" module="bpy.types" names="bpy.types.Constraint.owner_space"><desc_name xml:space="preserve">owner_space</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Space that owner is evaluated in</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph><literal>WORLD</literal> World Space, The constraint is applied relative to the world coordinate system.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>POSE</literal> Pose Space, The constraint is applied in Pose Space, the object transformation is ignored.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>LOCAL_WITH_PARENT</literal> Local With Parent, The constraint is applied relative to the local coordinate system of the object, with the parent transformation added.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>LOCAL</literal> Local Space, The constraint is applied relative to the local coordinate system of the object.</paragraph>
                            </list_item>
                        </bullet_list>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>enum in [‘WORLD’, ‘POSE’, ‘LOCAL_WITH_PARENT’, ‘LOCAL’], default ‘WORLD’</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'show_expanded\ (bpy.types.Constraint\ attribute)',\ u'bpy.types.Constraint.show_expanded',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Constraint" first="False" fullname="Constraint.show_expanded" ids="bpy.types.Constraint.show_expanded" module="bpy.types" names="bpy.types.Constraint.show_expanded"><desc_name xml:space="preserve">show_expanded</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Constraint’s panel is expanded in UI</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>boolean, default False</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'target_space\ (bpy.types.Constraint\ attribute)',\ u'bpy.types.Constraint.target_space',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Constraint" first="False" fullname="Constraint.target_space" ids="bpy.types.Constraint.target_space" module="bpy.types" names="bpy.types.Constraint.target_space"><desc_name xml:space="preserve">target_space</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Space that target is evaluated in</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph><literal>WORLD</literal> World Space, The transformation of the target is evaluated relative to the world coordinate system.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>POSE</literal> Pose Space, The transformation of the target is only evaluated in the Pose Space, the target armature object transformation is ignored.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>LOCAL_WITH_PARENT</literal> Local With Parent, The transformation of the target bone is evaluated relative its local coordinate system, with the parent transformation added.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>LOCAL</literal> Local Space, The transformation of the target is evaluated relative to its local coordinate system.</paragraph>
                            </list_item>
                        </bullet_list>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>enum in [‘WORLD’, ‘POSE’, ‘LOCAL_WITH_PARENT’, ‘LOCAL’], default ‘WORLD’</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'Constraint.type\ (in\ module\ bpy.types)',\ u'bpy.types.Constraint.type',\ '',\ None]"></index>
                <desc desctype="data" domain="py" noindex="False" objtype="data">
                    <desc_signature class="Constraint" first="False" fullname="Constraint.type" ids="bpy.types.Constraint.type" module="bpy.types" names="bpy.types.Constraint.type"><desc_name xml:space="preserve">type</desc_name></desc_signature>
                    <desc_content>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph><literal>CAMERA_SOLVER</literal> Camera Solver.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>FOLLOW_TRACK</literal> Follow Track.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>OBJECT_SOLVER</literal> Object Solver.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>COPY_LOCATION</literal> Copy Location, Copy the location of a target (with an optional offset), so that they move together.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>COPY_ROTATION</literal> Copy Rotation, Copy the rotation of a target (with an optional offset), so that they rotate together.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>COPY_SCALE</literal> Copy Scale, Copy the scale factors of a target (with an optional offset), so that they are scaled by the same amount.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>COPY_TRANSFORMS</literal> Copy Transforms, Copy all the transformations of a target, so that they move together.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>LIMIT_DISTANCE</literal> Limit Distance, Restrict movements to within a certain distance of a target (at the time of constraint evaluation only).</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>LIMIT_LOCATION</literal> Limit Location, Restrict movement along each axis within given ranges.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>LIMIT_ROTATION</literal> Limit Rotation, Restrict rotation along each axis within given ranges.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>LIMIT_SCALE</literal> Limit Scale, Restrict scaling along each axis with given ranges.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>MAINTAIN_VOLUME</literal> Maintain Volume, Compensate for scaling one axis by applying suitable scaling to the other two axes.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>TRANSFORM</literal> Transformation, Use one transform property from target to control another (or same) property on owner.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>TRANSFORM_CACHE</literal> Transform Cache, Look up the transformation matrix from an external file.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>CLAMP_TO</literal> Clamp To, Restrict movements to lie along a curve by remapping location along curve’s longest axis.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>DAMPED_TRACK</literal> Damped Track, Point towards a target by performing the smallest rotation necessary.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>IK</literal> Inverse Kinematics, Control a chain of bones by specifying the endpoint target (Bones only).</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>LOCKED_TRACK</literal> Locked Track, Rotate around the specified (‘locked’) axis to point towards a target.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>SPLINE_IK</literal> Spline IK, Align chain of bones along a curve (Bones only).</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>STRETCH_TO</literal> Stretch To, Stretch along Y-Axis to point towards a target.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>TRACK_TO</literal> Track To, Legacy tracking constraint prone to twisting artifacts.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>ACTION</literal> Action, Use transform property of target to look up pose for owner from an Action.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>CHILD_OF</literal> Child Of, Make target the ‘detachable’ parent of owner.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>FLOOR</literal> Floor, Use position (and optionally rotation) of target to define a ‘wall’ or ‘floor’ that the owner can not cross.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>FOLLOW_PATH</literal> Follow Path, Use to animate an object/bone following a path.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>PIVOT</literal> Pivot, Change pivot point for transforms (buggy).</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>SHRINKWRAP</literal> Shrinkwrap, Restrict movements to surface of target mesh.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>ARMATURE</literal> Armature, Apply weight-blended transformation from multiple bones like the Armature modifier.</paragraph>
                            </list_item>
                        </bullet_list>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>enum in [‘CAMERA_SOLVER’, ‘FOLLOW_TRACK’, ‘OBJECT_SOLVER’, ‘COPY_LOCATION’, ‘COPY_ROTATION’, ‘COPY_SCALE’, ‘COPY_TRANSFORMS’, ‘LIMIT_DISTANCE’, ‘LIMIT_LOCATION’, ‘LIMIT_ROTATION’, ‘LIMIT_SCALE’, ‘MAINTAIN_VOLUME’, ‘TRANSFORM’, ‘TRANSFORM_CACHE’, ‘CLAMP_TO’, ‘DAMPED_TRACK’, ‘IK’, ‘LOCKED_TRACK’, ‘SPLINE_IK’, ‘STRETCH_TO’, ‘TRACK_TO’, ‘ACTION’, ‘CHILD_OF’, ‘FLOOR’, ‘FOLLOW_PATH’, ‘PIVOT’, ‘SHRINKWRAP’, ‘ARMATURE’], default ‘CAMERA_SOLVER’, (readonly)</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'bl_rna_get_subclass()\ (bpy.types.Constraint\ class\ method)',\ u'bpy.types.Constraint.bl_rna_get_subclass',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="Constraint" first="False" fullname="Constraint.bl_rna_get_subclass" ids="bpy.types.Constraint.bl_rna_get_subclass" module="bpy.types" names="bpy.types.Constraint.bl_rna_get_subclass"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">bl_rna_get_subclass</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">default=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">id</literal_strong> (<literal_emphasis>string</literal_emphasis>) – The RNA type identifier.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The RNA type or default when not found.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="bpy.types.Struct" refuri="bpy.types.Struct#bpy.types.Struct"><literal classes="xref py py-class">bpy.types.Struct</literal></reference> subclass</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'bl_rna_get_subclass_py()\ (bpy.types.Constraint\ class\ method)',\ u'bpy.types.Constraint.bl_rna_get_subclass_py',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="Constraint" first="False" fullname="Constraint.bl_rna_get_subclass_py" ids="bpy.types.Constraint.bl_rna_get_subclass_py" module="bpy.types" names="bpy.types.Constraint.bl_rna_get_subclass_py"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">bl_rna_get_subclass_py</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">default=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">id</literal_strong> (<literal_emphasis>string</literal_emphasis>) – The RNA type identifier.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The class or default when not found.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>type</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <rubric>Inherited Properties</rubric>
        <hlist>
            <hlistcol>
                <bullet_list>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.id_data" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.id_data"><literal classes="xref py py-class">bpy_struct.id_data</literal></reference></paragraph>
                    </list_item>
                </bullet_list>
            </hlistcol>
            <hlistcol>
                <bullet_list>
                </bullet_list>
            </hlistcol>
        </hlist>
        <rubric>Inherited Functions</rubric>
        <hlist>
            <hlistcol>
                <bullet_list>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.as_pointer" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.as_pointer"><literal classes="xref py py-class">bpy_struct.as_pointer</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.driver_add" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.driver_add"><literal classes="xref py py-class">bpy_struct.driver_add</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.driver_remove" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.driver_remove"><literal classes="xref py py-class">bpy_struct.driver_remove</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.get" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.get"><literal classes="xref py py-class">bpy_struct.get</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_hidden" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_hidden"><literal classes="xref py py-class">bpy_struct.is_property_hidden</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_overridable_static" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_overridable_static"><literal classes="xref py py-class">bpy_struct.is_property_overridable_static</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_readonly" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_readonly"><literal classes="xref py py-class">bpy_struct.is_property_readonly</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_set" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_set"><literal classes="xref py py-class">bpy_struct.is_property_set</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.items" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.items"><literal classes="xref py py-class">bpy_struct.items</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keyframe_delete" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keyframe_delete"><literal classes="xref py py-class">bpy_struct.keyframe_delete</literal></reference></paragraph>
                    </list_item>
                </bullet_list>
            </hlistcol>
            <hlistcol>
                <bullet_list>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keyframe_insert" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keyframe_insert"><literal classes="xref py py-class">bpy_struct.keyframe_insert</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keys" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keys"><literal classes="xref py py-class">bpy_struct.keys</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.path_from_id" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.path_from_id"><literal classes="xref py py-class">bpy_struct.path_from_id</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.path_resolve" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.path_resolve"><literal classes="xref py py-class">bpy_struct.path_resolve</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.pop" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.pop"><literal classes="xref py py-class">bpy_struct.pop</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.property_overridable_static_set" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.property_overridable_static_set"><literal classes="xref py py-class">bpy_struct.property_overridable_static_set</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.property_unset" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.property_unset"><literal classes="xref py py-class">bpy_struct.property_unset</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.type_recast" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.type_recast"><literal classes="xref py py-class">bpy_struct.type_recast</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.values" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.values"><literal classes="xref py py-class">bpy_struct.values</literal></reference></paragraph>
                    </list_item>
                </bullet_list>
            </hlistcol>
        </hlist>
        <rubric>References</rubric>
        <hlist>
            <hlistcol>
                <bullet_list>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Object.constraints" refuri="bpy.types.Object#bpy.types.Object.constraints"><literal classes="xref py py-class">Object.constraints</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ObjectConstraints.active" refuri="bpy.types.ObjectConstraints#bpy.types.ObjectConstraints.active"><literal classes="xref py py-class">ObjectConstraints.active</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ObjectConstraints.new" refuri="bpy.types.ObjectConstraints#bpy.types.ObjectConstraints.new"><literal classes="xref py py-class">ObjectConstraints.new</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.ObjectConstraints.remove" refuri="bpy.types.ObjectConstraints#bpy.types.ObjectConstraints.remove"><literal classes="xref py py-class">ObjectConstraints.remove</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.PoseBone.constraints" refuri="bpy.types.PoseBone#bpy.types.PoseBone.constraints"><literal classes="xref py py-class">PoseBone.constraints</literal></reference></paragraph>
                    </list_item>
                </bullet_list>
            </hlistcol>
            <hlistcol>
                <bullet_list>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.PoseBoneConstraints.active" refuri="bpy.types.PoseBoneConstraints#bpy.types.PoseBoneConstraints.active"><literal classes="xref py py-class">PoseBoneConstraints.active</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.PoseBoneConstraints.new" refuri="bpy.types.PoseBoneConstraints#bpy.types.PoseBoneConstraints.new"><literal classes="xref py py-class">PoseBoneConstraints.new</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.PoseBoneConstraints.remove" refuri="bpy.types.PoseBoneConstraints#bpy.types.PoseBoneConstraints.remove"><literal classes="xref py py-class">PoseBoneConstraints.remove</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.UILayout.template_constraint" refuri="bpy.types.UILayout#bpy.types.UILayout.template_constraint"><literal classes="xref py py-class">UILayout.template_constraint</literal></reference></paragraph>
                    </list_item>
                </bullet_list>
            </hlistcol>
        </hlist>
    </section>
</document>
