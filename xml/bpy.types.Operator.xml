<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/bpy.types.Operator.rst">
    <section ids="module-bpy.types operator-bpy-struct" names="operator(bpy_struct)">
        <title>Operator(bpy_struct)</title>
        <index entries="['single',\ u'bpy.types\ (module)',\ u'module-bpy.types',\ '',\ None]"></index>
        <section ids="basic-operator-example" names="basic\ operator\ example">
            <title>Basic Operator Example</title>
            <paragraph>This script shows simple operator which prints a message.</paragraph>
            <paragraph>Since the operator only has an <reference internal="True" refid="bpy.types.Operator.execute" reftitle="bpy.types.Operator.execute"><literal classes="xref py py-class">Operator.execute</literal></reference> function it takes no
                user input.</paragraph>
            <note>
                <paragraph>Operator subclasses must be registered before accessing them from blender.</paragraph>
            </note>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.types.Operator.py" xml:space="preserve">import bpy


                class HelloWorldOperator(bpy.types.Operator):
                    bl_idname = "wm.hello_world"
                    bl_label = "Minimal Operator"

                    def execute(self, context):
                        print("Hello World")
                        return {'FINISHED'}


                bpy.utils.register_class(HelloWorldOperator)

                # test call to the newly defined operator
                bpy.ops.wm.hello_world()
            </literal_block>
        </section>
        <section ids="invoke-function" names="invoke\ function">
            <title>Invoke Function</title>
            <paragraph><reference internal="True" refid="bpy.types.Operator.invoke" reftitle="bpy.types.Operator.invoke"><literal classes="xref py py-class">Operator.invoke</literal></reference> is used to initialize the operator from the context
                at the moment the operator is called.
                invoke() is typically used to assign properties which are then used by
                execute().
                Some operators don’t have an execute() function, removing the ability to be
                repeated from a script or macro.</paragraph>
            <paragraph>This example shows how to define an operator which gets mouse input to
                execute a function and that this operator can be invoked or executed from
                the python api.</paragraph>
            <paragraph>Also notice this operator defines its own properties, these are different
                to typical class properties because blender registers them with the
                operator, to use as arguments when called, saved for operator undo/redo and
                automatically added into the user interface.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.types.Operator.1.py" xml:space="preserve">import bpy


                class SimpleMouseOperator(bpy.types.Operator):
                    """ This operator shows the mouse location,
                        this string is used for the tooltip and API docs
                    """
                    bl_idname = "wm.mouse_position"
                    bl_label = "Invoke Mouse Operator"

                    x = bpy.props.IntProperty()
                    y = bpy.props.IntProperty()

                    def execute(self, context):
                        # rather than printing, use the report function,
                        # this way the message appears in the header,
                        self.report({'INFO'}, "Mouse coords are %d %d" % (self.x, self.y))
                        return {'FINISHED'}

                    def invoke(self, context, event):
                        self.x = event.mouse_x
                        self.y = event.mouse_y
                        return self.execute(context)


                bpy.utils.register_class(SimpleMouseOperator)

                # Test call to the newly defined operator.
                # Here we call the operator and invoke it, meaning that the settings are taken
                # from the mouse.
                bpy.ops.wm.mouse_position('INVOKE_DEFAULT')

                # Another test call, this time call execute() directly with pre-defined settings.
                bpy.ops.wm.mouse_position('EXEC_DEFAULT', x=20, y=66)
            </literal_block>
        </section>
        <section ids="calling-a-file-selector" names="calling\ a\ file\ selector">
            <title>Calling a File Selector</title>
            <paragraph>This example shows how an operator can use the file selector.</paragraph>
            <paragraph>Notice the invoke function calls a window manager method and returns
                <literal>{'RUNNING_MODAL'}</literal>, this means the file selector stays open and the operator does not
                exit immediately after invoke finishes.</paragraph>
            <paragraph>The file selector runs the operator, calling <reference internal="True" refid="bpy.types.Operator.execute" reftitle="bpy.types.Operator.execute"><literal classes="xref py py-class">Operator.execute</literal></reference> when the
                user confirms.</paragraph>
            <paragraph>The <reference internal="True" refid="bpy.types.Operator.poll" reftitle="bpy.types.Operator.poll"><literal classes="xref py py-class">Operator.poll</literal></reference> function is optional, used to check if the operator
                can run.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.types.Operator.2.py" xml:space="preserve">import bpy


                class ExportSomeData(bpy.types.Operator):
                    """Test exporter which just writes hello world"""
                    bl_idname = "export.some_data"
                    bl_label = "Export Some Data"

                    filepath = bpy.props.StringProperty(subtype="FILE_PATH")

                    @classmethod
                    def poll(cls, context):
                        return context.object is not None

                    def execute(self, context):
                        file = open(self.filepath, 'w')
                        file.write("Hello World " + context.object.name)
                        return {'FINISHED'}

                    def invoke(self, context, event):
                        context.window_manager.fileselect_add(self)
                        return {'RUNNING_MODAL'}


                # Only needed if you want to add into a dynamic menu
                def menu_func(self, context):
                    self.layout.operator_context = 'INVOKE_DEFAULT'
                    self.layout.operator(ExportSomeData.bl_idname, text="Text Export Operator")


                # Register and add to the file selector
                bpy.utils.register_class(ExportSomeData)
                bpy.types.TOPBAR_MT_file_export.append(menu_func)


                # test call
                bpy.ops.export.some_data('INVOKE_DEFAULT')
            </literal_block>
        </section>
        <section ids="dialog-box" names="dialog\ box">
            <title>Dialog Box</title>
            <paragraph>This operator uses its <reference internal="True" refid="bpy.types.Operator.invoke" reftitle="bpy.types.Operator.invoke"><literal classes="xref py py-class">Operator.invoke</literal></reference> function to call a popup.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.types.Operator.3.py" xml:space="preserve">import bpy


                class DialogOperator(bpy.types.Operator):
                    bl_idname = "object.dialog_operator"
                    bl_label = "Simple Dialog Operator"

                    my_float = bpy.props.FloatProperty(name="Some Floating Point")
                    my_bool = bpy.props.BoolProperty(name="Toggle Option")
                    my_string = bpy.props.StringProperty(name="String Value")

                    def execute(self, context):
                        message = "Popup Values: %f, %d, '%s'" % \
                            (self.my_float, self.my_bool, self.my_string)
                        self.report({'INFO'}, message)
                        return {'FINISHED'}

                    def invoke(self, context, event):
                        wm = context.window_manager
                        return wm.invoke_props_dialog(self)


                bpy.utils.register_class(DialogOperator)

                # test call
                bpy.ops.object.dialog_operator('INVOKE_DEFAULT')
            </literal_block>
        </section>
        <section ids="custom-drawing" names="custom\ drawing">
            <title>Custom Drawing</title>
            <paragraph>By default operator properties use an automatic user interface layout.
                If you need more control you can create your own layout with a
                <reference internal="True" refid="bpy.types.Operator.draw" reftitle="bpy.types.Operator.draw"><literal classes="xref py py-class">Operator.draw</literal></reference> function.</paragraph>
            <paragraph>This works like the <reference internal="True" reftitle="bpy.types.Panel" refuri="bpy.types.Panel#bpy.types.Panel"><literal classes="xref py py-class">Panel</literal></reference> and <reference internal="True" reftitle="bpy.types.Menu" refuri="bpy.types.Menu#bpy.types.Menu"><literal classes="xref py py-class">Menu</literal></reference> draw functions, its used
                for dialogs and file selectors.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.types.Operator.4.py" xml:space="preserve">import bpy


                class CustomDrawOperator(bpy.types.Operator):
                    bl_idname = "object.custom_draw"
                    bl_label = "Simple Modal Operator"

                    filepath = bpy.props.StringProperty(subtype="FILE_PATH")

                    my_float = bpy.props.FloatProperty(name="Float")
                    my_bool = bpy.props.BoolProperty(name="Toggle Option")
                    my_string = bpy.props.StringProperty(name="String Value")

                    def execute(self, context):
                        print("Test", self)
                        return {'FINISHED'}

                    def invoke(self, context, event):
                        wm = context.window_manager
                        return wm.invoke_props_dialog(self)

                    def draw(self, context):
                        layout = self.layout
                        col = layout.column()
                        col.label(text="Custom Interface!")

                        row = col.row()
                        row.prop(self, "my_float")
                        row.prop(self, "my_bool")

                        col.prop(self, "my_string")


                bpy.utils.register_class(CustomDrawOperator)

                # test call
                bpy.ops.object.custom_draw('INVOKE_DEFAULT')
            </literal_block>
        </section>
        <section ids="modal-execution" names="modal\ execution">
            <title>Modal Execution</title>
            <paragraph>This operator defines a <reference internal="True" refid="bpy.types.Operator.modal" reftitle="bpy.types.Operator.modal"><literal classes="xref py py-class">Operator.modal</literal></reference> function that will keep being
                run to handle events until it returns <literal>{'FINISHED'}</literal> or <literal>{'CANCELLED'}</literal>.</paragraph>
            <paragraph>Modal operators run every time a new event is detected, such as a mouse click
                or key press. Conversely, when no new events are detected, the modal operator
                will not run. Modal operators are especially useful for interactive tools, an
                operator can have its own state where keys toggle options as the operator runs.
                Grab, Rotate, Scale, and Fly-Mode are examples of modal operators.</paragraph>
            <paragraph><reference internal="True" refid="bpy.types.Operator.invoke" reftitle="bpy.types.Operator.invoke"><literal classes="xref py py-class">Operator.invoke</literal></reference> is used to initialize the operator as being by
                returning <literal>{'RUNNING_MODAL'}</literal>, initializing the modal loop.</paragraph>
            <paragraph>Notice <literal>__init__()</literal> and <literal>__del__()</literal> are declared.
                For other operator types they are not useful but for modal operators they will
                be called before the <reference internal="True" refid="bpy.types.Operator.invoke" reftitle="bpy.types.Operator.invoke"><literal classes="xref py py-class">Operator.invoke</literal></reference> and after the operator finishes.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.types.Operator.5.py" xml:space="preserve">import bpy


                class ModalOperator(bpy.types.Operator):
                    bl_idname = "object.modal_operator"
                    bl_label = "Simple Modal Operator"

                    def __init__(self):
                        print("Start")

                    def __del__(self):
                        print("End")

                    def execute(self, context):
                        context.object.location.x = self.value / 100.0
                        return {'FINISHED'}

                    def modal(self, context, event):
                        if event.type == 'MOUSEMOVE':  # Apply
                            self.value = event.mouse_x
                            self.execute(context)
                        elif event.type == 'LEFTMOUSE':  # Confirm
                            return {'FINISHED'}
                        elif event.type in {'RIGHTMOUSE', 'ESC'}:  # Cancel
                            context.object.location.x = self.init_loc_x
                            return {'CANCELLED'}

                        return {'RUNNING_MODAL'}

                    def invoke(self, context, event):
                        self.init_loc_x = context.object.location.x
                        self.value = event.mouse_x
                        self.execute(context)

                        context.window_manager.modal_handler_add(self)
                        return {'RUNNING_MODAL'}


                bpy.utils.register_class(ModalOperator)

                # test call
                bpy.ops.object.modal_operator('INVOKE_DEFAULT')
            </literal_block>
        </section>
        <section ids="enum-search-popup" names="enum\ search\ popup">
            <title>Enum Search Popup</title>
            <paragraph>You may want to have an operator prompt the user to select an item
                from a search field, this can be done using <literal classes="xref py py-class">bpy.types.Operator.invoke_search_popup</literal>.</paragraph>
            <literal_block force_highlighting="False" highlight_args="{'linenostart': 1}" language="default" linenos="False" source="/home/zicklag/git/other/blender/doc/python_api/examples/bpy.types.Operator.6.py" xml:space="preserve">import bpy
                from bpy.props import EnumProperty


                class SearchEnumOperator(bpy.types.Operator):
                    bl_idname = "object.search_enum_operator"
                    bl_label = "Search Enum Operator"
                    bl_property = "my_search"

                    my_search = EnumProperty(
                        name="My Search",
                        items=(
                            ('FOO', "Foo", ""),
                            ('BAR', "Bar", ""),
                            ('BAZ', "Baz", ""),
                        ),
                    )

                    def execute(self, context):
                        self.report({'INFO'}, "Selected:" + self.my_search)
                        return {'FINISHED'}

                    def invoke(self, context, event):
                        context.window_manager.invoke_search_popup(self)
                        return {'RUNNING_MODAL'}


                bpy.utils.register_class(SearchEnumOperator)

                # test call
                bpy.ops.object.search_enum_operator('INVOKE_DEFAULT')
            </literal_block>
            <paragraph>base class — <reference internal="True" reftitle="bpy.types.bpy_struct" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct"><literal classes="xref py py-class">bpy_struct</literal></reference></paragraph>
            <index entries="['single',\ u'Operator\ (class\ in\ bpy.types)',\ u'bpy.types.Operator',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="Operator" ids="bpy.types.Operator" module="bpy.types" names="bpy.types.Operator"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bpy.types.</desc_addname><desc_name xml:space="preserve">Operator</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">bpy_struct</desc_parameter></desc_parameterlist></desc_signature>
                <desc_content>
                    <paragraph>Storage of an operator being executed, or registered after execution</paragraph>
                    <index entries="['single',\ u'bl_description\ (bpy.types.Operator\ attribute)',\ u'bpy.types.Operator.bl_description',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Operator" first="False" fullname="Operator.bl_description" ids="bpy.types.Operator.bl_description" module="bpy.types" names="bpy.types.Operator.bl_description"><desc_name xml:space="preserve">bl_description</desc_name></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “”</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_idname\ (bpy.types.Operator\ attribute)',\ u'bpy.types.Operator.bl_idname',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Operator" first="False" fullname="Operator.bl_idname" ids="bpy.types.Operator.bl_idname" module="bpy.types" names="bpy.types.Operator.bl_idname"><desc_name xml:space="preserve">bl_idname</desc_name></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “”, (never None)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_label\ (bpy.types.Operator\ attribute)',\ u'bpy.types.Operator.bl_label',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Operator" first="False" fullname="Operator.bl_label" ids="bpy.types.Operator.bl_label" module="bpy.types" names="bpy.types.Operator.bl_label"><desc_name xml:space="preserve">bl_label</desc_name></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “”, (never None)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_options\ (bpy.types.Operator\ attribute)',\ u'bpy.types.Operator.bl_options',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Operator" first="False" fullname="Operator.bl_options" ids="bpy.types.Operator.bl_options" module="bpy.types" names="bpy.types.Operator.bl_options"><desc_name xml:space="preserve">bl_options</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Options for this operator type</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph><literal>REGISTER</literal> Register, Display in the info window and support the redo toolbar panel.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>UNDO</literal> Undo, Push an undo event (needed for operator redo).</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>UNDO_GROUPED</literal> Grouped Undo, Push a single undo event for repetead instances of this operator.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>BLOCKING</literal> Blocking, Block anything else from using the cursor.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>MACRO</literal> Macro, Use to check if an operator is a macro.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>GRAB_CURSOR</literal> Grab Pointer, Use so the operator grabs the mouse focus, enables wrapping when continuous grab is enabled.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>PRESET</literal> Preset, Display a preset button with the operators settings.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>INTERNAL</literal> Internal, Removes the operator from search results.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal>USE_EVAL_DATA</literal> Use Evaluated Data, Uses evaluated data (i.e. needs a valid depsgraph for current context).</paragraph>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>enum set in {‘REGISTER’, ‘UNDO’, ‘UNDO_GROUPED’, ‘BLOCKING’, ‘MACRO’, ‘GRAB_CURSOR’, ‘PRESET’, ‘INTERNAL’, ‘USE_EVAL_DATA’}, default {‘REGISTER’}</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_translation_context\ (bpy.types.Operator\ attribute)',\ u'bpy.types.Operator.bl_translation_context',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Operator" first="False" fullname="Operator.bl_translation_context" ids="bpy.types.Operator.bl_translation_context" module="bpy.types" names="bpy.types.Operator.bl_translation_context"><desc_name xml:space="preserve">bl_translation_context</desc_name></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “Operator”</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_undo_group\ (bpy.types.Operator\ attribute)',\ u'bpy.types.Operator.bl_undo_group',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Operator" first="False" fullname="Operator.bl_undo_group" ids="bpy.types.Operator.bl_undo_group" module="bpy.types" names="bpy.types.Operator.bl_undo_group"><desc_name xml:space="preserve">bl_undo_group</desc_name></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “”</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'Operator.has_reports\ (in\ module\ bpy.types)',\ u'bpy.types.Operator.has_reports',\ '',\ None]"></index>
                    <desc desctype="data" domain="py" noindex="False" objtype="data">
                        <desc_signature class="Operator" first="False" fullname="Operator.has_reports" ids="bpy.types.Operator.has_reports" module="bpy.types" names="bpy.types.Operator.has_reports"><desc_name xml:space="preserve">has_reports</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Operator has a set of reports (warnings and errors) from last execution</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>boolean, default False, (readonly)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'Operator.layout\ (in\ module\ bpy.types)',\ u'bpy.types.Operator.layout',\ '',\ None]"></index>
                    <desc desctype="data" domain="py" noindex="False" objtype="data">
                        <desc_signature class="Operator" first="False" fullname="Operator.layout" ids="bpy.types.Operator.layout" module="bpy.types" names="bpy.types.Operator.layout"><desc_name xml:space="preserve">layout</desc_name></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="bpy.types.UILayout" refuri="bpy.types.UILayout#bpy.types.UILayout"><literal classes="xref py py-class">UILayout</literal></reference>, (readonly)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'Operator.macros\ (in\ module\ bpy.types)',\ u'bpy.types.Operator.macros',\ '',\ None]"></index>
                    <desc desctype="data" domain="py" noindex="False" objtype="data">
                        <desc_signature class="Operator" first="False" fullname="Operator.macros" ids="bpy.types.Operator.macros" module="bpy.types" names="bpy.types.Operator.macros"><desc_name xml:space="preserve">macros</desc_name></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_prop_collection" refuri="bpy.types.bpy_prop_collection#bpy.types.bpy_prop_collection"><literal classes="xref py py-class">bpy_prop_collection</literal></reference> of <reference internal="True" reftitle="bpy.types.Macro" refuri="bpy.types.Macro#bpy.types.Macro"><literal classes="xref py py-class">Macro</literal></reference>, (readonly)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'Operator.name\ (in\ module\ bpy.types)',\ u'bpy.types.Operator.name',\ '',\ None]"></index>
                    <desc desctype="data" domain="py" noindex="False" objtype="data">
                        <desc_signature class="Operator" first="False" fullname="Operator.name" ids="bpy.types.Operator.name" module="bpy.types" names="bpy.types.Operator.name"><desc_name xml:space="preserve">name</desc_name></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph>string, default “”, (readonly, never None)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'Operator.options\ (in\ module\ bpy.types)',\ u'bpy.types.Operator.options',\ '',\ None]"></index>
                    <desc desctype="data" domain="py" noindex="False" objtype="data">
                        <desc_signature class="Operator" first="False" fullname="Operator.options" ids="bpy.types.Operator.options" module="bpy.types" names="bpy.types.Operator.options"><desc_name xml:space="preserve">options</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>Runtime options</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="bpy.types.OperatorOptions" refuri="bpy.types.OperatorOptions#bpy.types.OperatorOptions"><literal classes="xref py py-class">OperatorOptions</literal></reference>, (readonly, never None)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'Operator.properties\ (in\ module\ bpy.types)',\ u'bpy.types.Operator.properties',\ '',\ None]"></index>
                    <desc desctype="data" domain="py" noindex="False" objtype="data">
                        <desc_signature class="Operator" first="False" fullname="Operator.properties" ids="bpy.types.Operator.properties" module="bpy.types" names="bpy.types.Operator.properties"><desc_name xml:space="preserve">properties</desc_name></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="bpy.types.OperatorProperties" refuri="bpy.types.OperatorProperties#bpy.types.OperatorProperties"><literal classes="xref py py-class">OperatorProperties</literal></reference>, (readonly, never None)</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_property\ (bpy.types.Operator\ attribute)',\ u'bpy.types.Operator.bl_property',\ '',\ None]"></index>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Operator" first="False" fullname="Operator.bl_property" ids="bpy.types.Operator.bl_property" module="bpy.types" names="bpy.types.Operator.bl_property"><desc_name xml:space="preserve">bl_property</desc_name></desc_signature>
                        <desc_content>
                            <paragraph>The name of a property to use as this operators primary property.
                                Currently this is only used to select the default property when
                                expanding an operator into a menu.
                                :type: string</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'report()\ (bpy.types.Operator\ method)',\ u'bpy.types.Operator.report',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Operator" first="False" fullname="Operator.report" ids="bpy.types.Operator.report" module="bpy.types" names="bpy.types.Operator.report"><desc_name xml:space="preserve">report</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">type</desc_parameter><desc_parameter xml:space="preserve">message</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>report</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <bullet_list>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">type</literal_strong> (<literal_emphasis>enum set in {'DEBUG'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'INFO'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'OPERATOR'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'PROPERTY'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'WARNING'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'ERROR'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'ERROR_INVALID_INPUT'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'ERROR_INVALID_CONTEXT'</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>'ERROR_OUT_OF_MEMORY'}</literal_emphasis>) – Type</paragraph>
                                            </list_item>
                                            <list_item>
                                                <paragraph><literal_strong refspecific="True">message</literal_strong> (<literal_emphasis>string</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>(</literal_emphasis><literal_emphasis>never None</literal_emphasis><literal_emphasis>)</literal_emphasis>) – Report Message</paragraph>
                                            </list_item>
                                        </bullet_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_repeat()\ (bpy.types.Operator\ method)',\ u'bpy.types.Operator.is_repeat',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Operator" first="False" fullname="Operator.is_repeat" ids="bpy.types.Operator.is_repeat" module="bpy.types" names="bpy.types.Operator.is_repeat"><desc_name xml:space="preserve">is_repeat</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>is_repeat</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>result</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'poll()\ (bpy.types.Operator\ class\ method)',\ u'bpy.types.Operator.poll',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="Operator" first="False" fullname="Operator.poll" ids="bpy.types.Operator.poll" module="bpy.types" names="bpy.types.Operator.poll"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">poll</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Test if the operator can be called or not</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'execute()\ (bpy.types.Operator\ method)',\ u'bpy.types.Operator.execute',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Operator" first="False" fullname="Operator.execute" ids="bpy.types.Operator.execute" module="bpy.types" names="bpy.types.Operator.execute"><desc_name xml:space="preserve">execute</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Execute the operator</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph><paragraph>result</paragraph><bullet_list bullet="*"><list_item><paragraph><literal>RUNNING_MODAL</literal> Running Modal, Keep the operator running with blender.</paragraph></list_item><list_item><paragraph><literal>CANCELLED</literal> Cancelled, When no action has been taken, operator exits.</paragraph></list_item><list_item><paragraph><literal>FINISHED</literal> Finished, When the operator is complete, operator exits.</paragraph></list_item><list_item><paragraph><literal>PASS_THROUGH</literal> Pass Through, Do nothing and pass the event on.</paragraph></list_item><list_item><paragraph><literal>INTERFACE</literal> Interface, Handled but not executed (popup menus).</paragraph></list_item></bullet_list></paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>enum set in {‘RUNNING_MODAL’, ‘CANCELLED’, ‘FINISHED’, ‘PASS_THROUGH’, ‘INTERFACE’}</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'check()\ (bpy.types.Operator\ method)',\ u'bpy.types.Operator.check',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Operator" first="False" fullname="Operator.check" ids="bpy.types.Operator.check" module="bpy.types" names="bpy.types.Operator.check"><desc_name xml:space="preserve">check</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Check the operator settings, return True to signal a change to redraw</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>result</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>boolean</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'invoke()\ (bpy.types.Operator\ method)',\ u'bpy.types.Operator.invoke',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Operator" first="False" fullname="Operator.invoke" ids="bpy.types.Operator.invoke" module="bpy.types" names="bpy.types.Operator.invoke"><desc_name xml:space="preserve">invoke</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">event</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Invoke the operator</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph><paragraph>result</paragraph><bullet_list bullet="*"><list_item><paragraph><literal>RUNNING_MODAL</literal> Running Modal, Keep the operator running with blender.</paragraph></list_item><list_item><paragraph><literal>CANCELLED</literal> Cancelled, When no action has been taken, operator exits.</paragraph></list_item><list_item><paragraph><literal>FINISHED</literal> Finished, When the operator is complete, operator exits.</paragraph></list_item><list_item><paragraph><literal>PASS_THROUGH</literal> Pass Through, Do nothing and pass the event on.</paragraph></list_item><list_item><paragraph><literal>INTERFACE</literal> Interface, Handled but not executed (popup menus).</paragraph></list_item></bullet_list></paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>enum set in {‘RUNNING_MODAL’, ‘CANCELLED’, ‘FINISHED’, ‘PASS_THROUGH’, ‘INTERFACE’}</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'modal()\ (bpy.types.Operator\ method)',\ u'bpy.types.Operator.modal',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Operator" first="False" fullname="Operator.modal" ids="bpy.types.Operator.modal" module="bpy.types" names="bpy.types.Operator.modal"><desc_name xml:space="preserve">modal</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter><desc_parameter xml:space="preserve">event</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Modal operator function</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph><paragraph>result</paragraph><bullet_list bullet="*"><list_item><paragraph><literal>RUNNING_MODAL</literal> Running Modal, Keep the operator running with blender.</paragraph></list_item><list_item><paragraph><literal>CANCELLED</literal> Cancelled, When no action has been taken, operator exits.</paragraph></list_item><list_item><paragraph><literal>FINISHED</literal> Finished, When the operator is complete, operator exits.</paragraph></list_item><list_item><paragraph><literal>PASS_THROUGH</literal> Pass Through, Do nothing and pass the event on.</paragraph></list_item><list_item><paragraph><literal>INTERFACE</literal> Interface, Handled but not executed (popup menus).</paragraph></list_item></bullet_list></paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>enum set in {‘RUNNING_MODAL’, ‘CANCELLED’, ‘FINISHED’, ‘PASS_THROUGH’, ‘INTERFACE’}</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'draw()\ (bpy.types.Operator\ method)',\ u'bpy.types.Operator.draw',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Operator" first="False" fullname="Operator.draw" ids="bpy.types.Operator.draw" module="bpy.types" names="bpy.types.Operator.draw"><desc_name xml:space="preserve">draw</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Draw function for the operator</paragraph>
                            <field_list>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'cancel()\ (bpy.types.Operator\ method)',\ u'bpy.types.Operator.cancel',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Operator" first="False" fullname="Operator.cancel" ids="bpy.types.Operator.cancel" module="bpy.types" names="bpy.types.Operator.cancel"><desc_name xml:space="preserve">cancel</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">context</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Called when the operator is canceled</paragraph>
                            <field_list>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'as_keywords()\ (bpy.types.Operator\ method)',\ u'bpy.types.Operator.as_keywords',\ '',\ None]"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Operator" first="False" fullname="Operator.as_keywords" ids="bpy.types.Operator.as_keywords" module="bpy.types" names="bpy.types.Operator.as_keywords"><desc_name xml:space="preserve">as_keywords</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">ignore=()</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <paragraph>Return a copy of the properties as a dictionary</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_rna_get_subclass()\ (bpy.types.Operator\ class\ method)',\ u'bpy.types.Operator.bl_rna_get_subclass',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="Operator" first="False" fullname="Operator.bl_rna_get_subclass" ids="bpy.types.Operator.bl_rna_get_subclass" module="bpy.types" names="bpy.types.Operator.bl_rna_get_subclass"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">bl_rna_get_subclass</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">default=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">id</literal_strong> (<literal_emphasis>string</literal_emphasis>) – The RNA type identifier.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The RNA type or default when not found.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph><reference internal="True" reftitle="bpy.types.Struct" refuri="bpy.types.Struct#bpy.types.Struct"><literal classes="xref py py-class">bpy.types.Struct</literal></reference> subclass</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bl_rna_get_subclass_py()\ (bpy.types.Operator\ class\ method)',\ u'bpy.types.Operator.bl_rna_get_subclass_py',\ '',\ None]"></index>
                    <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                        <desc_signature class="Operator" first="False" fullname="Operator.bl_rna_get_subclass_py" ids="bpy.types.Operator.bl_rna_get_subclass_py" module="bpy.types" names="bpy.types.Operator.bl_rna_get_subclass_py"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">bl_rna_get_subclass_py</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">default=None</desc_parameter></desc_parameterlist></desc_signature>
                        <desc_content>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph><literal_strong refspecific="True">id</literal_strong> (<literal_emphasis>string</literal_emphasis>) – The RNA type identifier.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The class or default when not found.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Return type</field_name>
                                    <field_body>
                                        <paragraph>type</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <rubric>Inherited Properties</rubric>
            <hlist>
                <hlistcol>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.id_data" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.id_data"><literal classes="xref py py-class">bpy_struct.id_data</literal></reference></paragraph>
                        </list_item>
                    </bullet_list>
                </hlistcol>
                <hlistcol>
                    <bullet_list>
                    </bullet_list>
                </hlistcol>
            </hlist>
            <rubric>Inherited Functions</rubric>
            <hlist>
                <hlistcol>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.as_pointer" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.as_pointer"><literal classes="xref py py-class">bpy_struct.as_pointer</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.driver_add" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.driver_add"><literal classes="xref py py-class">bpy_struct.driver_add</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.driver_remove" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.driver_remove"><literal classes="xref py py-class">bpy_struct.driver_remove</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.get" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.get"><literal classes="xref py py-class">bpy_struct.get</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_hidden" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_hidden"><literal classes="xref py py-class">bpy_struct.is_property_hidden</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_overridable_static" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_overridable_static"><literal classes="xref py py-class">bpy_struct.is_property_overridable_static</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_readonly" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_readonly"><literal classes="xref py py-class">bpy_struct.is_property_readonly</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_set" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_set"><literal classes="xref py py-class">bpy_struct.is_property_set</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.items" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.items"><literal classes="xref py py-class">bpy_struct.items</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keyframe_delete" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keyframe_delete"><literal classes="xref py py-class">bpy_struct.keyframe_delete</literal></reference></paragraph>
                        </list_item>
                    </bullet_list>
                </hlistcol>
                <hlistcol>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keyframe_insert" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keyframe_insert"><literal classes="xref py py-class">bpy_struct.keyframe_insert</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keys" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keys"><literal classes="xref py py-class">bpy_struct.keys</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.path_from_id" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.path_from_id"><literal classes="xref py py-class">bpy_struct.path_from_id</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.path_resolve" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.path_resolve"><literal classes="xref py py-class">bpy_struct.path_resolve</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.pop" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.pop"><literal classes="xref py py-class">bpy_struct.pop</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.property_overridable_static_set" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.property_overridable_static_set"><literal classes="xref py py-class">bpy_struct.property_overridable_static_set</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.property_unset" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.property_unset"><literal classes="xref py py-class">bpy_struct.property_unset</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.type_recast" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.type_recast"><literal classes="xref py py-class">bpy_struct.type_recast</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.values" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.values"><literal classes="xref py py-class">bpy_struct.values</literal></reference></paragraph>
                        </list_item>
                    </bullet_list>
                </hlistcol>
            </hlist>
            <rubric>References</rubric>
            <hlist>
                <hlistcol>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.context.active_operator" refuri="bpy.context#bpy.context.active_operator"><literal classes="xref py py-mod">bpy.context.active_operator</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.SpaceFileBrowser.active_operator" refuri="bpy.types.SpaceFileBrowser#bpy.types.SpaceFileBrowser.active_operator"><literal classes="xref py py-class">SpaceFileBrowser.active_operator</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.SpaceFileBrowser.operator" refuri="bpy.types.SpaceFileBrowser#bpy.types.SpaceFileBrowser.operator"><literal classes="xref py py-class">SpaceFileBrowser.operator</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.WindowManager.fileselect_add" refuri="bpy.types.WindowManager#bpy.types.WindowManager.fileselect_add"><literal classes="xref py py-class">WindowManager.fileselect_add</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.WindowManager.invoke_confirm" refuri="bpy.types.WindowManager#bpy.types.WindowManager.invoke_confirm"><literal classes="xref py py-class">WindowManager.invoke_confirm</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.WindowManager.invoke_popup" refuri="bpy.types.WindowManager#bpy.types.WindowManager.invoke_popup"><literal classes="xref py py-class">WindowManager.invoke_popup</literal></reference></paragraph>
                        </list_item>
                    </bullet_list>
                </hlistcol>
                <hlistcol>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.WindowManager.invoke_props_dialog" refuri="bpy.types.WindowManager#bpy.types.WindowManager.invoke_props_dialog"><literal classes="xref py py-class">WindowManager.invoke_props_dialog</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.WindowManager.invoke_props_popup" refuri="bpy.types.WindowManager#bpy.types.WindowManager.invoke_props_popup"><literal classes="xref py py-class">WindowManager.invoke_props_popup</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.WindowManager.invoke_search_popup" refuri="bpy.types.WindowManager#bpy.types.WindowManager.invoke_search_popup"><literal classes="xref py py-class">WindowManager.invoke_search_popup</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.WindowManager.modal_handler_add" refuri="bpy.types.WindowManager#bpy.types.WindowManager.modal_handler_add"><literal classes="xref py py-class">WindowManager.modal_handler_add</literal></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" reftitle="bpy.types.WindowManager.operators" refuri="bpy.types.WindowManager#bpy.types.WindowManager.operators"><literal classes="xref py py-class">WindowManager.operators</literal></reference></paragraph>
                        </list_item>
                    </bullet_list>
                </hlistcol>
            </hlist>
        </section>
    </section>
</document>
