<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/bpy_extras.anim_utils.rst">
    <section ids="module-bpy_extras.anim_utils bpy-extras-submodule-bpy-extras-anim-utils" names="bpy_extras\ submodule\ (bpy_extras.anim_utils)">
        <title>bpy_extras submodule (bpy_extras.anim_utils)</title>
        <index entries="['single',\ u'bpy_extras.anim_utils\ (module)',\ u'module-bpy_extras.anim_utils',\ '',\ None]"></index>
        <index entries="['single',\ u'bake_action()\ (in\ module\ bpy_extras.anim_utils)',\ u'bpy_extras.anim_utils.bake_action',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="bake_action" ids="bpy_extras.anim_utils.bake_action" module="bpy_extras.anim_utils" names="bpy_extras.anim_utils.bake_action"><desc_addname xml:space="preserve">bpy_extras.anim_utils.</desc_addname><desc_name xml:space="preserve">bake_action</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">*</desc_parameter><desc_parameter xml:space="preserve">action</desc_parameter><desc_parameter xml:space="preserve">frames</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">obj</literal_strong> (<reference internal="True" reftitle="bpy.types.Object" refuri="bpy.types.Object#bpy.types.Object"><literal classes="xref py py-class">bpy.types.Object</literal></reference>) – Object to bake.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">action</literal_strong> (<reference internal="True" reftitle="bpy.types.Action" refuri="bpy.types.Action#bpy.types.Action"><literal classes="xref py py-class">bpy.types.Action</literal></reference> or None) – An action to bake the data into, or None for a new action
                                        to be created.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">frames</literal_strong> (<literal_emphasis>iterable of int</literal_emphasis>) – Frames to bake.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Returns</field_name>
                        <field_body>
                            <paragraph>an action or None</paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Return type</field_name>
                        <field_body>
                            <paragraph><reference internal="True" reftitle="bpy.types.Action" refuri="bpy.types.Action#bpy.types.Action"><literal classes="xref py py-class">bpy.types.Action</literal></reference></paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ u'bake_action_objects()\ (in\ module\ bpy_extras.anim_utils)',\ u'bpy_extras.anim_utils.bake_action_objects',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="bake_action_objects" ids="bpy_extras.anim_utils.bake_action_objects" module="bpy_extras.anim_utils" names="bpy_extras.anim_utils.bake_action_objects"><desc_addname xml:space="preserve">bpy_extras.anim_utils.</desc_addname><desc_name xml:space="preserve">bake_action_objects</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">object_action_pairs</desc_parameter><desc_parameter xml:space="preserve">*</desc_parameter><desc_parameter xml:space="preserve">frames</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>A version of <reference internal="True" refid="bpy_extras.anim_utils.bake_action_objects_iter" reftitle="bpy_extras.anim_utils.bake_action_objects_iter"><literal classes="xref py py-func">bake_action_objects_iter()</literal></reference> that takes frames and returns the output.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">frames</literal_strong> (<literal_emphasis>iterable of int</literal_emphasis>) – Frames to bake.</paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Returns</field_name>
                        <field_body>
                            <paragraph>A sequence of Action or None types (aligned with <title_reference>object_action_pairs</title_reference>)</paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Return type</field_name>
                        <field_body>
                            <paragraph>sequence of <reference internal="True" reftitle="bpy.types.Action" refuri="bpy.types.Action#bpy.types.Action"><literal classes="xref py py-class">bpy.types.Action</literal></reference></paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ u'bake_action_iter()\ (in\ module\ bpy_extras.anim_utils)',\ u'bpy_extras.anim_utils.bake_action_iter',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="bake_action_iter" ids="bpy_extras.anim_utils.bake_action_iter" module="bpy_extras.anim_utils" names="bpy_extras.anim_utils.bake_action_iter"><desc_addname xml:space="preserve">bpy_extras.anim_utils.</desc_addname><desc_name xml:space="preserve">bake_action_iter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">obj</desc_parameter><desc_parameter xml:space="preserve">*</desc_parameter><desc_parameter xml:space="preserve">action</desc_parameter><desc_parameter xml:space="preserve">only_selected=False</desc_parameter><desc_parameter xml:space="preserve">do_pose=True</desc_parameter><desc_parameter xml:space="preserve">do_object=True</desc_parameter><desc_parameter xml:space="preserve">do_visual_keying=True</desc_parameter><desc_parameter xml:space="preserve">do_constraint_clear=False</desc_parameter><desc_parameter xml:space="preserve">do_parents_clear=False</desc_parameter><desc_parameter xml:space="preserve">do_clean=False</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>An coroutine that bakes action for a single object.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">obj</literal_strong> (<reference internal="True" reftitle="bpy.types.Object" refuri="bpy.types.Object#bpy.types.Object"><literal classes="xref py py-class">bpy.types.Object</literal></reference>) – Object to bake.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">action</literal_strong> (<reference internal="True" reftitle="bpy.types.Action" refuri="bpy.types.Action#bpy.types.Action"><literal classes="xref py py-class">bpy.types.Action</literal></reference> or None) – An action to bake the data into, or None for a new action
                                        to be created.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">only_selected</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Only bake selected bones.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">do_pose</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Bake pose channels.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">do_object</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Bake objects.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">do_visual_keying</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Use the final transformations for baking (‘visual keying’)</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">do_constraint_clear</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Remove constraints after baking.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">do_parents_clear</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Unparent after baking objects.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">do_clean</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – Remove redundant keyframes after baking.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Returns</field_name>
                        <field_body>
                            <paragraph>an action or None</paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Return type</field_name>
                        <field_body>
                            <paragraph><reference internal="True" reftitle="bpy.types.Action" refuri="bpy.types.Action#bpy.types.Action"><literal classes="xref py py-class">bpy.types.Action</literal></reference></paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <index entries="['single',\ u'bake_action_objects_iter()\ (in\ module\ bpy_extras.anim_utils)',\ u'bpy_extras.anim_utils.bake_action_objects_iter',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="bake_action_objects_iter" ids="bpy_extras.anim_utils.bake_action_objects_iter" module="bpy_extras.anim_utils" names="bpy_extras.anim_utils.bake_action_objects_iter"><desc_addname xml:space="preserve">bpy_extras.anim_utils.</desc_addname><desc_name xml:space="preserve">bake_action_objects_iter</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">object_action_pairs</desc_parameter><desc_parameter xml:space="preserve">**kwargs</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>An coroutine that bakes actions for multiple objects.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <paragraph><literal_strong refspecific="True">object_action_pairs</literal_strong> (Sequence of (<reference internal="True" reftitle="bpy.types.Object" refuri="bpy.types.Object#bpy.types.Object"><literal classes="xref py py-class">bpy.types.Object</literal></reference>, <reference internal="True" reftitle="bpy.types.Action" refuri="bpy.types.Action#bpy.types.Action"><literal classes="xref py py-class">bpy.types.Action</literal></reference>)) – Sequence of object action tuples,
                                action is the destination for the baked data. When None a new action will be created.</paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
    </section>
</document>
