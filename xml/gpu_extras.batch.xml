<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/gpu_extras.batch.rst">
    <section ids="module-gpu_extras.batch gpu-extras-submodule-gpu-extras-batch" names="gpu_extras\ submodule\ (gpu_extras.batch)">
        <title>gpu_extras submodule (gpu_extras.batch)</title>
        <index entries="['single',\ u'gpu_extras.batch\ (module)',\ u'module-gpu_extras.batch',\ '',\ None]"></index>
        <index entries="['single',\ u'batch_for_shader()\ (in\ module\ gpu_extras.batch)',\ u'gpu_extras.batch.batch_for_shader',\ '',\ None]"></index>
        <desc desctype="function" domain="py" noindex="False" objtype="function">
            <desc_signature class="" first="False" fullname="batch_for_shader" ids="gpu_extras.batch.batch_for_shader" module="gpu_extras.batch" names="gpu_extras.batch.batch_for_shader"><desc_addname xml:space="preserve">gpu_extras.batch.</desc_addname><desc_name xml:space="preserve">batch_for_shader</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">shader</desc_parameter><desc_parameter xml:space="preserve">type</desc_parameter><desc_parameter xml:space="preserve">content</desc_parameter><desc_parameter xml:space="preserve">indices=None</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <paragraph>Return a batch already configured and compatible with the shader.</paragraph>
                <field_list>
                    <field>
                        <field_name>Parameters</field_name>
                        <field_body>
                            <bullet_list>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">shader</literal_strong> (<reference internal="True" reftitle="gpu.types.GPUShader" refuri="gpu.types#gpu.types.GPUShader"><literal classes="xref py py-class">gpu.types.GPUShader</literal></reference>) – shader for which a compatible format will be computed.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">type</literal_strong> (<literal_emphasis>str</literal_emphasis>) – “‘POINTS’, ‘LINES’, ‘TRIS’ or ‘LINES_ADJ’”.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><literal_strong refspecific="True">content</literal_strong> (<literal_emphasis>dict</literal_emphasis>) – Maps the name of the shader attribute with the data to fill the vertex buffer.</paragraph>
                                </list_item>
                            </bullet_list>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Returns</field_name>
                        <field_body>
                            <paragraph>compatible batch</paragraph>
                        </field_body>
                    </field>
                    <field>
                        <field_name>Return type</field_name>
                        <field_body>
                            <paragraph><literal classes="xref py py-class">gpu.types.Batch</literal></paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
    </section>
</document>
