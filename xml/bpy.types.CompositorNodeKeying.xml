<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/home/zicklag/git/other/blender/doc/python_api/sphinx-in/bpy.types.CompositorNodeKeying.rst">
    <section ids="module-bpy.types compositornodekeying-compositornode" names="compositornodekeying(compositornode)">
        <title>CompositorNodeKeying(CompositorNode)</title>
        <index entries="['single',\ u'bpy.types\ (module)',\ u'module-bpy.types',\ '',\ None]"></index>
        <paragraph>base classes â€” <reference internal="True" reftitle="bpy.types.bpy_struct" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct"><literal classes="xref py py-class">bpy_struct</literal></reference>, <reference internal="True" reftitle="bpy.types.Node" refuri="bpy.types.Node#bpy.types.Node"><literal classes="xref py py-class">Node</literal></reference>, <reference internal="True" reftitle="bpy.types.NodeInternal" refuri="bpy.types.NodeInternal#bpy.types.NodeInternal"><literal classes="xref py py-class">NodeInternal</literal></reference>, <reference internal="True" reftitle="bpy.types.CompositorNode" refuri="bpy.types.CompositorNode#bpy.types.CompositorNode"><literal classes="xref py py-class">CompositorNode</literal></reference></paragraph>
        <index entries="['single',\ u'CompositorNodeKeying\ (class\ in\ bpy.types)',\ u'bpy.types.CompositorNodeKeying',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="CompositorNodeKeying" ids="bpy.types.CompositorNodeKeying" module="bpy.types" names="bpy.types.CompositorNodeKeying"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">bpy.types.</desc_addname><desc_name xml:space="preserve">CompositorNodeKeying</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">CompositorNode</desc_parameter></desc_parameterlist></desc_signature>
            <desc_content>
                <index entries="['single',\ u'blur_post\ (bpy.types.CompositorNodeKeying\ attribute)',\ u'bpy.types.CompositorNodeKeying.blur_post',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CompositorNodeKeying" first="False" fullname="CompositorNodeKeying.blur_post" ids="bpy.types.CompositorNodeKeying.blur_post" module="bpy.types" names="bpy.types.CompositorNodeKeying.blur_post"><desc_name xml:space="preserve">blur_post</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Matte blur size which applies after clipping and dilate/eroding</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int in [0, 2048], default 0</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'blur_pre\ (bpy.types.CompositorNodeKeying\ attribute)',\ u'bpy.types.CompositorNodeKeying.blur_pre',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CompositorNodeKeying" first="False" fullname="CompositorNodeKeying.blur_pre" ids="bpy.types.CompositorNodeKeying.blur_pre" module="bpy.types" names="bpy.types.CompositorNodeKeying.blur_pre"><desc_name xml:space="preserve">blur_pre</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Chroma pre-blur size which applies before running keyer</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int in [0, 2048], default 0</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'clip_black\ (bpy.types.CompositorNodeKeying\ attribute)',\ u'bpy.types.CompositorNodeKeying.clip_black',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CompositorNodeKeying" first="False" fullname="CompositorNodeKeying.clip_black" ids="bpy.types.CompositorNodeKeying.clip_black" module="bpy.types" names="bpy.types.CompositorNodeKeying.clip_black"><desc_name xml:space="preserve">clip_black</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Value of non-scaled matte pixel which considers as fully background pixel</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float in [0, 1], default 0.0</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'clip_white\ (bpy.types.CompositorNodeKeying\ attribute)',\ u'bpy.types.CompositorNodeKeying.clip_white',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CompositorNodeKeying" first="False" fullname="CompositorNodeKeying.clip_white" ids="bpy.types.CompositorNodeKeying.clip_white" module="bpy.types" names="bpy.types.CompositorNodeKeying.clip_white"><desc_name xml:space="preserve">clip_white</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Value of non-scaled matte pixel which considers as fully foreground pixel</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float in [0, 1], default 0.0</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'despill_balance\ (bpy.types.CompositorNodeKeying\ attribute)',\ u'bpy.types.CompositorNodeKeying.despill_balance',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CompositorNodeKeying" first="False" fullname="CompositorNodeKeying.despill_balance" ids="bpy.types.CompositorNodeKeying.despill_balance" module="bpy.types" names="bpy.types.CompositorNodeKeying.despill_balance"><desc_name xml:space="preserve">despill_balance</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Balance between non-key colors used to detect amount of key color to be removed</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float in [0, 1], default 0.0</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'despill_factor\ (bpy.types.CompositorNodeKeying\ attribute)',\ u'bpy.types.CompositorNodeKeying.despill_factor',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CompositorNodeKeying" first="False" fullname="CompositorNodeKeying.despill_factor" ids="bpy.types.CompositorNodeKeying.despill_factor" module="bpy.types" names="bpy.types.CompositorNodeKeying.despill_factor"><desc_name xml:space="preserve">despill_factor</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Factor of despilling screen color from image</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float in [0, 1], default 0.0</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'dilate_distance\ (bpy.types.CompositorNodeKeying\ attribute)',\ u'bpy.types.CompositorNodeKeying.dilate_distance',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CompositorNodeKeying" first="False" fullname="CompositorNodeKeying.dilate_distance" ids="bpy.types.CompositorNodeKeying.dilate_distance" module="bpy.types" names="bpy.types.CompositorNodeKeying.dilate_distance"><desc_name xml:space="preserve">dilate_distance</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Matte dilate/erode side</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int in [-100, 100], default 0</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'edge_kernel_radius\ (bpy.types.CompositorNodeKeying\ attribute)',\ u'bpy.types.CompositorNodeKeying.edge_kernel_radius',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CompositorNodeKeying" first="False" fullname="CompositorNodeKeying.edge_kernel_radius" ids="bpy.types.CompositorNodeKeying.edge_kernel_radius" module="bpy.types" names="bpy.types.CompositorNodeKeying.edge_kernel_radius"><desc_name xml:space="preserve">edge_kernel_radius</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Radius of kernel used to detect whether pixel belongs to edge</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int in [0, 100], default 0</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'edge_kernel_tolerance\ (bpy.types.CompositorNodeKeying\ attribute)',\ u'bpy.types.CompositorNodeKeying.edge_kernel_tolerance',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CompositorNodeKeying" first="False" fullname="CompositorNodeKeying.edge_kernel_tolerance" ids="bpy.types.CompositorNodeKeying.edge_kernel_tolerance" module="bpy.types" names="bpy.types.CompositorNodeKeying.edge_kernel_tolerance"><desc_name xml:space="preserve">edge_kernel_tolerance</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Tolerance to pixels inside kernel which are treating as belonging to the same plane</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float in [0, 1], default 0.0</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'feather_distance\ (bpy.types.CompositorNodeKeying\ attribute)',\ u'bpy.types.CompositorNodeKeying.feather_distance',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CompositorNodeKeying" first="False" fullname="CompositorNodeKeying.feather_distance" ids="bpy.types.CompositorNodeKeying.feather_distance" module="bpy.types" names="bpy.types.CompositorNodeKeying.feather_distance"><desc_name xml:space="preserve">feather_distance</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Distance to grow/shrink the feather</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int in [-100, 100], default 0</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'feather_falloff\ (bpy.types.CompositorNodeKeying\ attribute)',\ u'bpy.types.CompositorNodeKeying.feather_falloff',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CompositorNodeKeying" first="False" fullname="CompositorNodeKeying.feather_falloff" ids="bpy.types.CompositorNodeKeying.feather_falloff" module="bpy.types" names="bpy.types.CompositorNodeKeying.feather_falloff"><desc_name xml:space="preserve">feather_falloff</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Falloff type the feather</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph><literal>SMOOTH</literal> Smooth, Smooth falloff.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>SPHERE</literal> Sphere, Spherical falloff.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>ROOT</literal> Root, Root falloff.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>INVERSE_SQUARE</literal> Inverse Square, Inverse Square falloff.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>SHARP</literal> Sharp, Sharp falloff.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>LINEAR</literal> Linear, Linear falloff.</paragraph>
                            </list_item>
                        </bullet_list>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>enum in [â€˜SMOOTHâ€™, â€˜SPHEREâ€™, â€˜ROOTâ€™, â€˜INVERSE_SQUAREâ€™, â€˜SHARPâ€™, â€˜LINEARâ€™], default â€˜SMOOTHâ€™</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'screen_balance\ (bpy.types.CompositorNodeKeying\ attribute)',\ u'bpy.types.CompositorNodeKeying.screen_balance',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="CompositorNodeKeying" first="False" fullname="CompositorNodeKeying.screen_balance" ids="bpy.types.CompositorNodeKeying.screen_balance" module="bpy.types" names="bpy.types.CompositorNodeKeying.screen_balance"><desc_name xml:space="preserve">screen_balance</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Balance between two non-primary channels primary channel is comparing against</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>float in [0, 1], default 0.0</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'is_registered_node_type()\ (bpy.types.CompositorNodeKeying\ class\ method)',\ u'bpy.types.CompositorNodeKeying.is_registered_node_type',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="CompositorNodeKeying" first="False" fullname="CompositorNodeKeying.is_registered_node_type" ids="bpy.types.CompositorNodeKeying.is_registered_node_type" module="bpy.types" names="bpy.types.CompositorNodeKeying.is_registered_node_type"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">is_registered_node_type</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>True if a registered node type</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>Result</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>boolean</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'input_template()\ (bpy.types.CompositorNodeKeying\ class\ method)',\ u'bpy.types.CompositorNodeKeying.input_template',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="CompositorNodeKeying" first="False" fullname="CompositorNodeKeying.input_template" ids="bpy.types.CompositorNodeKeying.input_template" module="bpy.types" names="bpy.types.CompositorNodeKeying.input_template"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">input_template</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">index</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Input socket template</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">index</literal_strong> (<literal_emphasis>int in</literal_emphasis><literal_emphasis> [</literal_emphasis><literal_emphasis>0</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>inf</literal_emphasis><literal_emphasis>]</literal_emphasis>) â€“ Index</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>result</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="bpy.types.NodeInternalSocketTemplate" refuri="bpy.types.NodeInternalSocketTemplate#bpy.types.NodeInternalSocketTemplate"><literal classes="xref py py-class">NodeInternalSocketTemplate</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'output_template()\ (bpy.types.CompositorNodeKeying\ class\ method)',\ u'bpy.types.CompositorNodeKeying.output_template',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="CompositorNodeKeying" first="False" fullname="CompositorNodeKeying.output_template" ids="bpy.types.CompositorNodeKeying.output_template" module="bpy.types" names="bpy.types.CompositorNodeKeying.output_template"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">output_template</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">index</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Output socket template</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">index</literal_strong> (<literal_emphasis>int in</literal_emphasis><literal_emphasis> [</literal_emphasis><literal_emphasis>0</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>inf</literal_emphasis><literal_emphasis>]</literal_emphasis>) â€“ Index</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>result</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="bpy.types.NodeInternalSocketTemplate" refuri="bpy.types.NodeInternalSocketTemplate#bpy.types.NodeInternalSocketTemplate"><literal classes="xref py py-class">NodeInternalSocketTemplate</literal></reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'update()\ (bpy.types.CompositorNodeKeying\ method)',\ u'bpy.types.CompositorNodeKeying.update',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="CompositorNodeKeying" first="False" fullname="CompositorNodeKeying.update" ids="bpy.types.CompositorNodeKeying.update" module="bpy.types" names="bpy.types.CompositorNodeKeying.update"><desc_name xml:space="preserve">update</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'bl_rna_get_subclass()\ (bpy.types.CompositorNodeKeying\ class\ method)',\ u'bpy.types.CompositorNodeKeying.bl_rna_get_subclass',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="CompositorNodeKeying" first="False" fullname="CompositorNodeKeying.bl_rna_get_subclass" ids="bpy.types.CompositorNodeKeying.bl_rna_get_subclass" module="bpy.types" names="bpy.types.CompositorNodeKeying.bl_rna_get_subclass"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">bl_rna_get_subclass</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">default=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">id</literal_strong> (<literal_emphasis>string</literal_emphasis>) â€“ The RNA type identifier.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The RNA type or default when not found.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><reference internal="True" reftitle="bpy.types.Struct" refuri="bpy.types.Struct#bpy.types.Struct"><literal classes="xref py py-class">bpy.types.Struct</literal></reference> subclass</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ u'bl_rna_get_subclass_py()\ (bpy.types.CompositorNodeKeying\ class\ method)',\ u'bpy.types.CompositorNodeKeying.bl_rna_get_subclass_py',\ '',\ None]"></index>
                <desc desctype="classmethod" domain="py" noindex="False" objtype="classmethod">
                    <desc_signature class="CompositorNodeKeying" first="False" fullname="CompositorNodeKeying.bl_rna_get_subclass_py" ids="bpy.types.CompositorNodeKeying.bl_rna_get_subclass_py" module="bpy.types" names="bpy.types.CompositorNodeKeying.bl_rna_get_subclass_py"><desc_annotation xml:space="preserve">classmethod </desc_annotation><desc_name xml:space="preserve">bl_rna_get_subclass_py</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">id</desc_parameter><desc_parameter xml:space="preserve">default=None</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">id</literal_strong> (<literal_emphasis>string</literal_emphasis>) â€“ The RNA type identifier.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The class or default when not found.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>type</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <rubric>Inherited Properties</rubric>
        <hlist>
            <hlistcol>
                <bullet_list>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.id_data" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.id_data"><literal classes="xref py py-class">bpy_struct.id_data</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.type" refuri="bpy.types.Node#bpy.types.Node.type"><literal classes="xref py py-class">Node.type</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.location" refuri="bpy.types.Node#bpy.types.Node.location"><literal classes="xref py py-class">Node.location</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.width" refuri="bpy.types.Node#bpy.types.Node.width"><literal classes="xref py py-class">Node.width</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.width_hidden" refuri="bpy.types.Node#bpy.types.Node.width_hidden"><literal classes="xref py py-class">Node.width_hidden</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.height" refuri="bpy.types.Node#bpy.types.Node.height"><literal classes="xref py py-class">Node.height</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.dimensions" refuri="bpy.types.Node#bpy.types.Node.dimensions"><literal classes="xref py py-class">Node.dimensions</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.name" refuri="bpy.types.Node#bpy.types.Node.name"><literal classes="xref py py-class">Node.name</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.label" refuri="bpy.types.Node#bpy.types.Node.label"><literal classes="xref py py-class">Node.label</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.inputs" refuri="bpy.types.Node#bpy.types.Node.inputs"><literal classes="xref py py-class">Node.inputs</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.outputs" refuri="bpy.types.Node#bpy.types.Node.outputs"><literal classes="xref py py-class">Node.outputs</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.internal_links" refuri="bpy.types.Node#bpy.types.Node.internal_links"><literal classes="xref py py-class">Node.internal_links</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.parent" refuri="bpy.types.Node#bpy.types.Node.parent"><literal classes="xref py py-class">Node.parent</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.use_custom_color" refuri="bpy.types.Node#bpy.types.Node.use_custom_color"><literal classes="xref py py-class">Node.use_custom_color</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.color" refuri="bpy.types.Node#bpy.types.Node.color"><literal classes="xref py py-class">Node.color</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.select" refuri="bpy.types.Node#bpy.types.Node.select"><literal classes="xref py py-class">Node.select</literal></reference></paragraph>
                    </list_item>
                </bullet_list>
            </hlistcol>
            <hlistcol>
                <bullet_list>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.show_options" refuri="bpy.types.Node#bpy.types.Node.show_options"><literal classes="xref py py-class">Node.show_options</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.show_preview" refuri="bpy.types.Node#bpy.types.Node.show_preview"><literal classes="xref py py-class">Node.show_preview</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.hide" refuri="bpy.types.Node#bpy.types.Node.hide"><literal classes="xref py py-class">Node.hide</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.mute" refuri="bpy.types.Node#bpy.types.Node.mute"><literal classes="xref py py-class">Node.mute</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.show_texture" refuri="bpy.types.Node#bpy.types.Node.show_texture"><literal classes="xref py py-class">Node.show_texture</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.bl_idname" refuri="bpy.types.Node#bpy.types.Node.bl_idname"><literal classes="xref py py-class">Node.bl_idname</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.bl_label" refuri="bpy.types.Node#bpy.types.Node.bl_label"><literal classes="xref py py-class">Node.bl_label</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.bl_description" refuri="bpy.types.Node#bpy.types.Node.bl_description"><literal classes="xref py py-class">Node.bl_description</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.bl_icon" refuri="bpy.types.Node#bpy.types.Node.bl_icon"><literal classes="xref py py-class">Node.bl_icon</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.bl_static_type" refuri="bpy.types.Node#bpy.types.Node.bl_static_type"><literal classes="xref py py-class">Node.bl_static_type</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.bl_width_default" refuri="bpy.types.Node#bpy.types.Node.bl_width_default"><literal classes="xref py py-class">Node.bl_width_default</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.bl_width_min" refuri="bpy.types.Node#bpy.types.Node.bl_width_min"><literal classes="xref py py-class">Node.bl_width_min</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.bl_width_max" refuri="bpy.types.Node#bpy.types.Node.bl_width_max"><literal classes="xref py py-class">Node.bl_width_max</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.bl_height_default" refuri="bpy.types.Node#bpy.types.Node.bl_height_default"><literal classes="xref py py-class">Node.bl_height_default</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.bl_height_min" refuri="bpy.types.Node#bpy.types.Node.bl_height_min"><literal classes="xref py py-class">Node.bl_height_min</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.bl_height_max" refuri="bpy.types.Node#bpy.types.Node.bl_height_max"><literal classes="xref py py-class">Node.bl_height_max</literal></reference></paragraph>
                    </list_item>
                </bullet_list>
            </hlistcol>
        </hlist>
        <rubric>Inherited Functions</rubric>
        <hlist>
            <hlistcol>
                <bullet_list>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.as_pointer" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.as_pointer"><literal classes="xref py py-class">bpy_struct.as_pointer</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.driver_add" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.driver_add"><literal classes="xref py py-class">bpy_struct.driver_add</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.driver_remove" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.driver_remove"><literal classes="xref py py-class">bpy_struct.driver_remove</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.get" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.get"><literal classes="xref py py-class">bpy_struct.get</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_hidden" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_hidden"><literal classes="xref py py-class">bpy_struct.is_property_hidden</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_overridable_static" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_overridable_static"><literal classes="xref py py-class">bpy_struct.is_property_overridable_static</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_readonly" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_readonly"><literal classes="xref py py-class">bpy_struct.is_property_readonly</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.is_property_set" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.is_property_set"><literal classes="xref py py-class">bpy_struct.is_property_set</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.items" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.items"><literal classes="xref py py-class">bpy_struct.items</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keyframe_delete" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keyframe_delete"><literal classes="xref py py-class">bpy_struct.keyframe_delete</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keyframe_insert" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keyframe_insert"><literal classes="xref py py-class">bpy_struct.keyframe_insert</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.keys" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.keys"><literal classes="xref py py-class">bpy_struct.keys</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.path_from_id" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.path_from_id"><literal classes="xref py py-class">bpy_struct.path_from_id</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.path_resolve" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.path_resolve"><literal classes="xref py py-class">bpy_struct.path_resolve</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.pop" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.pop"><literal classes="xref py py-class">bpy_struct.pop</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.property_overridable_static_set" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.property_overridable_static_set"><literal classes="xref py py-class">bpy_struct.property_overridable_static_set</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.property_unset" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.property_unset"><literal classes="xref py py-class">bpy_struct.property_unset</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.type_recast" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.type_recast"><literal classes="xref py py-class">bpy_struct.type_recast</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.bpy_struct.values" refuri="bpy.types.bpy_struct#bpy.types.bpy_struct.values"><literal classes="xref py py-class">bpy_struct.values</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.socket_value_update" refuri="bpy.types.Node#bpy.types.Node.socket_value_update"><literal classes="xref py py-class">Node.socket_value_update</literal></reference></paragraph>
                    </list_item>
                </bullet_list>
            </hlistcol>
            <hlistcol>
                <bullet_list>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.is_registered_node_type" refuri="bpy.types.Node#bpy.types.Node.is_registered_node_type"><literal classes="xref py py-class">Node.is_registered_node_type</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.poll" refuri="bpy.types.Node#bpy.types.Node.poll"><literal classes="xref py py-class">Node.poll</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.poll_instance" refuri="bpy.types.Node#bpy.types.Node.poll_instance"><literal classes="xref py py-class">Node.poll_instance</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.update" refuri="bpy.types.Node#bpy.types.Node.update"><literal classes="xref py py-class">Node.update</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.insert_link" refuri="bpy.types.Node#bpy.types.Node.insert_link"><literal classes="xref py py-class">Node.insert_link</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.init" refuri="bpy.types.Node#bpy.types.Node.init"><literal classes="xref py py-class">Node.init</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.copy" refuri="bpy.types.Node#bpy.types.Node.copy"><literal classes="xref py py-class">Node.copy</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.free" refuri="bpy.types.Node#bpy.types.Node.free"><literal classes="xref py py-class">Node.free</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.draw_buttons" refuri="bpy.types.Node#bpy.types.Node.draw_buttons"><literal classes="xref py py-class">Node.draw_buttons</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.draw_buttons_ext" refuri="bpy.types.Node#bpy.types.Node.draw_buttons_ext"><literal classes="xref py py-class">Node.draw_buttons_ext</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.draw_label" refuri="bpy.types.Node#bpy.types.Node.draw_label"><literal classes="xref py py-class">Node.draw_label</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.Node.poll" refuri="bpy.types.Node#bpy.types.Node.poll"><literal classes="xref py py-class">Node.poll</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.NodeInternal.poll" refuri="bpy.types.NodeInternal#bpy.types.NodeInternal.poll"><literal classes="xref py py-class">NodeInternal.poll</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.NodeInternal.poll_instance" refuri="bpy.types.NodeInternal#bpy.types.NodeInternal.poll_instance"><literal classes="xref py py-class">NodeInternal.poll_instance</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.NodeInternal.update" refuri="bpy.types.NodeInternal#bpy.types.NodeInternal.update"><literal classes="xref py py-class">NodeInternal.update</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.NodeInternal.draw_buttons" refuri="bpy.types.NodeInternal#bpy.types.NodeInternal.draw_buttons"><literal classes="xref py py-class">NodeInternal.draw_buttons</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.NodeInternal.draw_buttons_ext" refuri="bpy.types.NodeInternal#bpy.types.NodeInternal.draw_buttons_ext"><literal classes="xref py py-class">NodeInternal.draw_buttons_ext</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNode.tag_need_exec" refuri="bpy.types.CompositorNode#bpy.types.CompositorNode.tag_need_exec"><literal classes="xref py py-class">CompositorNode.tag_need_exec</literal></reference></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="xref py py-class">CompositorNode.poll</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference internal="True" reftitle="bpy.types.CompositorNode.update" refuri="bpy.types.CompositorNode#bpy.types.CompositorNode.update"><literal classes="xref py py-class">CompositorNode.update</literal></reference></paragraph>
                    </list_item>
                </bullet_list>
            </hlistcol>
        </hlist>
    </section>
</document>
