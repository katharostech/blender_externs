import bpy
# Generated by Haxe 4.0.0-preview.4+1e3e5e0
# coding: utf-8

import bpy.utils as bpy_utils_Module


class SimpleOperator(bpy.types.Operator):
    __slots__ = ()

    def execute(self,context):
        print("Hello World")
        return set(["FINISHED"])



class blendertools_Plugin:
    __slots__ = ()


class ExamplePlugin:
    __slots__ = ()

    @staticmethod
    def register():
        bpy_utils_Module.register_class(SimpleOperator)
        print("Hello Blender! Registering Haxe module.")

    @staticmethod
    def unregister():
        print("Goodbye Blender! Unregistering Haxe module.")

    @staticmethod
    def main():
        pass


class python_internal_MethodClosure:
    __slots__ = ("obj", "func")

    def __init__(self,obj,func):
        self.obj = obj
        self.func = func

    def __call__(self,*args):
        return self.func(self.obj,*args)



SimpleOperator.bl_idname = "object.simple_operator"
SimpleOperator.bl_label = "Tool Name"
ExamplePlugin.bl_info = "bl_info = {\n\t\"name\": \"Haxe Blender Plugin\",\n\t\"category\": \"User\",\n\t\"location\": \"Properties -> Render -> Haxe Blender Plugin\",\n\t\"description\": \"Haxe Plugin for Blender\",\n\t\"author\": \"Armory3D.com\",\n\t\"version\": (0, 1, 0),\n\t\"blender\": (2, 80, 0)\n}"

if __name__ == '__main__':
    ExamplePlugin.main()

# Global Data
bl_info = {
	"name": "Haxe Blender Plugin",
	"category": "User",
	"location": "Properties -> Render -> Haxe Blender Plugin",
	"description": "Haxe Plugin for Blender",
	"author": "Armory3D.com",
	"version": (0, 1, 0),
	"blender": (2, 80, 0)
}
register = ExamplePlugin.register
unregister = ExamplePlugin.unregister
